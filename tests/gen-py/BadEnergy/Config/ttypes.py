#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class CurrencyTargetID(object):
    Inventory = 0
    HUD = 1
    User = 2
    Guild = 3

    _VALUES_TO_NAMES = {
        0: "Inventory",
        1: "HUD",
        2: "User",
        3: "Guild",
    }

    _NAMES_TO_VALUES = {
        "Inventory": 0,
        "HUD": 1,
        "User": 2,
        "Guild": 3,
    }


class SpecialMoveTrigger(object):
    Nothing = 0
    AfterKill = 1

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "AfterKill",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "AfterKill": 1,
    }


class ArrowDirection(object):
    Up = 0
    Right = 1
    Left = 2
    Down = 3

    _VALUES_TO_NAMES = {
        0: "Up",
        1: "Right",
        2: "Left",
        3: "Down",
    }

    _NAMES_TO_VALUES = {
        "Up": 0,
        "Right": 1,
        "Left": 2,
        "Down": 3,
    }


class RarityID(object):
    Common = 0
    Uncommon = 1
    Rare = 2
    Epic = 3
    Legendary = 4

    _VALUES_TO_NAMES = {
        0: "Common",
        1: "Uncommon",
        2: "Rare",
        3: "Epic",
        4: "Legendary",
    }

    _NAMES_TO_VALUES = {
        "Common": 0,
        "Uncommon": 1,
        "Rare": 2,
        "Epic": 3,
        "Legendary": 4,
    }


class BodyTypeID(object):
    Hero = 0
    Enemy = 1
    Wall = 2
    Trainer = 3
    Boss = 4

    _VALUES_TO_NAMES = {
        0: "Hero",
        1: "Enemy",
        2: "Wall",
        3: "Trainer",
        4: "Boss",
    }

    _NAMES_TO_VALUES = {
        "Hero": 0,
        "Enemy": 1,
        "Wall": 2,
        "Trainer": 3,
        "Boss": 4,
    }


class ActionID(object):
    Nothing = 0
    GoToShop = 1
    GoToHeroCollection = 2
    GoToBattlePrep = 3
    GoToSocial = 4
    GoToRaidPrep = 5
    CloseTopModal = 6
    CloseAllModals = 7
    GoToHomeMenu = 8

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "GoToShop",
        2: "GoToHeroCollection",
        3: "GoToBattlePrep",
        4: "GoToSocial",
        5: "GoToRaidPrep",
        6: "CloseTopModal",
        7: "CloseAllModals",
        8: "GoToHomeMenu",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "GoToShop": 1,
        "GoToHeroCollection": 2,
        "GoToBattlePrep": 3,
        "GoToSocial": 4,
        "GoToRaidPrep": 5,
        "CloseTopModal": 6,
        "CloseAllModals": 7,
        "GoToHomeMenu": 8,
    }


class HeroBodyTypeID(object):
    Bump = 0
    Pierce = 1

    _VALUES_TO_NAMES = {
        0: "Bump",
        1: "Pierce",
    }

    _NAMES_TO_VALUES = {
        "Bump": 0,
        "Pierce": 1,
    }


class AffinityID(object):
    Nothing = 0
    Red = 1
    Blue = 2
    Green = 3
    Yellow = 4
    Black = 5

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Red",
        2: "Blue",
        3: "Green",
        4: "Yellow",
        5: "Black",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Red": 1,
        "Blue": 2,
        "Green": 3,
        "Yellow": 4,
        "Black": 5,
    }


class ProgressionID(object):
    MainCampaign = 0
    TrainingCamps = 1

    _VALUES_TO_NAMES = {
        0: "MainCampaign",
        1: "TrainingCamps",
    }

    _NAMES_TO_VALUES = {
        "MainCampaign": 0,
        "TrainingCamps": 1,
    }


class ColorID(object):
    Red = 0
    Green = 1
    Blue = 2
    Yellow = 3
    Purple = 4
    Black = 5

    _VALUES_TO_NAMES = {
        0: "Red",
        1: "Green",
        2: "Blue",
        3: "Yellow",
        4: "Purple",
        5: "Black",
    }

    _NAMES_TO_VALUES = {
        "Red": 0,
        "Green": 1,
        "Blue": 2,
        "Yellow": 3,
        "Purple": 4,
        "Black": 5,
    }


class CrownChestState(object):
    Nothing = 0
    Animated = 1
    Unlocking = 2
    Collecting = 3
    Ready = 4

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Animated",
        2: "Unlocking",
        3: "Collecting",
        4: "Ready",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Animated": 1,
        "Unlocking": 2,
        "Collecting": 3,
        "Ready": 4,
    }


class DailyAchievementsChestState(object):
    Nothing = 0
    Progress = 1
    Ready = 2
    Collected = 3

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Progress",
        2: "Ready",
        3: "Collected",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Progress": 1,
        "Ready": 2,
        "Collected": 3,
    }


class ChestSlotState(object):
    Nothing = 0
    Unlocking = 1
    Ready = 2
    Animated = 3

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Unlocking",
        2: "Ready",
        3: "Animated",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Unlocking": 1,
        "Ready": 2,
        "Animated": 3,
    }


class TimedChestState(object):
    Nothing = 0
    Unlocking = 1
    Ready = 2

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Unlocking",
        2: "Ready",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Unlocking": 1,
        "Ready": 2,
    }


class ExternalAccountTypeID(object):
    GameCenter = 0
    GooglePlay = 1

    _VALUES_TO_NAMES = {
        0: "GameCenter",
        1: "GooglePlay",
    }

    _NAMES_TO_VALUES = {
        "GameCenter": 0,
        "GooglePlay": 1,
    }


class GuildJoinTypeID(object):
    Open = 0
    Request = 1
    Invite = 2
    Dead = 3

    _VALUES_TO_NAMES = {
        0: "Open",
        1: "Request",
        2: "Invite",
        3: "Dead",
    }

    _NAMES_TO_VALUES = {
        "Open": 0,
        "Request": 1,
        "Invite": 2,
        "Dead": 3,
    }


class GuildMemberTypeID(object):
    Leader = 0
    Coleader = 1
    Boss = 2
    Manager = 3
    Member = 4

    _VALUES_TO_NAMES = {
        0: "Leader",
        1: "Coleader",
        2: "Boss",
        3: "Manager",
        4: "Member",
    }

    _NAMES_TO_VALUES = {
        "Leader": 0,
        "Coleader": 1,
        "Boss": 2,
        "Manager": 3,
        "Member": 4,
    }


class ServerErrorMessageID(object):
    AlreadyApplied = 100
    MemberAcceptInvite = 101

    _VALUES_TO_NAMES = {
        100: "AlreadyApplied",
        101: "MemberAcceptInvite",
    }

    _NAMES_TO_VALUES = {
        "AlreadyApplied": 100,
        "MemberAcceptInvite": 101,
    }


class HudTypeID(object):
    Default = 0
    NoHud = 1
    Custom = 2

    _VALUES_TO_NAMES = {
        0: "Default",
        1: "NoHud",
        2: "Custom",
    }

    _NAMES_TO_VALUES = {
        "Default": 0,
        "NoHud": 1,
        "Custom": 2,
    }


class LeagueID(object):
    Set = 0
    Family = 1
    Enterprise = 2
    Syndicate = 3
    Cartel = 4

    _VALUES_TO_NAMES = {
        0: "Set",
        1: "Family",
        2: "Enterprise",
        3: "Syndicate",
        4: "Cartel",
    }

    _NAMES_TO_VALUES = {
        "Set": 0,
        "Family": 1,
        "Enterprise": 2,
        "Syndicate": 3,
        "Cartel": 4,
    }


class SkillTypeID(object):
    PassiveSkill = 0
    BumpCombo = 1
    EnergyShot = 2
    Enchantment = 3
    Mark = 4
    StatBumper = 5
    BasicAttack = 6
    Attack = 7
    NotUsed = 8

    _VALUES_TO_NAMES = {
        0: "PassiveSkill",
        1: "BumpCombo",
        2: "EnergyShot",
        3: "Enchantment",
        4: "Mark",
        5: "StatBumper",
        6: "BasicAttack",
        7: "Attack",
        8: "NotUsed",
    }

    _NAMES_TO_VALUES = {
        "PassiveSkill": 0,
        "BumpCombo": 1,
        "EnergyShot": 2,
        "Enchantment": 3,
        "Mark": 4,
        "StatBumper": 5,
        "BasicAttack": 6,
        "Attack": 7,
        "NotUsed": 8,
    }


class WhenToShootID(object):
    EveryTurn = 0
    MyTurn = 1
    CycleSkills = 2

    _VALUES_TO_NAMES = {
        0: "EveryTurn",
        1: "MyTurn",
        2: "CycleSkills",
    }

    _NAMES_TO_VALUES = {
        "EveryTurn": 0,
        "MyTurn": 1,
        "CycleSkills": 2,
    }


class ModTypeID(object):
    Physical = 0
    HeroStat = 1

    _VALUES_TO_NAMES = {
        0: "Physical",
        1: "HeroStat",
    }

    _NAMES_TO_VALUES = {
        "Physical": 0,
        "HeroStat": 1,
    }


class DurationID(object):
    Bump = 0
    Shot = 1
    Scene = 2
    Level = 3

    _VALUES_TO_NAMES = {
        0: "Bump",
        1: "Shot",
        2: "Scene",
        3: "Level",
    }

    _NAMES_TO_VALUES = {
        "Bump": 0,
        "Shot": 1,
        "Scene": 2,
        "Level": 3,
    }


class GenderID(object):
    Male = 0
    Female = 1

    _VALUES_TO_NAMES = {
        0: "Male",
        1: "Female",
    }

    _NAMES_TO_VALUES = {
        "Male": 0,
        "Female": 1,
    }


class MovementTypeID(object):
    Normal = 0
    Immobile = 1

    _VALUES_TO_NAMES = {
        0: "Normal",
        1: "Immobile",
    }

    _NAMES_TO_VALUES = {
        "Normal": 0,
        "Immobile": 1,
    }


class CollisionLayerID(object):
    DisableCollisions = 0
    Hero = 1
    Teammate = 2
    Enemy = 3
    Wall = 4
    Projectile = 5
    EdgeElement = 6

    _VALUES_TO_NAMES = {
        0: "DisableCollisions",
        1: "Hero",
        2: "Teammate",
        3: "Enemy",
        4: "Wall",
        5: "Projectile",
        6: "EdgeElement",
    }

    _NAMES_TO_VALUES = {
        "DisableCollisions": 0,
        "Hero": 1,
        "Teammate": 2,
        "Enemy": 3,
        "Wall": 4,
        "Projectile": 5,
        "EdgeElement": 6,
    }


class ImageTypeID(object):
    Simple = 0
    Sliced = 1
    Tiled = 2
    Filled = 3

    _VALUES_TO_NAMES = {
        0: "Simple",
        1: "Sliced",
        2: "Tiled",
        3: "Filled",
    }

    _NAMES_TO_VALUES = {
        "Simple": 0,
        "Sliced": 1,
        "Tiled": 2,
        "Filled": 3,
    }


class SpawnTypeID(object):
    Normal = 0
    Respawn = 1
    Disable = 2

    _VALUES_TO_NAMES = {
        0: "Normal",
        1: "Respawn",
        2: "Disable",
    }

    _NAMES_TO_VALUES = {
        "Normal": 0,
        "Respawn": 1,
        "Disable": 2,
    }


class PlacementTypeID(object):
    Point = 0
    Line = 1

    _VALUES_TO_NAMES = {
        0: "Point",
        1: "Line",
    }

    _NAMES_TO_VALUES = {
        "Point": 0,
        "Line": 1,
    }


class PurchaseOfferResetTypeID(object):
    SystemMidnight = 0
    SystemTime = 1
    UserMidnight = 2
    UserTime = 3

    _VALUES_TO_NAMES = {
        0: "SystemMidnight",
        1: "SystemTime",
        2: "UserMidnight",
        3: "UserTime",
    }

    _NAMES_TO_VALUES = {
        "SystemMidnight": 0,
        "SystemTime": 1,
        "UserMidnight": 2,
        "UserTime": 3,
    }


class CurrencyTypeID(object):
    Resource = 0
    Hero = 1
    Cash = 2
    Gear = 3
    Chest = 4
    HeroSummon = 5

    _VALUES_TO_NAMES = {
        0: "Resource",
        1: "Hero",
        2: "Cash",
        3: "Gear",
        4: "Chest",
        5: "HeroSummon",
    }

    _NAMES_TO_VALUES = {
        "Resource": 0,
        "Hero": 1,
        "Cash": 2,
        "Gear": 3,
        "Chest": 4,
        "HeroSummon": 5,
    }


class DamageType(object):
    Physical = 0
    Magic = 1
    Pure = 2

    _VALUES_TO_NAMES = {
        0: "Physical",
        1: "Magic",
        2: "Pure",
    }

    _NAMES_TO_VALUES = {
        "Physical": 0,
        "Magic": 1,
        "Pure": 2,
    }


class TutorialSpecialFlag(object):
    CloseAllModalsOnStart = 0

    _VALUES_TO_NAMES = {
        0: "CloseAllModalsOnStart",
    }

    _NAMES_TO_VALUES = {
        "CloseAllModalsOnStart": 0,
    }


class EventPhaseID(object):
    Nothing = 0
    Preview = 1
    Main = 2
    Recap = 3
    PreviewMain = 4
    MainRecap = 5

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Preview",
        2: "Main",
        3: "Recap",
        4: "PreviewMain",
        5: "MainRecap",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Preview": 1,
        "Main": 2,
        "Recap": 3,
        "PreviewMain": 4,
        "MainRecap": 5,
    }


class TriggerTypeID(object):
    Invisible = 0
    AlwaysOn = 1
    Temp = 2
    AfterHeroes = 3
    AfterEnemies = 4
    OverTime = 5
    OverDistance = 6

    _VALUES_TO_NAMES = {
        0: "Invisible",
        1: "AlwaysOn",
        2: "Temp",
        3: "AfterHeroes",
        4: "AfterEnemies",
        5: "OverTime",
        6: "OverDistance",
    }

    _NAMES_TO_VALUES = {
        "Invisible": 0,
        "AlwaysOn": 1,
        "Temp": 2,
        "AfterHeroes": 3,
        "AfterEnemies": 4,
        "OverTime": 5,
        "OverDistance": 6,
    }


class GenderMatchID(object):
    DontCare = 0
    Match = 1
    NotMatch = 2
    Male = 3
    Female = 4

    _VALUES_TO_NAMES = {
        0: "DontCare",
        1: "Match",
        2: "NotMatch",
        3: "Male",
        4: "Female",
    }

    _NAMES_TO_VALUES = {
        "DontCare": 0,
        "Match": 1,
        "NotMatch": 2,
        "Male": 3,
        "Female": 4,
    }


class AffinityMatchID(object):
    DontCare = 0
    Match = 1
    NotMatch = 2
    Red = 3
    Blue = 4
    Green = 5
    Yellow = 6
    Black = 7

    _VALUES_TO_NAMES = {
        0: "DontCare",
        1: "Match",
        2: "NotMatch",
        3: "Red",
        4: "Blue",
        5: "Green",
        6: "Yellow",
        7: "Black",
    }

    _NAMES_TO_VALUES = {
        "DontCare": 0,
        "Match": 1,
        "NotMatch": 2,
        "Red": 3,
        "Blue": 4,
        "Green": 5,
        "Yellow": 6,
        "Black": 7,
    }


class HeroStatID(object):
    Hp = 0
    Damage = 1
    Speed = 2
    Drag = 3
    Restitution = 4
    PhysicalAttack = 5
    PhysicalDefense = 6
    MagicAttack = 7
    MagicDefense = 8

    _VALUES_TO_NAMES = {
        0: "Hp",
        1: "Damage",
        2: "Speed",
        3: "Drag",
        4: "Restitution",
        5: "PhysicalAttack",
        6: "PhysicalDefense",
        7: "MagicAttack",
        8: "MagicDefense",
    }

    _NAMES_TO_VALUES = {
        "Hp": 0,
        "Damage": 1,
        "Speed": 2,
        "Drag": 3,
        "Restitution": 4,
        "PhysicalAttack": 5,
        "PhysicalDefense": 6,
        "MagicAttack": 7,
        "MagicDefense": 8,
    }


class HeroStatisticID(object):
    DamageDealt = 0
    HpDealt = 1
    HpReceived = 2

    _VALUES_TO_NAMES = {
        0: "DamageDealt",
        1: "HpDealt",
        2: "HpReceived",
    }

    _NAMES_TO_VALUES = {
        "DamageDealt": 0,
        "HpDealt": 1,
        "HpReceived": 2,
    }


class DropTypeID(object):
    All = 0
    DropOnly = 1
    CraftOnly = 2

    _VALUES_TO_NAMES = {
        0: "All",
        1: "DropOnly",
        2: "CraftOnly",
    }

    _NAMES_TO_VALUES = {
        "All": 0,
        "DropOnly": 1,
        "CraftOnly": 2,
    }


class AndroidNotificationChannelImportance(object):
    Zero = 0
    Low = 2
    High = 4
    Default = 3

    _VALUES_TO_NAMES = {
        0: "Zero",
        2: "Low",
        4: "High",
        3: "Default",
    }

    _NAMES_TO_VALUES = {
        "Zero": 0,
        "Low": 2,
        "High": 4,
        "Default": 3,
    }


class AndroidNotificationLockScreenVisibility(object):
    Private = 0
    Public = 1
    Secret = 2

    _VALUES_TO_NAMES = {
        0: "Private",
        1: "Public",
        2: "Secret",
    }

    _NAMES_TO_VALUES = {
        "Private": 0,
        "Public": 1,
        "Secret": 2,
    }


class IosNotificationPresentationOption(object):
    Nothing = 0
    Badge = 1
    Sound = 2
    Alert = 3

    _VALUES_TO_NAMES = {
        0: "Nothing",
        1: "Badge",
        2: "Sound",
        3: "Alert",
    }

    _NAMES_TO_VALUES = {
        "Nothing": 0,
        "Badge": 1,
        "Sound": 2,
        "Alert": 3,
    }


class IosNotificationAlertStyle(object):
    NoAlert = 0
    Alert = 1
    Banner = 2

    _VALUES_TO_NAMES = {
        0: "NoAlert",
        1: "Alert",
        2: "Banner",
    }

    _NAMES_TO_VALUES = {
        "NoAlert": 0,
        "Alert": 1,
        "Banner": 2,
    }


class TrainingCampStateID(object):
    Locked = 0
    Idle = 1
    Upgrading = 2
    Training = 3

    _VALUES_TO_NAMES = {
        0: "Locked",
        1: "Idle",
        2: "Upgrading",
        3: "Training",
    }

    _NAMES_TO_VALUES = {
        "Locked": 0,
        "Idle": 1,
        "Upgrading": 2,
        "Training": 3,
    }


class AttackLaunchTypeID(object):
    OnePerTurn = 0
    OneAtATime = 1
    OnePerHit = 2

    _VALUES_TO_NAMES = {
        0: "OnePerTurn",
        1: "OneAtATime",
        2: "OnePerHit",
    }

    _NAMES_TO_VALUES = {
        "OnePerTurn": 0,
        "OneAtATime": 1,
        "OnePerHit": 2,
    }


class ProjectileParentID(object):
    Hero = 0
    Background = 1
    Target = 2

    _VALUES_TO_NAMES = {
        0: "Hero",
        1: "Background",
        2: "Target",
    }

    _NAMES_TO_VALUES = {
        "Hero": 0,
        "Background": 1,
        "Target": 2,
    }


class RechargeTypeID(object):
    NoLimit = 0
    Turn = 1
    Energy = 2
    Time = 3

    _VALUES_TO_NAMES = {
        0: "NoLimit",
        1: "Turn",
        2: "Energy",
        3: "Time",
    }

    _NAMES_TO_VALUES = {
        "NoLimit": 0,
        "Turn": 1,
        "Energy": 2,
        "Time": 3,
    }


class AttackParentID(object):
    Hero = 0
    Background = 1
    Target = 2

    _VALUES_TO_NAMES = {
        0: "Hero",
        1: "Background",
        2: "Target",
    }

    _NAMES_TO_VALUES = {
        "Hero": 0,
        "Background": 1,
        "Target": 2,
    }


class LifespanTypeID(object):
    Normal = 0
    Immortal = 1
    HeroCollision = 2
    EnemyCollision = 3
    BoundaryCollision = 4
    AnyCollision = 5
    Fixed = 6
    Target = 7

    _VALUES_TO_NAMES = {
        0: "Normal",
        1: "Immortal",
        2: "HeroCollision",
        3: "EnemyCollision",
        4: "BoundaryCollision",
        5: "AnyCollision",
        6: "Fixed",
        7: "Target",
    }

    _NAMES_TO_VALUES = {
        "Normal": 0,
        "Immortal": 1,
        "HeroCollision": 2,
        "EnemyCollision": 3,
        "BoundaryCollision": 4,
        "AnyCollision": 5,
        "Fixed": 6,
        "Target": 7,
    }


class TargetTypeID(object):
    NoTarget = 0
    FurthestEnemy = 1
    WeakestTeammate = 2
    NearestEnemy = 3

    _VALUES_TO_NAMES = {
        0: "NoTarget",
        1: "FurthestEnemy",
        2: "WeakestTeammate",
        3: "NearestEnemy",
    }

    _NAMES_TO_VALUES = {
        "NoTarget": 0,
        "FurthestEnemy": 1,
        "WeakestTeammate": 2,
        "NearestEnemy": 3,
    }


class AimTypeID(object):
    Shooter = 0
    TargetRelative = 1
    Right = 2
    Up = 3
    Left = 4
    Down = 5
    Random = 6
    AtTarget = 7
    SmartLeftRight = 8
    Predictive = 9
    DumbLeftRight = 10

    _VALUES_TO_NAMES = {
        0: "Shooter",
        1: "TargetRelative",
        2: "Right",
        3: "Up",
        4: "Left",
        5: "Down",
        6: "Random",
        7: "AtTarget",
        8: "SmartLeftRight",
        9: "Predictive",
        10: "DumbLeftRight",
    }

    _NAMES_TO_VALUES = {
        "Shooter": 0,
        "TargetRelative": 1,
        "Right": 2,
        "Up": 3,
        "Left": 4,
        "Down": 5,
        "Random": 6,
        "AtTarget": 7,
        "SmartLeftRight": 8,
        "Predictive": 9,
        "DumbLeftRight": 10,
    }


class MotionTypeID(object):
    Illegal = 0
    WallBounce = 1
    Boomerang = 2
    Spiral = 3
    Rotate = 4
    CatmullRom = 5
    ActionMoveTo = 6
    Guided = 7
    Homing = 8

    _VALUES_TO_NAMES = {
        0: "Illegal",
        1: "WallBounce",
        2: "Boomerang",
        3: "Spiral",
        4: "Rotate",
        5: "CatmullRom",
        6: "ActionMoveTo",
        7: "Guided",
        8: "Homing",
    }

    _NAMES_TO_VALUES = {
        "Illegal": 0,
        "WallBounce": 1,
        "Boomerang": 2,
        "Spiral": 3,
        "Rotate": 4,
        "CatmullRom": 5,
        "ActionMoveTo": 6,
        "Guided": 7,
        "Homing": 8,
    }


class MotionEaseID(object):
    Linear = 0
    EaseIn = 1
    EaseOut = 2
    EaseInOut = 3
    EaseExponentialIn = 4
    EaseExponentialOut = 5
    EaseExponentialInOut = 6
    EaseSineIn = 7
    EaseSineOut = 8
    EaseSineInOut = 9
    EaseQuadIn = 10
    EaseQuadOut = 11
    EaseQuadInOut = 12
    EaseCubicIn = 13
    EaseCubicOut = 14
    EaseCubicInOut = 15
    EaseQuartIn = 16
    EaseQuartOut = 17
    EaseQuartInOut = 18
    EaseQuintIn = 19
    EaseQuintOut = 20
    EaseQuintInOut = 21
    EaseCircularIn = 22
    EaseCircularOut = 23
    EaseCircularInOut = 24
    EaseElasticIn = 25
    EaseElasticOut = 26
    EaseElasticInOut = 27
    EaseBackIn = 28
    EaseBackOut = 29
    EaseBackInOut = 30
    EaseBounceIn = 31
    EaseBounceOut = 32
    EaseBounceInOut = 33
    EaseQuadraticIn = 34
    EaseQuadraticOut = 35
    EaseQuadraticInOut = 36

    _VALUES_TO_NAMES = {
        0: "Linear",
        1: "EaseIn",
        2: "EaseOut",
        3: "EaseInOut",
        4: "EaseExponentialIn",
        5: "EaseExponentialOut",
        6: "EaseExponentialInOut",
        7: "EaseSineIn",
        8: "EaseSineOut",
        9: "EaseSineInOut",
        10: "EaseQuadIn",
        11: "EaseQuadOut",
        12: "EaseQuadInOut",
        13: "EaseCubicIn",
        14: "EaseCubicOut",
        15: "EaseCubicInOut",
        16: "EaseQuartIn",
        17: "EaseQuartOut",
        18: "EaseQuartInOut",
        19: "EaseQuintIn",
        20: "EaseQuintOut",
        21: "EaseQuintInOut",
        22: "EaseCircularIn",
        23: "EaseCircularOut",
        24: "EaseCircularInOut",
        25: "EaseElasticIn",
        26: "EaseElasticOut",
        27: "EaseElasticInOut",
        28: "EaseBackIn",
        29: "EaseBackOut",
        30: "EaseBackInOut",
        31: "EaseBounceIn",
        32: "EaseBounceOut",
        33: "EaseBounceInOut",
        34: "EaseQuadraticIn",
        35: "EaseQuadraticOut",
        36: "EaseQuadraticInOut",
    }

    _NAMES_TO_VALUES = {
        "Linear": 0,
        "EaseIn": 1,
        "EaseOut": 2,
        "EaseInOut": 3,
        "EaseExponentialIn": 4,
        "EaseExponentialOut": 5,
        "EaseExponentialInOut": 6,
        "EaseSineIn": 7,
        "EaseSineOut": 8,
        "EaseSineInOut": 9,
        "EaseQuadIn": 10,
        "EaseQuadOut": 11,
        "EaseQuadInOut": 12,
        "EaseCubicIn": 13,
        "EaseCubicOut": 14,
        "EaseCubicInOut": 15,
        "EaseQuartIn": 16,
        "EaseQuartOut": 17,
        "EaseQuartInOut": 18,
        "EaseQuintIn": 19,
        "EaseQuintOut": 20,
        "EaseQuintInOut": 21,
        "EaseCircularIn": 22,
        "EaseCircularOut": 23,
        "EaseCircularInOut": 24,
        "EaseElasticIn": 25,
        "EaseElasticOut": 26,
        "EaseElasticInOut": 27,
        "EaseBackIn": 28,
        "EaseBackOut": 29,
        "EaseBackInOut": 30,
        "EaseBounceIn": 31,
        "EaseBounceOut": 32,
        "EaseBounceInOut": 33,
        "EaseQuadraticIn": 34,
        "EaseQuadraticOut": 35,
        "EaseQuadraticInOut": 36,
    }


class OrientationTypeID(object):
    Default = 0
    Up = 1
    Forward = 2

    _VALUES_TO_NAMES = {
        0: "Default",
        1: "Up",
        2: "Forward",
    }

    _NAMES_TO_VALUES = {
        "Default": 0,
        "Up": 1,
        "Forward": 2,
    }


class WallBehaviorID(object):
    Pierce = 0
    Bounce = 1
    Stop = 2

    _VALUES_TO_NAMES = {
        0: "Pierce",
        1: "Bounce",
        2: "Stop",
    }

    _NAMES_TO_VALUES = {
        "Pierce": 0,
        "Bounce": 1,
        "Stop": 2,
    }


class ConfigCleanerTypeID(object):
    Auto = 0
    ServerFunction = 1

    _VALUES_TO_NAMES = {
        0: "Auto",
        1: "ServerFunction",
    }

    _NAMES_TO_VALUES = {
        "Auto": 0,
        "ServerFunction": 1,
    }


class UserFieldID(object):
    Safe = 0
    All = 1
    ConfigCleanerNum = 2
    SocialBasicInfo = 3
    AffinityId = 4
    Language = 5
    NumPurchases = 6
    GemPassStates = 7
    VipLevel = 8
    ExternalAccountIds = 9
    LinkedUserIds = 10
    Rank = 11
    TrainingCamps = 12
    ChestAwardSequencePosition = 14
    CurrentCampaignNumber = 15
    CurrentCampaignLevelNumber = 16
    CurrencyBalances = 17
    CurrencyTimeBalanceLastModified = 18
    ChestSlots = 20
    ChestSlotUnlockStartTime = 21
    ChestSlotState = 22
    AchievementStates = 24
    HeroCardStates = 26
    BadgeStates = 30
    NumCardsBoughtToday = 32
    TimeLastShopRefresh = 33
    PurchaseOfferHistories = 34
    RaidOpponentMatches = 35
    RaidMatchHistories = 56
    CrownChestState = 40
    CrownChestProgress = 41
    CrownChestLockStartTime = 42
    AccumulateCrownChest = 43
    DailyAchievementsChestState = 44
    DailyAchievementsChestNum = 45
    TimedChestState = 50
    TimedChestUnlockStartTime = 51
    TutorialFlags = 60
    OpenedSecondChest = 61
    ChoseStarterChest = 62
    Decks = 70
    SelectedDeckNum = 71
    DefenseDeckNum = 72
    RaidAttackDeckNum = 73
    LastestChestRewardList = 80
    LastGuildApplication = 81
    InboxGiftMessages = 90
    InboxGuildInvites = 92
    InboxGuildApplications = 93
    GuildChatMessages = 94
    NewGuildChatMessages = 95

    _VALUES_TO_NAMES = {
        0: "Safe",
        1: "All",
        2: "ConfigCleanerNum",
        3: "SocialBasicInfo",
        4: "AffinityId",
        5: "Language",
        6: "NumPurchases",
        7: "GemPassStates",
        8: "VipLevel",
        9: "ExternalAccountIds",
        10: "LinkedUserIds",
        11: "Rank",
        12: "TrainingCamps",
        14: "ChestAwardSequencePosition",
        15: "CurrentCampaignNumber",
        16: "CurrentCampaignLevelNumber",
        17: "CurrencyBalances",
        18: "CurrencyTimeBalanceLastModified",
        20: "ChestSlots",
        21: "ChestSlotUnlockStartTime",
        22: "ChestSlotState",
        24: "AchievementStates",
        26: "HeroCardStates",
        30: "BadgeStates",
        32: "NumCardsBoughtToday",
        33: "TimeLastShopRefresh",
        34: "PurchaseOfferHistories",
        35: "RaidOpponentMatches",
        56: "RaidMatchHistories",
        40: "CrownChestState",
        41: "CrownChestProgress",
        42: "CrownChestLockStartTime",
        43: "AccumulateCrownChest",
        44: "DailyAchievementsChestState",
        45: "DailyAchievementsChestNum",
        50: "TimedChestState",
        51: "TimedChestUnlockStartTime",
        60: "TutorialFlags",
        61: "OpenedSecondChest",
        62: "ChoseStarterChest",
        70: "Decks",
        71: "SelectedDeckNum",
        72: "DefenseDeckNum",
        73: "RaidAttackDeckNum",
        80: "LastestChestRewardList",
        81: "LastGuildApplication",
        90: "InboxGiftMessages",
        92: "InboxGuildInvites",
        93: "InboxGuildApplications",
        94: "GuildChatMessages",
        95: "NewGuildChatMessages",
    }

    _NAMES_TO_VALUES = {
        "Safe": 0,
        "All": 1,
        "ConfigCleanerNum": 2,
        "SocialBasicInfo": 3,
        "AffinityId": 4,
        "Language": 5,
        "NumPurchases": 6,
        "GemPassStates": 7,
        "VipLevel": 8,
        "ExternalAccountIds": 9,
        "LinkedUserIds": 10,
        "Rank": 11,
        "TrainingCamps": 12,
        "ChestAwardSequencePosition": 14,
        "CurrentCampaignNumber": 15,
        "CurrentCampaignLevelNumber": 16,
        "CurrencyBalances": 17,
        "CurrencyTimeBalanceLastModified": 18,
        "ChestSlots": 20,
        "ChestSlotUnlockStartTime": 21,
        "ChestSlotState": 22,
        "AchievementStates": 24,
        "HeroCardStates": 26,
        "BadgeStates": 30,
        "NumCardsBoughtToday": 32,
        "TimeLastShopRefresh": 33,
        "PurchaseOfferHistories": 34,
        "RaidOpponentMatches": 35,
        "RaidMatchHistories": 56,
        "CrownChestState": 40,
        "CrownChestProgress": 41,
        "CrownChestLockStartTime": 42,
        "AccumulateCrownChest": 43,
        "DailyAchievementsChestState": 44,
        "DailyAchievementsChestNum": 45,
        "TimedChestState": 50,
        "TimedChestUnlockStartTime": 51,
        "TutorialFlags": 60,
        "OpenedSecondChest": 61,
        "ChoseStarterChest": 62,
        "Decks": 70,
        "SelectedDeckNum": 71,
        "DefenseDeckNum": 72,
        "RaidAttackDeckNum": 73,
        "LastestChestRewardList": 80,
        "LastGuildApplication": 81,
        "InboxGiftMessages": 90,
        "InboxGuildInvites": 92,
        "InboxGuildApplications": 93,
        "GuildChatMessages": 94,
        "NewGuildChatMessages": 95,
    }


class DateTimeUTC(object):
    """
    Attributes:
     - epochMilliseconds

    """


    def __init__(self, epochMilliseconds=None,):
        self.epochMilliseconds = epochMilliseconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.epochMilliseconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DateTimeUTC')
        if self.epochMilliseconds is not None:
            oprot.writeFieldBegin('epochMilliseconds', TType.I64, 1)
            oprot.writeI64(self.epochMilliseconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.epochMilliseconds is None:
            raise TProtocolException(message='Required field epochMilliseconds is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SettingKeyValue(object):
    """
    Attributes:
     - settingKey
     - settingValue
     - settingType

    """


    def __init__(self, settingKey=None, settingValue=None, settingType=None,):
        self.settingKey = settingKey
        self.settingValue = settingValue
        self.settingType = settingType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.settingKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.settingValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.settingType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SettingKeyValue')
        if self.settingKey is not None:
            oprot.writeFieldBegin('settingKey', TType.STRING, 1)
            oprot.writeString(self.settingKey.encode('utf-8') if sys.version_info[0] == 2 else self.settingKey)
            oprot.writeFieldEnd()
        if self.settingValue is not None:
            oprot.writeFieldBegin('settingValue', TType.STRING, 2)
            oprot.writeString(self.settingValue.encode('utf-8') if sys.version_info[0] == 2 else self.settingValue)
            oprot.writeFieldEnd()
        if self.settingType is not None:
            oprot.writeFieldBegin('settingType', TType.STRING, 3)
            oprot.writeString(self.settingType.encode('utf-8') if sys.version_info[0] == 2 else self.settingType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CurrencyTarget(object):
    """
    Attributes:
     - currencyTargetId
     - iconPath

    """


    def __init__(self, currencyTargetId=None, iconPath=None,):
        self.currencyTargetId = currencyTargetId
        self.iconPath = iconPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.currencyTargetId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.iconPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CurrencyTarget')
        if self.currencyTargetId is not None:
            oprot.writeFieldBegin('currencyTargetId', TType.I32, 1)
            oprot.writeI32(self.currencyTargetId)
            oprot.writeFieldEnd()
        if self.iconPath is not None:
            oprot.writeFieldBegin('iconPath', TType.STRING, 2)
            oprot.writeString(self.iconPath.encode('utf-8') if sys.version_info[0] == 2 else self.iconPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyTargetId is None:
            raise TProtocolException(message='Required field currencyTargetId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserBasicInfo(object):
    """
    Attributes:
     - userId
     - rank
     - lastActivity
     - mostRecentDeviceName
     - nickname
     - vipLevel
     - guildEmblemId
     - guildFrameId
     - guildName
     - userFrameId
     - userIconId

    """


    def __init__(self, userId=None, rank=None, lastActivity=None, mostRecentDeviceName=None, nickname=None, vipLevel=None, guildEmblemId=None, guildFrameId=None, guildName=None, userFrameId=None, userIconId=None,):
        self.userId = userId
        self.rank = rank
        self.lastActivity = lastActivity
        self.mostRecentDeviceName = mostRecentDeviceName
        self.nickname = nickname
        self.vipLevel = vipLevel
        self.guildEmblemId = guildEmblemId
        self.guildFrameId = guildFrameId
        self.guildName = guildName
        self.userFrameId = userFrameId
        self.userIconId = userIconId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.lastActivity = DateTimeUTC()
                    self.lastActivity.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mostRecentDeviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nickname = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vipLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.guildEmblemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.guildFrameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.guildName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.userFrameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.userIconId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserBasicInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.rank is not None:
            oprot.writeFieldBegin('rank', TType.I32, 2)
            oprot.writeI32(self.rank)
            oprot.writeFieldEnd()
        if self.lastActivity is not None:
            oprot.writeFieldBegin('lastActivity', TType.STRUCT, 3)
            self.lastActivity.write(oprot)
            oprot.writeFieldEnd()
        if self.mostRecentDeviceName is not None:
            oprot.writeFieldBegin('mostRecentDeviceName', TType.STRING, 4)
            oprot.writeString(self.mostRecentDeviceName.encode('utf-8') if sys.version_info[0] == 2 else self.mostRecentDeviceName)
            oprot.writeFieldEnd()
        if self.nickname is not None:
            oprot.writeFieldBegin('nickname', TType.STRING, 5)
            oprot.writeString(self.nickname.encode('utf-8') if sys.version_info[0] == 2 else self.nickname)
            oprot.writeFieldEnd()
        if self.vipLevel is not None:
            oprot.writeFieldBegin('vipLevel', TType.I32, 6)
            oprot.writeI32(self.vipLevel)
            oprot.writeFieldEnd()
        if self.guildEmblemId is not None:
            oprot.writeFieldBegin('guildEmblemId', TType.STRING, 10)
            oprot.writeString(self.guildEmblemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildEmblemId)
            oprot.writeFieldEnd()
        if self.guildFrameId is not None:
            oprot.writeFieldBegin('guildFrameId', TType.STRING, 11)
            oprot.writeString(self.guildFrameId.encode('utf-8') if sys.version_info[0] == 2 else self.guildFrameId)
            oprot.writeFieldEnd()
        if self.guildName is not None:
            oprot.writeFieldBegin('guildName', TType.STRING, 12)
            oprot.writeString(self.guildName.encode('utf-8') if sys.version_info[0] == 2 else self.guildName)
            oprot.writeFieldEnd()
        if self.userFrameId is not None:
            oprot.writeFieldBegin('userFrameId', TType.STRING, 13)
            oprot.writeString(self.userFrameId.encode('utf-8') if sys.version_info[0] == 2 else self.userFrameId)
            oprot.writeFieldEnd()
        if self.userIconId is not None:
            oprot.writeFieldBegin('userIconId', TType.STRING, 14)
            oprot.writeString(self.userIconId.encode('utf-8') if sys.version_info[0] == 2 else self.userIconId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.rank is None:
            raise TProtocolException(message='Required field rank is unset!')
        if self.lastActivity is None:
            raise TProtocolException(message='Required field lastActivity is unset!')
        if self.mostRecentDeviceName is None:
            raise TProtocolException(message='Required field mostRecentDeviceName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildLevel(object):
    """
    Attributes:
     - guildLevelId
     - display

    """


    def __init__(self, guildLevelId=None, display=None,):
        self.guildLevelId = guildLevelId
        self.display = display

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.guildLevelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildLevel')
        if self.guildLevelId is not None:
            oprot.writeFieldBegin('guildLevelId', TType.I32, 1)
            oprot.writeI32(self.guildLevelId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildLevelId is None:
            raise TProtocolException(message='Required field guildLevelId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildJoinType(object):
    """
    Attributes:
     - guildJoinTypeId
     - display
     - joinButtonText

    """


    def __init__(self, guildJoinTypeId=None, display=None, joinButtonText=None,):
        self.guildJoinTypeId = guildJoinTypeId
        self.display = display
        self.joinButtonText = joinButtonText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.guildJoinTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.joinButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildJoinType')
        if self.guildJoinTypeId is not None:
            oprot.writeFieldBegin('guildJoinTypeId', TType.I32, 1)
            oprot.writeI32(self.guildJoinTypeId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 10)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.joinButtonText is not None:
            oprot.writeFieldBegin('joinButtonText', TType.STRING, 11)
            oprot.writeString(self.joinButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.joinButtonText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildMemberType(object):
    """
    Attributes:
     - guildMemberTypeId
     - display
     - maxMembers
     - guildMemberListSectionId

    """


    def __init__(self, guildMemberTypeId=None, display=None, maxMembers=None, guildMemberListSectionId=None,):
        self.guildMemberTypeId = guildMemberTypeId
        self.display = display
        self.maxMembers = maxMembers
        self.guildMemberListSectionId = guildMemberListSectionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.guildMemberTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.maxMembers = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.guildMemberListSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildMemberType')
        if self.guildMemberTypeId is not None:
            oprot.writeFieldBegin('guildMemberTypeId', TType.I32, 1)
            oprot.writeI32(self.guildMemberTypeId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 10)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.maxMembers is not None:
            oprot.writeFieldBegin('maxMembers', TType.I32, 11)
            oprot.writeI32(self.maxMembers)
            oprot.writeFieldEnd()
        if self.guildMemberListSectionId is not None:
            oprot.writeFieldBegin('guildMemberListSectionId', TType.STRING, 12)
            oprot.writeString(self.guildMemberListSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildMemberListSectionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildMemberTypeId is None:
            raise TProtocolException(message='Required field guildMemberTypeId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerErrorDialogTemplate(object):
    """
    Attributes:
     - serverErrorDialogTemplateId
     - prefab

    """


    def __init__(self, serverErrorDialogTemplateId=None, prefab=None,):
        self.serverErrorDialogTemplateId = serverErrorDialogTemplateId
        self.prefab = prefab

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverErrorDialogTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerErrorDialogTemplate')
        if self.serverErrorDialogTemplateId is not None:
            oprot.writeFieldBegin('serverErrorDialogTemplateId', TType.STRING, 1)
            oprot.writeString(self.serverErrorDialogTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.serverErrorDialogTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.serverErrorDialogTemplateId is None:
            raise TProtocolException(message='Required field serverErrorDialogTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GenericDialogTemplate(object):
    """
    Attributes:
     - genericDialogTemplateId
     - prefab

    """


    def __init__(self, genericDialogTemplateId=None, prefab=None,):
        self.genericDialogTemplateId = genericDialogTemplateId
        self.prefab = prefab

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.genericDialogTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenericDialogTemplate')
        if self.genericDialogTemplateId is not None:
            oprot.writeFieldBegin('genericDialogTemplateId', TType.STRING, 1)
            oprot.writeString(self.genericDialogTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.genericDialogTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.genericDialogTemplateId is None:
            raise TProtocolException(message='Required field genericDialogTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GenericDialog(object):
    """
    Attributes:
     - genericDialogId
     - genericDialogTemplateId
     - title
     - body
     - okayButtonText
     - okayButtonImage
     - backgroundImage
     - featureImage
     - secondButtonText
     - secondButtonImage
     - secondFeatureImage
     - firstButtonTutorialId
     - secondButtonTutorialId
     - openSoundId

    """


    def __init__(self, genericDialogId=None, genericDialogTemplateId=None, title=None, body=None, okayButtonText=None, okayButtonImage=None, backgroundImage=None, featureImage=None, secondButtonText=None, secondButtonImage=None, secondFeatureImage=None, firstButtonTutorialId=None, secondButtonTutorialId=None, openSoundId=None,):
        self.genericDialogId = genericDialogId
        self.genericDialogTemplateId = genericDialogTemplateId
        self.title = title
        self.body = body
        self.okayButtonText = okayButtonText
        self.okayButtonImage = okayButtonImage
        self.backgroundImage = backgroundImage
        self.featureImage = featureImage
        self.secondButtonText = secondButtonText
        self.secondButtonImage = secondButtonImage
        self.secondFeatureImage = secondFeatureImage
        self.firstButtonTutorialId = firstButtonTutorialId
        self.secondButtonTutorialId = secondButtonTutorialId
        self.openSoundId = openSoundId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.genericDialogId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.genericDialogTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.okayButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.okayButtonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.featureImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.secondButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.secondButtonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.secondFeatureImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.firstButtonTutorialId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.secondButtonTutorialId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.openSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenericDialog')
        if self.genericDialogId is not None:
            oprot.writeFieldBegin('genericDialogId', TType.STRING, 1)
            oprot.writeString(self.genericDialogId.encode('utf-8') if sys.version_info[0] == 2 else self.genericDialogId)
            oprot.writeFieldEnd()
        if self.genericDialogTemplateId is not None:
            oprot.writeFieldBegin('genericDialogTemplateId', TType.STRING, 2)
            oprot.writeString(self.genericDialogTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.genericDialogTemplateId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 4)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.okayButtonText is not None:
            oprot.writeFieldBegin('okayButtonText', TType.STRING, 5)
            oprot.writeString(self.okayButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.okayButtonText)
            oprot.writeFieldEnd()
        if self.okayButtonImage is not None:
            oprot.writeFieldBegin('okayButtonImage', TType.STRING, 6)
            oprot.writeString(self.okayButtonImage.encode('utf-8') if sys.version_info[0] == 2 else self.okayButtonImage)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 7)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.featureImage is not None:
            oprot.writeFieldBegin('featureImage', TType.STRING, 8)
            oprot.writeString(self.featureImage.encode('utf-8') if sys.version_info[0] == 2 else self.featureImage)
            oprot.writeFieldEnd()
        if self.secondButtonText is not None:
            oprot.writeFieldBegin('secondButtonText', TType.STRING, 9)
            oprot.writeString(self.secondButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.secondButtonText)
            oprot.writeFieldEnd()
        if self.secondButtonImage is not None:
            oprot.writeFieldBegin('secondButtonImage', TType.STRING, 10)
            oprot.writeString(self.secondButtonImage.encode('utf-8') if sys.version_info[0] == 2 else self.secondButtonImage)
            oprot.writeFieldEnd()
        if self.secondFeatureImage is not None:
            oprot.writeFieldBegin('secondFeatureImage', TType.STRING, 11)
            oprot.writeString(self.secondFeatureImage.encode('utf-8') if sys.version_info[0] == 2 else self.secondFeatureImage)
            oprot.writeFieldEnd()
        if self.firstButtonTutorialId is not None:
            oprot.writeFieldBegin('firstButtonTutorialId', TType.STRING, 12)
            oprot.writeString(self.firstButtonTutorialId.encode('utf-8') if sys.version_info[0] == 2 else self.firstButtonTutorialId)
            oprot.writeFieldEnd()
        if self.secondButtonTutorialId is not None:
            oprot.writeFieldBegin('secondButtonTutorialId', TType.STRING, 13)
            oprot.writeString(self.secondButtonTutorialId.encode('utf-8') if sys.version_info[0] == 2 else self.secondButtonTutorialId)
            oprot.writeFieldEnd()
        if self.openSoundId is not None:
            oprot.writeFieldBegin('openSoundId', TType.STRING, 14)
            oprot.writeString(self.openSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.openSoundId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.genericDialogId is None:
            raise TProtocolException(message='Required field genericDialogId is unset!')
        if self.genericDialogTemplateId is None:
            raise TProtocolException(message='Required field genericDialogTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerErrorMessage(object):
    """
    Attributes:
     - serverErrorMessageId
     - serverErrorDialogTemplateId
     - title
     - body
     - button1Text
     - button2Text

    """


    def __init__(self, serverErrorMessageId=None, serverErrorDialogTemplateId=None, title=None, body=None, button1Text=None, button2Text=None,):
        self.serverErrorMessageId = serverErrorMessageId
        self.serverErrorDialogTemplateId = serverErrorDialogTemplateId
        self.title = title
        self.body = body
        self.button1Text = button1Text
        self.button2Text = button2Text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.serverErrorMessageId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serverErrorDialogTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.button1Text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.button2Text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerErrorMessage')
        if self.serverErrorMessageId is not None:
            oprot.writeFieldBegin('serverErrorMessageId', TType.I32, 1)
            oprot.writeI32(self.serverErrorMessageId)
            oprot.writeFieldEnd()
        if self.serverErrorDialogTemplateId is not None:
            oprot.writeFieldBegin('serverErrorDialogTemplateId', TType.STRING, 2)
            oprot.writeString(self.serverErrorDialogTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.serverErrorDialogTemplateId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 10)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 11)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.button1Text is not None:
            oprot.writeFieldBegin('button1Text', TType.STRING, 20)
            oprot.writeString(self.button1Text.encode('utf-8') if sys.version_info[0] == 2 else self.button1Text)
            oprot.writeFieldEnd()
        if self.button2Text is not None:
            oprot.writeFieldBegin('button2Text', TType.STRING, 21)
            oprot.writeString(self.button2Text.encode('utf-8') if sys.version_info[0] == 2 else self.button2Text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.serverErrorMessageId is None:
            raise TProtocolException(message='Required field serverErrorMessageId is unset!')
        if self.serverErrorDialogTemplateId is None:
            raise TProtocolException(message='Required field serverErrorDialogTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HudProfile(object):
    """
    Attributes:
     - hudProfileId
     - hudTypeId
     - showUser
     - currencyIds
     - showInventory

    """


    def __init__(self, hudProfileId=None, hudTypeId=None, showUser=None, currencyIds=None, showInventory=None,):
        self.hudProfileId = hudProfileId
        self.hudTypeId = hudTypeId
        self.showUser = showUser
        self.currencyIds = currencyIds
        self.showInventory = showInventory

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hudProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hudTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.showUser = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.currencyIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.currencyIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.showInventory = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HudProfile')
        if self.hudProfileId is not None:
            oprot.writeFieldBegin('hudProfileId', TType.STRING, 1)
            oprot.writeString(self.hudProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.hudProfileId)
            oprot.writeFieldEnd()
        if self.hudTypeId is not None:
            oprot.writeFieldBegin('hudTypeId', TType.I32, 2)
            oprot.writeI32(self.hudTypeId)
            oprot.writeFieldEnd()
        if self.showUser is not None:
            oprot.writeFieldBegin('showUser', TType.BOOL, 3)
            oprot.writeBool(self.showUser)
            oprot.writeFieldEnd()
        if self.currencyIds is not None:
            oprot.writeFieldBegin('currencyIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.currencyIds))
            for iter6 in self.currencyIds:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.showInventory is not None:
            oprot.writeFieldBegin('showInventory', TType.BOOL, 5)
            oprot.writeBool(self.showInventory)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.hudProfileId is None:
            raise TProtocolException(message='Required field hudProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class League(object):
    """
    Attributes:
     - leagueId
     - guildPoints
     - display
     - displaySingular

    """


    def __init__(self, leagueId=None, guildPoints=None, display=None, displaySingular=None,):
        self.leagueId = leagueId
        self.guildPoints = guildPoints
        self.display = display
        self.displaySingular = displaySingular

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.leagueId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.guildPoints = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.displaySingular = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('League')
        if self.leagueId is not None:
            oprot.writeFieldBegin('leagueId', TType.I32, 1)
            oprot.writeI32(self.leagueId)
            oprot.writeFieldEnd()
        if self.guildPoints is not None:
            oprot.writeFieldBegin('guildPoints', TType.I64, 2)
            oprot.writeI64(self.guildPoints)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 10)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.displaySingular is not None:
            oprot.writeFieldBegin('displaySingular', TType.STRING, 11)
            oprot.writeString(self.displaySingular.encode('utf-8') if sys.version_info[0] == 2 else self.displaySingular)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.leagueId is None:
            raise TProtocolException(message='Required field leagueId is unset!')
        if self.guildPoints is None:
            raise TProtocolException(message='Required field guildPoints is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.displaySingular is None:
            raise TProtocolException(message='Required field displaySingular is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildEmblem(object):
    """
    Attributes:
     - guildEmblemId
     - displayOrder
     - image
     - minLeagueId
     - hidden

    """


    def __init__(self, guildEmblemId=None, displayOrder=None, image=None, minLeagueId=None, hidden=None,):
        self.guildEmblemId = guildEmblemId
        self.displayOrder = displayOrder
        self.image = image
        self.minLeagueId = minLeagueId
        self.hidden = hidden

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildEmblemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.minLeagueId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildEmblem')
        if self.guildEmblemId is not None:
            oprot.writeFieldBegin('guildEmblemId', TType.STRING, 1)
            oprot.writeString(self.guildEmblemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildEmblemId)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 2)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 10)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        if self.minLeagueId is not None:
            oprot.writeFieldBegin('minLeagueId', TType.I32, 12)
            oprot.writeI32(self.minLeagueId)
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 13)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildEmblemId is None:
            raise TProtocolException(message='Required field guildEmblemId is unset!')
        if self.image is None:
            raise TProtocolException(message='Required field image is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildFrame(object):
    """
    Attributes:
     - guildFrameId
     - displayOrder
     - image
     - minGuild
     - minLeagueId
     - hidden

    """


    def __init__(self, guildFrameId=None, displayOrder=None, image=None, minGuild=None, minLeagueId=None, hidden=None,):
        self.guildFrameId = guildFrameId
        self.displayOrder = displayOrder
        self.image = image
        self.minGuild = minGuild
        self.minLeagueId = minLeagueId
        self.hidden = hidden

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildFrameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.minGuild = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.minLeagueId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildFrame')
        if self.guildFrameId is not None:
            oprot.writeFieldBegin('guildFrameId', TType.STRING, 1)
            oprot.writeString(self.guildFrameId.encode('utf-8') if sys.version_info[0] == 2 else self.guildFrameId)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 2)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 10)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        if self.minGuild is not None:
            oprot.writeFieldBegin('minGuild', TType.I32, 11)
            oprot.writeI32(self.minGuild)
            oprot.writeFieldEnd()
        if self.minLeagueId is not None:
            oprot.writeFieldBegin('minLeagueId', TType.I32, 12)
            oprot.writeI32(self.minLeagueId)
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 13)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildFrameId is None:
            raise TProtocolException(message='Required field guildFrameId is unset!')
        if self.image is None:
            raise TProtocolException(message='Required field image is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserIcon(object):
    """
    Attributes:
     - userIconId
     - displayOrder
     - hidden
     - image

    """


    def __init__(self, userIconId=None, displayOrder=None, hidden=None, image=None,):
        self.userIconId = userIconId
        self.displayOrder = displayOrder
        self.hidden = hidden
        self.image = image

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userIconId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserIcon')
        if self.userIconId is not None:
            oprot.writeFieldBegin('userIconId', TType.STRING, 1)
            oprot.writeString(self.userIconId.encode('utf-8') if sys.version_info[0] == 2 else self.userIconId)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 2)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 3)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 10)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userIconId is None:
            raise TProtocolException(message='Required field userIconId is unset!')
        if self.image is None:
            raise TProtocolException(message='Required field image is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserFrame(object):
    """
    Attributes:
     - userFrameId
     - displayOrder
     - hidden
     - rankBackgroundImage
     - image

    """


    def __init__(self, userFrameId=None, displayOrder=None, hidden=None, rankBackgroundImage=None, image=None,):
        self.userFrameId = userFrameId
        self.displayOrder = displayOrder
        self.hidden = hidden
        self.rankBackgroundImage = rankBackgroundImage
        self.image = image

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userFrameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.hidden = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rankBackgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserFrame')
        if self.userFrameId is not None:
            oprot.writeFieldBegin('userFrameId', TType.STRING, 1)
            oprot.writeString(self.userFrameId.encode('utf-8') if sys.version_info[0] == 2 else self.userFrameId)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 2)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.hidden is not None:
            oprot.writeFieldBegin('hidden', TType.BOOL, 3)
            oprot.writeBool(self.hidden)
            oprot.writeFieldEnd()
        if self.rankBackgroundImage is not None:
            oprot.writeFieldBegin('rankBackgroundImage', TType.STRING, 4)
            oprot.writeString(self.rankBackgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.rankBackgroundImage)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 10)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userFrameId is None:
            raise TProtocolException(message='Required field userFrameId is unset!')
        if self.image is None:
            raise TProtocolException(message='Required field image is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildSettings(object):
    """
    Attributes:
     - maxMemberCount
     - unlockRank
     - createRank
     - maxDisplayLength
     - maxDisplayTagLength
     - maxDescriptionLength
     - minDisplayLength
     - minDisplayTagLength
     - minDescriptionLength
     - defaultLocationId
     - defaultGuildEmblemId
     - defaultEmblemId
     - defaultFrameId
     - noGuildEmblemId
     - noGuildFrameId
     - joinInvitationDefault
     - joinApplicationDefault
     - applicantAcceptedMessageTitle
     - applicantRejectedMessageTitle
     - cannotSendGuildInvitesText
     - cannotJoinFullGuildText
     - guildDisplayAndTagTakenText
     - guildNameTakenText
     - guildTagTakenText
     - guildDeletedText
     - guildErrorText
     - guildSuggestSectionId
     - guildSearchSectionId
     - guildMemberSectionId
     - guildLeaderSectionId
     - guildCoLeaderSectionId
     - guildBossSectionId
     - guildManagerSectionId
     - guildEmblemSectionId
     - guildRuleSectionId
     - guildKickMessageText

    """


    def __init__(self, maxMemberCount=None, unlockRank=None, createRank=None, maxDisplayLength=None, maxDisplayTagLength=None, maxDescriptionLength=None, minDisplayLength=None, minDisplayTagLength=None, minDescriptionLength=None, defaultLocationId=None, defaultGuildEmblemId=None, defaultEmblemId=None, defaultFrameId=None, noGuildEmblemId=None, noGuildFrameId=None, joinInvitationDefault=None, joinApplicationDefault=None, applicantAcceptedMessageTitle=None, applicantRejectedMessageTitle=None, cannotSendGuildInvitesText=None, cannotJoinFullGuildText=None, guildDisplayAndTagTakenText=None, guildNameTakenText=None, guildTagTakenText=None, guildDeletedText=None, guildErrorText=None, guildSuggestSectionId=None, guildSearchSectionId=None, guildMemberSectionId=None, guildLeaderSectionId=None, guildCoLeaderSectionId=None, guildBossSectionId=None, guildManagerSectionId=None, guildEmblemSectionId=None, guildRuleSectionId=None, guildKickMessageText=None,):
        self.maxMemberCount = maxMemberCount
        self.unlockRank = unlockRank
        self.createRank = createRank
        self.maxDisplayLength = maxDisplayLength
        self.maxDisplayTagLength = maxDisplayTagLength
        self.maxDescriptionLength = maxDescriptionLength
        self.minDisplayLength = minDisplayLength
        self.minDisplayTagLength = minDisplayTagLength
        self.minDescriptionLength = minDescriptionLength
        self.defaultLocationId = defaultLocationId
        self.defaultGuildEmblemId = defaultGuildEmblemId
        self.defaultEmblemId = defaultEmblemId
        self.defaultFrameId = defaultFrameId
        self.noGuildEmblemId = noGuildEmblemId
        self.noGuildFrameId = noGuildFrameId
        self.joinInvitationDefault = joinInvitationDefault
        self.joinApplicationDefault = joinApplicationDefault
        self.applicantAcceptedMessageTitle = applicantAcceptedMessageTitle
        self.applicantRejectedMessageTitle = applicantRejectedMessageTitle
        self.cannotSendGuildInvitesText = cannotSendGuildInvitesText
        self.cannotJoinFullGuildText = cannotJoinFullGuildText
        self.guildDisplayAndTagTakenText = guildDisplayAndTagTakenText
        self.guildNameTakenText = guildNameTakenText
        self.guildTagTakenText = guildTagTakenText
        self.guildDeletedText = guildDeletedText
        self.guildErrorText = guildErrorText
        self.guildSuggestSectionId = guildSuggestSectionId
        self.guildSearchSectionId = guildSearchSectionId
        self.guildMemberSectionId = guildMemberSectionId
        self.guildLeaderSectionId = guildLeaderSectionId
        self.guildCoLeaderSectionId = guildCoLeaderSectionId
        self.guildBossSectionId = guildBossSectionId
        self.guildManagerSectionId = guildManagerSectionId
        self.guildEmblemSectionId = guildEmblemSectionId
        self.guildRuleSectionId = guildRuleSectionId
        self.guildKickMessageText = guildKickMessageText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.maxMemberCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.unlockRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.createRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.maxDisplayLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.maxDisplayTagLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.maxDescriptionLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.minDisplayLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.minDisplayTagLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.minDescriptionLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.defaultLocationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.defaultGuildEmblemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.defaultEmblemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.defaultFrameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.noGuildEmblemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.noGuildFrameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.joinInvitationDefault = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.joinApplicationDefault = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.applicantAcceptedMessageTitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.applicantRejectedMessageTitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRING:
                    self.cannotSendGuildInvitesText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.STRING:
                    self.cannotJoinFullGuildText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRING:
                    self.guildDisplayAndTagTakenText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRING:
                    self.guildNameTakenText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.STRING:
                    self.guildTagTakenText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRING:
                    self.guildDeletedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.guildErrorText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.guildSuggestSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRING:
                    self.guildSearchSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRING:
                    self.guildMemberSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.STRING:
                    self.guildLeaderSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.STRING:
                    self.guildCoLeaderSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.STRING:
                    self.guildBossSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.STRING:
                    self.guildManagerSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.STRING:
                    self.guildEmblemSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.STRING:
                    self.guildRuleSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.STRING:
                    self.guildKickMessageText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildSettings')
        if self.maxMemberCount is not None:
            oprot.writeFieldBegin('maxMemberCount', TType.I32, 1)
            oprot.writeI32(self.maxMemberCount)
            oprot.writeFieldEnd()
        if self.unlockRank is not None:
            oprot.writeFieldBegin('unlockRank', TType.I32, 2)
            oprot.writeI32(self.unlockRank)
            oprot.writeFieldEnd()
        if self.createRank is not None:
            oprot.writeFieldBegin('createRank', TType.I32, 3)
            oprot.writeI32(self.createRank)
            oprot.writeFieldEnd()
        if self.maxDisplayLength is not None:
            oprot.writeFieldBegin('maxDisplayLength', TType.I32, 10)
            oprot.writeI32(self.maxDisplayLength)
            oprot.writeFieldEnd()
        if self.maxDisplayTagLength is not None:
            oprot.writeFieldBegin('maxDisplayTagLength', TType.I32, 11)
            oprot.writeI32(self.maxDisplayTagLength)
            oprot.writeFieldEnd()
        if self.maxDescriptionLength is not None:
            oprot.writeFieldBegin('maxDescriptionLength', TType.I32, 12)
            oprot.writeI32(self.maxDescriptionLength)
            oprot.writeFieldEnd()
        if self.minDisplayLength is not None:
            oprot.writeFieldBegin('minDisplayLength', TType.I32, 13)
            oprot.writeI32(self.minDisplayLength)
            oprot.writeFieldEnd()
        if self.minDisplayTagLength is not None:
            oprot.writeFieldBegin('minDisplayTagLength', TType.I32, 14)
            oprot.writeI32(self.minDisplayTagLength)
            oprot.writeFieldEnd()
        if self.minDescriptionLength is not None:
            oprot.writeFieldBegin('minDescriptionLength', TType.I32, 15)
            oprot.writeI32(self.minDescriptionLength)
            oprot.writeFieldEnd()
        if self.defaultLocationId is not None:
            oprot.writeFieldBegin('defaultLocationId', TType.STRING, 20)
            oprot.writeString(self.defaultLocationId.encode('utf-8') if sys.version_info[0] == 2 else self.defaultLocationId)
            oprot.writeFieldEnd()
        if self.defaultGuildEmblemId is not None:
            oprot.writeFieldBegin('defaultGuildEmblemId', TType.STRING, 21)
            oprot.writeString(self.defaultGuildEmblemId.encode('utf-8') if sys.version_info[0] == 2 else self.defaultGuildEmblemId)
            oprot.writeFieldEnd()
        if self.noGuildEmblemId is not None:
            oprot.writeFieldBegin('noGuildEmblemId', TType.STRING, 30)
            oprot.writeString(self.noGuildEmblemId.encode('utf-8') if sys.version_info[0] == 2 else self.noGuildEmblemId)
            oprot.writeFieldEnd()
        if self.noGuildFrameId is not None:
            oprot.writeFieldBegin('noGuildFrameId', TType.STRING, 31)
            oprot.writeString(self.noGuildFrameId.encode('utf-8') if sys.version_info[0] == 2 else self.noGuildFrameId)
            oprot.writeFieldEnd()
        if self.defaultEmblemId is not None:
            oprot.writeFieldBegin('defaultEmblemId', TType.STRING, 32)
            oprot.writeString(self.defaultEmblemId.encode('utf-8') if sys.version_info[0] == 2 else self.defaultEmblemId)
            oprot.writeFieldEnd()
        if self.defaultFrameId is not None:
            oprot.writeFieldBegin('defaultFrameId', TType.STRING, 33)
            oprot.writeString(self.defaultFrameId.encode('utf-8') if sys.version_info[0] == 2 else self.defaultFrameId)
            oprot.writeFieldEnd()
        if self.joinInvitationDefault is not None:
            oprot.writeFieldBegin('joinInvitationDefault', TType.STRING, 40)
            oprot.writeString(self.joinInvitationDefault.encode('utf-8') if sys.version_info[0] == 2 else self.joinInvitationDefault)
            oprot.writeFieldEnd()
        if self.joinApplicationDefault is not None:
            oprot.writeFieldBegin('joinApplicationDefault', TType.STRING, 41)
            oprot.writeString(self.joinApplicationDefault.encode('utf-8') if sys.version_info[0] == 2 else self.joinApplicationDefault)
            oprot.writeFieldEnd()
        if self.applicantAcceptedMessageTitle is not None:
            oprot.writeFieldBegin('applicantAcceptedMessageTitle', TType.STRING, 42)
            oprot.writeString(self.applicantAcceptedMessageTitle.encode('utf-8') if sys.version_info[0] == 2 else self.applicantAcceptedMessageTitle)
            oprot.writeFieldEnd()
        if self.applicantRejectedMessageTitle is not None:
            oprot.writeFieldBegin('applicantRejectedMessageTitle', TType.STRING, 43)
            oprot.writeString(self.applicantRejectedMessageTitle.encode('utf-8') if sys.version_info[0] == 2 else self.applicantRejectedMessageTitle)
            oprot.writeFieldEnd()
        if self.cannotSendGuildInvitesText is not None:
            oprot.writeFieldBegin('cannotSendGuildInvitesText', TType.STRING, 44)
            oprot.writeString(self.cannotSendGuildInvitesText.encode('utf-8') if sys.version_info[0] == 2 else self.cannotSendGuildInvitesText)
            oprot.writeFieldEnd()
        if self.cannotJoinFullGuildText is not None:
            oprot.writeFieldBegin('cannotJoinFullGuildText', TType.STRING, 45)
            oprot.writeString(self.cannotJoinFullGuildText.encode('utf-8') if sys.version_info[0] == 2 else self.cannotJoinFullGuildText)
            oprot.writeFieldEnd()
        if self.guildDisplayAndTagTakenText is not None:
            oprot.writeFieldBegin('guildDisplayAndTagTakenText', TType.STRING, 46)
            oprot.writeString(self.guildDisplayAndTagTakenText.encode('utf-8') if sys.version_info[0] == 2 else self.guildDisplayAndTagTakenText)
            oprot.writeFieldEnd()
        if self.guildNameTakenText is not None:
            oprot.writeFieldBegin('guildNameTakenText', TType.STRING, 47)
            oprot.writeString(self.guildNameTakenText.encode('utf-8') if sys.version_info[0] == 2 else self.guildNameTakenText)
            oprot.writeFieldEnd()
        if self.guildTagTakenText is not None:
            oprot.writeFieldBegin('guildTagTakenText', TType.STRING, 48)
            oprot.writeString(self.guildTagTakenText.encode('utf-8') if sys.version_info[0] == 2 else self.guildTagTakenText)
            oprot.writeFieldEnd()
        if self.guildDeletedText is not None:
            oprot.writeFieldBegin('guildDeletedText', TType.STRING, 49)
            oprot.writeString(self.guildDeletedText.encode('utf-8') if sys.version_info[0] == 2 else self.guildDeletedText)
            oprot.writeFieldEnd()
        if self.guildErrorText is not None:
            oprot.writeFieldBegin('guildErrorText', TType.STRING, 50)
            oprot.writeString(self.guildErrorText.encode('utf-8') if sys.version_info[0] == 2 else self.guildErrorText)
            oprot.writeFieldEnd()
        if self.guildSuggestSectionId is not None:
            oprot.writeFieldBegin('guildSuggestSectionId', TType.STRING, 51)
            oprot.writeString(self.guildSuggestSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSuggestSectionId)
            oprot.writeFieldEnd()
        if self.guildSearchSectionId is not None:
            oprot.writeFieldBegin('guildSearchSectionId', TType.STRING, 52)
            oprot.writeString(self.guildSearchSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSearchSectionId)
            oprot.writeFieldEnd()
        if self.guildMemberSectionId is not None:
            oprot.writeFieldBegin('guildMemberSectionId', TType.STRING, 53)
            oprot.writeString(self.guildMemberSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildMemberSectionId)
            oprot.writeFieldEnd()
        if self.guildLeaderSectionId is not None:
            oprot.writeFieldBegin('guildLeaderSectionId', TType.STRING, 54)
            oprot.writeString(self.guildLeaderSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildLeaderSectionId)
            oprot.writeFieldEnd()
        if self.guildCoLeaderSectionId is not None:
            oprot.writeFieldBegin('guildCoLeaderSectionId', TType.STRING, 55)
            oprot.writeString(self.guildCoLeaderSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildCoLeaderSectionId)
            oprot.writeFieldEnd()
        if self.guildBossSectionId is not None:
            oprot.writeFieldBegin('guildBossSectionId', TType.STRING, 56)
            oprot.writeString(self.guildBossSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildBossSectionId)
            oprot.writeFieldEnd()
        if self.guildManagerSectionId is not None:
            oprot.writeFieldBegin('guildManagerSectionId', TType.STRING, 57)
            oprot.writeString(self.guildManagerSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildManagerSectionId)
            oprot.writeFieldEnd()
        if self.guildEmblemSectionId is not None:
            oprot.writeFieldBegin('guildEmblemSectionId', TType.STRING, 58)
            oprot.writeString(self.guildEmblemSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildEmblemSectionId)
            oprot.writeFieldEnd()
        if self.guildRuleSectionId is not None:
            oprot.writeFieldBegin('guildRuleSectionId', TType.STRING, 59)
            oprot.writeString(self.guildRuleSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildRuleSectionId)
            oprot.writeFieldEnd()
        if self.guildKickMessageText is not None:
            oprot.writeFieldBegin('guildKickMessageText', TType.STRING, 60)
            oprot.writeString(self.guildKickMessageText.encode('utf-8') if sys.version_info[0] == 2 else self.guildKickMessageText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Settings(object):
    """
    Attributes:
     - gameId
     - thriftNamespace
     - unusedNumber
     - testLocalConfig
     - chestGemsCostPerHour
     - dailyAchievementChestIds
     - badEnergyMeterFullParticleEffectPath
     - testListI32
     - testListDouble
     - testListEnum
     - screenDarkerOpacity
     - sectionShadowOpacity
     - sectionShadowDistanceX
     - sectionShadowDistanceY
     - popupShadowOpacity
     - popupShadowDistanceX
     - popupShadowDistanceY
     - requiredAppVersion
     - recommendedAppVersion
     - victoryMenuGearItemDelaySeconds
     - victoryMenuChestDelaySeconds
     - shopCardOfferBaseCostCommon
     - shopCardOfferBaseCostRare
     - shopCardOfferBaseCostEpic
     - xpTransferAffinitiesMatch
     - xpTransferAffinitiesNoMatch
     - maxFusionSelectedCard
     - shopCardOfferBaseCostUncommon
     - enableMinigameChestRewards
     - gemPassesTemplate
     - gemPassesSectionId
     - emptySectionTemplate
     - gearBorderImageReadyToEquipPath
     - gearBorderImageUnlockedPath
     - gearBorderImageCraftPath
     - tutorialArrowPrefabPath
     - selectedSkeletonScaleInOffer
     - gearBorderImageLockedPath
     - textFlyoffsVisibilityDuration
     - textFlyoffsFadeDuration
     - minigameTimeoutMinutes
     - heroSummonMainMenuButtonUnlockRankId
     - minigameHealthbarSeconds
     - minigameTimerMinRank
     - emptySectionTemplateInbox
     - emptySectionTemplateShop
     - emptySectionTemplateGuilds
     - autoWinCurrencyId
     - currentConfigCleanerNum
     - numSkillSlots
     - maxSkillLevel
     - energyGainHitOpponent
     - energyGainDamageOpponent
     - energyGainBumpTeammate
     - energyGainBumpedByTeammate
     - energyGainLoseHealth
     - energyGainKillOpponent
     - energyGainEnchantOpponent
     - energyGainEnchantTeammate
     - cardRevealFlyingDuration
     - cardRevealDelayDuration
     - unlockedStarterPackIconRank
     - unlockedAchievementButtonRank
     - unlockedRaidButtonRank
     - unlockedDailyQuestsButtonRank
     - cardBackImageDefault
     - cardBackImageHidden
     - cardBackImageCommon
     - cardBackImageRare
     - cardBackImageEpic
     - cardBackImageLegendary
     - minigameShowNextTurn
     - minigameShowShotFeedback
     - cellViewWhereToFindBgDisable
     - cellViewWhereToFindBgEnable
     - guildProfileInfoLoadingSectionTemplate
     - guildProfileInfoLeaveSectionTemplate
     - currencyDefaultCellViewPrefab
     - autoWinCurrencyCellViewPrefab
     - forcedUpdateUrlAndroid
     - forcedUpdateUrlIos
     - shopRibbonHeadingSectionTemplate
     - shopHeadingSectionTemplate
     - shopSingleItemSectionTemplate
     - shopMultipleItemSectionTemplate
     - minigameFloatingHealPrefab
     - minigameFloatingDamagePrefab
     - eventRibbonHeadingSectionTemplate
     - eventHeadingSectionTemplate
     - eventSingleItemSectionTemplate
     - eventMultipleItemSectionTemplate
     - emptySectionTemplateEvent

    """


    def __init__(self, gameId=None, thriftNamespace=None, unusedNumber=None, testLocalConfig=None, chestGemsCostPerHour=None, dailyAchievementChestIds=None, badEnergyMeterFullParticleEffectPath=None, testListI32=None, testListDouble=None, testListEnum=None, screenDarkerOpacity=None, sectionShadowOpacity=None, sectionShadowDistanceX=None, sectionShadowDistanceY=None, popupShadowOpacity=None, popupShadowDistanceX=None, popupShadowDistanceY=None, requiredAppVersion=None, recommendedAppVersion=None, victoryMenuGearItemDelaySeconds=None, victoryMenuChestDelaySeconds=None, shopCardOfferBaseCostCommon=None, shopCardOfferBaseCostRare=None, shopCardOfferBaseCostEpic=None, xpTransferAffinitiesMatch=None, xpTransferAffinitiesNoMatch=None, maxFusionSelectedCard=None, shopCardOfferBaseCostUncommon=None, enableMinigameChestRewards=None, gemPassesTemplate=None, gemPassesSectionId=None, emptySectionTemplate=None, gearBorderImageReadyToEquipPath=None, gearBorderImageUnlockedPath=None, gearBorderImageCraftPath=None, tutorialArrowPrefabPath=None, selectedSkeletonScaleInOffer=None, gearBorderImageLockedPath=None, textFlyoffsVisibilityDuration=None, textFlyoffsFadeDuration=None, minigameTimeoutMinutes=None, heroSummonMainMenuButtonUnlockRankId=None, minigameHealthbarSeconds=None, minigameTimerMinRank=None, emptySectionTemplateInbox=None, emptySectionTemplateShop=None, emptySectionTemplateGuilds=None, autoWinCurrencyId=None, currentConfigCleanerNum=None, numSkillSlots=None, maxSkillLevel=None, energyGainHitOpponent=None, energyGainDamageOpponent=None, energyGainBumpTeammate=None, energyGainBumpedByTeammate=None, energyGainLoseHealth=None, energyGainKillOpponent=None, energyGainEnchantOpponent=None, energyGainEnchantTeammate=None, cardRevealFlyingDuration=None, cardRevealDelayDuration=None, unlockedStarterPackIconRank=None, unlockedAchievementButtonRank=None, unlockedRaidButtonRank=None, unlockedDailyQuestsButtonRank=None, cardBackImageDefault=None, cardBackImageHidden=None, cardBackImageCommon=None, cardBackImageRare=None, cardBackImageEpic=None, cardBackImageLegendary=None, minigameShowNextTurn=None, minigameShowShotFeedback=None, cellViewWhereToFindBgDisable=None, cellViewWhereToFindBgEnable=None, guildProfileInfoLoadingSectionTemplate=None, guildProfileInfoLeaveSectionTemplate=None, currencyDefaultCellViewPrefab=None, autoWinCurrencyCellViewPrefab=None, forcedUpdateUrlAndroid=None, forcedUpdateUrlIos=None, shopRibbonHeadingSectionTemplate=None, shopHeadingSectionTemplate=None, shopSingleItemSectionTemplate=None, shopMultipleItemSectionTemplate=None, minigameFloatingHealPrefab=None, minigameFloatingDamagePrefab=None, eventRibbonHeadingSectionTemplate=None, eventHeadingSectionTemplate=None, eventSingleItemSectionTemplate=None, eventMultipleItemSectionTemplate=None, emptySectionTemplateEvent=None,):
        self.gameId = gameId
        self.thriftNamespace = thriftNamespace
        self.unusedNumber = unusedNumber
        self.testLocalConfig = testLocalConfig
        self.chestGemsCostPerHour = chestGemsCostPerHour
        self.dailyAchievementChestIds = dailyAchievementChestIds
        self.badEnergyMeterFullParticleEffectPath = badEnergyMeterFullParticleEffectPath
        self.testListI32 = testListI32
        self.testListDouble = testListDouble
        self.testListEnum = testListEnum
        self.screenDarkerOpacity = screenDarkerOpacity
        self.sectionShadowOpacity = sectionShadowOpacity
        self.sectionShadowDistanceX = sectionShadowDistanceX
        self.sectionShadowDistanceY = sectionShadowDistanceY
        self.popupShadowOpacity = popupShadowOpacity
        self.popupShadowDistanceX = popupShadowDistanceX
        self.popupShadowDistanceY = popupShadowDistanceY
        self.requiredAppVersion = requiredAppVersion
        self.recommendedAppVersion = recommendedAppVersion
        self.victoryMenuGearItemDelaySeconds = victoryMenuGearItemDelaySeconds
        self.victoryMenuChestDelaySeconds = victoryMenuChestDelaySeconds
        self.shopCardOfferBaseCostCommon = shopCardOfferBaseCostCommon
        self.shopCardOfferBaseCostRare = shopCardOfferBaseCostRare
        self.shopCardOfferBaseCostEpic = shopCardOfferBaseCostEpic
        self.xpTransferAffinitiesMatch = xpTransferAffinitiesMatch
        self.xpTransferAffinitiesNoMatch = xpTransferAffinitiesNoMatch
        self.maxFusionSelectedCard = maxFusionSelectedCard
        self.shopCardOfferBaseCostUncommon = shopCardOfferBaseCostUncommon
        self.enableMinigameChestRewards = enableMinigameChestRewards
        self.gemPassesTemplate = gemPassesTemplate
        self.gemPassesSectionId = gemPassesSectionId
        self.emptySectionTemplate = emptySectionTemplate
        self.gearBorderImageReadyToEquipPath = gearBorderImageReadyToEquipPath
        self.gearBorderImageUnlockedPath = gearBorderImageUnlockedPath
        self.gearBorderImageCraftPath = gearBorderImageCraftPath
        self.tutorialArrowPrefabPath = tutorialArrowPrefabPath
        self.selectedSkeletonScaleInOffer = selectedSkeletonScaleInOffer
        self.gearBorderImageLockedPath = gearBorderImageLockedPath
        self.textFlyoffsVisibilityDuration = textFlyoffsVisibilityDuration
        self.textFlyoffsFadeDuration = textFlyoffsFadeDuration
        self.minigameTimeoutMinutes = minigameTimeoutMinutes
        self.heroSummonMainMenuButtonUnlockRankId = heroSummonMainMenuButtonUnlockRankId
        self.minigameHealthbarSeconds = minigameHealthbarSeconds
        self.minigameTimerMinRank = minigameTimerMinRank
        self.emptySectionTemplateInbox = emptySectionTemplateInbox
        self.emptySectionTemplateShop = emptySectionTemplateShop
        self.emptySectionTemplateGuilds = emptySectionTemplateGuilds
        self.autoWinCurrencyId = autoWinCurrencyId
        self.currentConfigCleanerNum = currentConfigCleanerNum
        self.numSkillSlots = numSkillSlots
        self.maxSkillLevel = maxSkillLevel
        self.energyGainHitOpponent = energyGainHitOpponent
        self.energyGainDamageOpponent = energyGainDamageOpponent
        self.energyGainBumpTeammate = energyGainBumpTeammate
        self.energyGainBumpedByTeammate = energyGainBumpedByTeammate
        self.energyGainLoseHealth = energyGainLoseHealth
        self.energyGainKillOpponent = energyGainKillOpponent
        self.energyGainEnchantOpponent = energyGainEnchantOpponent
        self.energyGainEnchantTeammate = energyGainEnchantTeammate
        self.cardRevealFlyingDuration = cardRevealFlyingDuration
        self.cardRevealDelayDuration = cardRevealDelayDuration
        self.unlockedStarterPackIconRank = unlockedStarterPackIconRank
        self.unlockedAchievementButtonRank = unlockedAchievementButtonRank
        self.unlockedRaidButtonRank = unlockedRaidButtonRank
        self.unlockedDailyQuestsButtonRank = unlockedDailyQuestsButtonRank
        self.cardBackImageDefault = cardBackImageDefault
        self.cardBackImageHidden = cardBackImageHidden
        self.cardBackImageCommon = cardBackImageCommon
        self.cardBackImageRare = cardBackImageRare
        self.cardBackImageEpic = cardBackImageEpic
        self.cardBackImageLegendary = cardBackImageLegendary
        self.minigameShowNextTurn = minigameShowNextTurn
        self.minigameShowShotFeedback = minigameShowShotFeedback
        self.cellViewWhereToFindBgDisable = cellViewWhereToFindBgDisable
        self.cellViewWhereToFindBgEnable = cellViewWhereToFindBgEnable
        self.guildProfileInfoLoadingSectionTemplate = guildProfileInfoLoadingSectionTemplate
        self.guildProfileInfoLeaveSectionTemplate = guildProfileInfoLeaveSectionTemplate
        self.currencyDefaultCellViewPrefab = currencyDefaultCellViewPrefab
        self.autoWinCurrencyCellViewPrefab = autoWinCurrencyCellViewPrefab
        self.forcedUpdateUrlAndroid = forcedUpdateUrlAndroid
        self.forcedUpdateUrlIos = forcedUpdateUrlIos
        self.shopRibbonHeadingSectionTemplate = shopRibbonHeadingSectionTemplate
        self.shopHeadingSectionTemplate = shopHeadingSectionTemplate
        self.shopSingleItemSectionTemplate = shopSingleItemSectionTemplate
        self.shopMultipleItemSectionTemplate = shopMultipleItemSectionTemplate
        self.minigameFloatingHealPrefab = minigameFloatingHealPrefab
        self.minigameFloatingDamagePrefab = minigameFloatingDamagePrefab
        self.eventRibbonHeadingSectionTemplate = eventRibbonHeadingSectionTemplate
        self.eventHeadingSectionTemplate = eventHeadingSectionTemplate
        self.eventSingleItemSectionTemplate = eventSingleItemSectionTemplate
        self.eventMultipleItemSectionTemplate = eventMultipleItemSectionTemplate
        self.emptySectionTemplateEvent = emptySectionTemplateEvent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gameId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thriftNamespace = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unusedNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.testLocalConfig = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.chestGemsCostPerHour = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.dailyAchievementChestIds = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.dailyAchievementChestIds.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.badEnergyMeterFullParticleEffectPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.testListI32 = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readI32()
                        self.testListI32.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.testListDouble = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = iprot.readDouble()
                        self.testListDouble.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.testListEnum = []
                    (_etype28, _size25) = iprot.readListBegin()
                    for _i29 in range(_size25):
                        _elem30 = iprot.readI32()
                        self.testListEnum.append(_elem30)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.screenDarkerOpacity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.sectionShadowOpacity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.sectionShadowDistanceX = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.sectionShadowDistanceY = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.popupShadowOpacity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.popupShadowDistanceX = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.popupShadowDistanceY = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.requiredAppVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.recommendedAppVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.DOUBLE:
                    self.victoryMenuGearItemDelaySeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.victoryMenuChestDelaySeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.shopCardOfferBaseCostCommon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.shopCardOfferBaseCostRare = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.shopCardOfferBaseCostEpic = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.xpTransferAffinitiesMatch = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.xpTransferAffinitiesNoMatch = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.maxFusionSelectedCard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.shopCardOfferBaseCostUncommon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.enableMinigameChestRewards = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.gemPassesTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.gemPassesSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.emptySectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.gearBorderImageReadyToEquipPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.gearBorderImageUnlockedPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.gearBorderImageCraftPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.tutorialArrowPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.DOUBLE:
                    self.selectedSkeletonScaleInOffer = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.gearBorderImageLockedPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.DOUBLE:
                    self.textFlyoffsVisibilityDuration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.DOUBLE:
                    self.textFlyoffsFadeDuration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.DOUBLE:
                    self.minigameTimeoutMinutes = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.heroSummonMainMenuButtonUnlockRankId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.DOUBLE:
                    self.minigameHealthbarSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.I32:
                    self.minigameTimerMinRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRING:
                    self.emptySectionTemplateInbox = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.STRING:
                    self.emptySectionTemplateShop = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRING:
                    self.emptySectionTemplateGuilds = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.autoWinCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.I32:
                    self.currentConfigCleanerNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.I32:
                    self.numSkillSlots = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.I32:
                    self.maxSkillLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.DOUBLE:
                    self.energyGainHitOpponent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.DOUBLE:
                    self.energyGainDamageOpponent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.DOUBLE:
                    self.energyGainBumpTeammate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.DOUBLE:
                    self.energyGainBumpedByTeammate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.DOUBLE:
                    self.energyGainLoseHealth = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.DOUBLE:
                    self.energyGainKillOpponent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.DOUBLE:
                    self.energyGainEnchantOpponent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.DOUBLE:
                    self.energyGainEnchantTeammate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.DOUBLE:
                    self.cardRevealFlyingDuration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.DOUBLE:
                    self.cardRevealDelayDuration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.I32:
                    self.unlockedStarterPackIconRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.I32:
                    self.unlockedAchievementButtonRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.I32:
                    self.unlockedRaidButtonRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.I32:
                    self.unlockedDailyQuestsButtonRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.STRING:
                    self.cardBackImageDefault = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.STRING:
                    self.cardBackImageHidden = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.STRING:
                    self.cardBackImageCommon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.STRING:
                    self.cardBackImageRare = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.STRING:
                    self.cardBackImageEpic = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.STRING:
                    self.cardBackImageLegendary = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.BOOL:
                    self.minigameShowNextTurn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.BOOL:
                    self.minigameShowShotFeedback = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.STRING:
                    self.cellViewWhereToFindBgDisable = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.STRING:
                    self.cellViewWhereToFindBgEnable = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.STRING:
                    self.guildProfileInfoLoadingSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.STRING:
                    self.guildProfileInfoLeaveSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 84:
                if ftype == TType.STRING:
                    self.currencyDefaultCellViewPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.STRING:
                    self.autoWinCurrencyCellViewPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.STRING:
                    self.forcedUpdateUrlAndroid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.STRING:
                    self.forcedUpdateUrlIos = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.STRING:
                    self.shopRibbonHeadingSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.STRING:
                    self.shopHeadingSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.STRING:
                    self.shopSingleItemSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.STRING:
                    self.shopMultipleItemSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 94:
                if ftype == TType.STRING:
                    self.minigameFloatingHealPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.STRING:
                    self.minigameFloatingDamagePrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.STRING:
                    self.eventRibbonHeadingSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.STRING:
                    self.eventHeadingSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.STRING:
                    self.eventSingleItemSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.STRING:
                    self.eventMultipleItemSectionTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.STRING:
                    self.emptySectionTemplateEvent = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Settings')
        if self.gameId is not None:
            oprot.writeFieldBegin('gameId', TType.STRING, 1)
            oprot.writeString(self.gameId.encode('utf-8') if sys.version_info[0] == 2 else self.gameId)
            oprot.writeFieldEnd()
        if self.thriftNamespace is not None:
            oprot.writeFieldBegin('thriftNamespace', TType.STRING, 2)
            oprot.writeString(self.thriftNamespace.encode('utf-8') if sys.version_info[0] == 2 else self.thriftNamespace)
            oprot.writeFieldEnd()
        if self.unusedNumber is not None:
            oprot.writeFieldBegin('unusedNumber', TType.I32, 3)
            oprot.writeI32(self.unusedNumber)
            oprot.writeFieldEnd()
        if self.testLocalConfig is not None:
            oprot.writeFieldBegin('testLocalConfig', TType.I32, 4)
            oprot.writeI32(self.testLocalConfig)
            oprot.writeFieldEnd()
        if self.chestGemsCostPerHour is not None:
            oprot.writeFieldBegin('chestGemsCostPerHour', TType.DOUBLE, 5)
            oprot.writeDouble(self.chestGemsCostPerHour)
            oprot.writeFieldEnd()
        if self.dailyAchievementChestIds is not None:
            oprot.writeFieldBegin('dailyAchievementChestIds', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.dailyAchievementChestIds))
            for iter31 in self.dailyAchievementChestIds:
                oprot.writeString(iter31.encode('utf-8') if sys.version_info[0] == 2 else iter31)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.badEnergyMeterFullParticleEffectPath is not None:
            oprot.writeFieldBegin('badEnergyMeterFullParticleEffectPath', TType.STRING, 7)
            oprot.writeString(self.badEnergyMeterFullParticleEffectPath.encode('utf-8') if sys.version_info[0] == 2 else self.badEnergyMeterFullParticleEffectPath)
            oprot.writeFieldEnd()
        if self.testListI32 is not None:
            oprot.writeFieldBegin('testListI32', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.testListI32))
            for iter32 in self.testListI32:
                oprot.writeI32(iter32)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.testListDouble is not None:
            oprot.writeFieldBegin('testListDouble', TType.LIST, 9)
            oprot.writeListBegin(TType.DOUBLE, len(self.testListDouble))
            for iter33 in self.testListDouble:
                oprot.writeDouble(iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.testListEnum is not None:
            oprot.writeFieldBegin('testListEnum', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.testListEnum))
            for iter34 in self.testListEnum:
                oprot.writeI32(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.screenDarkerOpacity is not None:
            oprot.writeFieldBegin('screenDarkerOpacity', TType.I32, 11)
            oprot.writeI32(self.screenDarkerOpacity)
            oprot.writeFieldEnd()
        if self.sectionShadowOpacity is not None:
            oprot.writeFieldBegin('sectionShadowOpacity', TType.I32, 12)
            oprot.writeI32(self.sectionShadowOpacity)
            oprot.writeFieldEnd()
        if self.sectionShadowDistanceX is not None:
            oprot.writeFieldBegin('sectionShadowDistanceX', TType.I32, 13)
            oprot.writeI32(self.sectionShadowDistanceX)
            oprot.writeFieldEnd()
        if self.sectionShadowDistanceY is not None:
            oprot.writeFieldBegin('sectionShadowDistanceY', TType.I32, 14)
            oprot.writeI32(self.sectionShadowDistanceY)
            oprot.writeFieldEnd()
        if self.popupShadowOpacity is not None:
            oprot.writeFieldBegin('popupShadowOpacity', TType.I32, 15)
            oprot.writeI32(self.popupShadowOpacity)
            oprot.writeFieldEnd()
        if self.popupShadowDistanceX is not None:
            oprot.writeFieldBegin('popupShadowDistanceX', TType.I32, 16)
            oprot.writeI32(self.popupShadowDistanceX)
            oprot.writeFieldEnd()
        if self.popupShadowDistanceY is not None:
            oprot.writeFieldBegin('popupShadowDistanceY', TType.I32, 17)
            oprot.writeI32(self.popupShadowDistanceY)
            oprot.writeFieldEnd()
        if self.requiredAppVersion is not None:
            oprot.writeFieldBegin('requiredAppVersion', TType.STRING, 18)
            oprot.writeString(self.requiredAppVersion.encode('utf-8') if sys.version_info[0] == 2 else self.requiredAppVersion)
            oprot.writeFieldEnd()
        if self.recommendedAppVersion is not None:
            oprot.writeFieldBegin('recommendedAppVersion', TType.STRING, 19)
            oprot.writeString(self.recommendedAppVersion.encode('utf-8') if sys.version_info[0] == 2 else self.recommendedAppVersion)
            oprot.writeFieldEnd()
        if self.victoryMenuGearItemDelaySeconds is not None:
            oprot.writeFieldBegin('victoryMenuGearItemDelaySeconds', TType.DOUBLE, 20)
            oprot.writeDouble(self.victoryMenuGearItemDelaySeconds)
            oprot.writeFieldEnd()
        if self.victoryMenuChestDelaySeconds is not None:
            oprot.writeFieldBegin('victoryMenuChestDelaySeconds', TType.DOUBLE, 21)
            oprot.writeDouble(self.victoryMenuChestDelaySeconds)
            oprot.writeFieldEnd()
        if self.shopCardOfferBaseCostCommon is not None:
            oprot.writeFieldBegin('shopCardOfferBaseCostCommon', TType.I32, 22)
            oprot.writeI32(self.shopCardOfferBaseCostCommon)
            oprot.writeFieldEnd()
        if self.shopCardOfferBaseCostRare is not None:
            oprot.writeFieldBegin('shopCardOfferBaseCostRare', TType.I32, 23)
            oprot.writeI32(self.shopCardOfferBaseCostRare)
            oprot.writeFieldEnd()
        if self.shopCardOfferBaseCostEpic is not None:
            oprot.writeFieldBegin('shopCardOfferBaseCostEpic', TType.I32, 24)
            oprot.writeI32(self.shopCardOfferBaseCostEpic)
            oprot.writeFieldEnd()
        if self.xpTransferAffinitiesMatch is not None:
            oprot.writeFieldBegin('xpTransferAffinitiesMatch', TType.DOUBLE, 25)
            oprot.writeDouble(self.xpTransferAffinitiesMatch)
            oprot.writeFieldEnd()
        if self.xpTransferAffinitiesNoMatch is not None:
            oprot.writeFieldBegin('xpTransferAffinitiesNoMatch', TType.DOUBLE, 26)
            oprot.writeDouble(self.xpTransferAffinitiesNoMatch)
            oprot.writeFieldEnd()
        if self.maxFusionSelectedCard is not None:
            oprot.writeFieldBegin('maxFusionSelectedCard', TType.I32, 27)
            oprot.writeI32(self.maxFusionSelectedCard)
            oprot.writeFieldEnd()
        if self.shopCardOfferBaseCostUncommon is not None:
            oprot.writeFieldBegin('shopCardOfferBaseCostUncommon', TType.I32, 28)
            oprot.writeI32(self.shopCardOfferBaseCostUncommon)
            oprot.writeFieldEnd()
        if self.enableMinigameChestRewards is not None:
            oprot.writeFieldBegin('enableMinigameChestRewards', TType.BOOL, 30)
            oprot.writeBool(self.enableMinigameChestRewards)
            oprot.writeFieldEnd()
        if self.gemPassesTemplate is not None:
            oprot.writeFieldBegin('gemPassesTemplate', TType.STRING, 31)
            oprot.writeString(self.gemPassesTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.gemPassesTemplate)
            oprot.writeFieldEnd()
        if self.gemPassesSectionId is not None:
            oprot.writeFieldBegin('gemPassesSectionId', TType.STRING, 32)
            oprot.writeString(self.gemPassesSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.gemPassesSectionId)
            oprot.writeFieldEnd()
        if self.emptySectionTemplate is not None:
            oprot.writeFieldBegin('emptySectionTemplate', TType.STRING, 33)
            oprot.writeString(self.emptySectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.emptySectionTemplate)
            oprot.writeFieldEnd()
        if self.gearBorderImageReadyToEquipPath is not None:
            oprot.writeFieldBegin('gearBorderImageReadyToEquipPath', TType.STRING, 34)
            oprot.writeString(self.gearBorderImageReadyToEquipPath.encode('utf-8') if sys.version_info[0] == 2 else self.gearBorderImageReadyToEquipPath)
            oprot.writeFieldEnd()
        if self.gearBorderImageUnlockedPath is not None:
            oprot.writeFieldBegin('gearBorderImageUnlockedPath', TType.STRING, 35)
            oprot.writeString(self.gearBorderImageUnlockedPath.encode('utf-8') if sys.version_info[0] == 2 else self.gearBorderImageUnlockedPath)
            oprot.writeFieldEnd()
        if self.gearBorderImageCraftPath is not None:
            oprot.writeFieldBegin('gearBorderImageCraftPath', TType.STRING, 36)
            oprot.writeString(self.gearBorderImageCraftPath.encode('utf-8') if sys.version_info[0] == 2 else self.gearBorderImageCraftPath)
            oprot.writeFieldEnd()
        if self.tutorialArrowPrefabPath is not None:
            oprot.writeFieldBegin('tutorialArrowPrefabPath', TType.STRING, 38)
            oprot.writeString(self.tutorialArrowPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.tutorialArrowPrefabPath)
            oprot.writeFieldEnd()
        if self.selectedSkeletonScaleInOffer is not None:
            oprot.writeFieldBegin('selectedSkeletonScaleInOffer', TType.DOUBLE, 39)
            oprot.writeDouble(self.selectedSkeletonScaleInOffer)
            oprot.writeFieldEnd()
        if self.gearBorderImageLockedPath is not None:
            oprot.writeFieldBegin('gearBorderImageLockedPath', TType.STRING, 40)
            oprot.writeString(self.gearBorderImageLockedPath.encode('utf-8') if sys.version_info[0] == 2 else self.gearBorderImageLockedPath)
            oprot.writeFieldEnd()
        if self.textFlyoffsVisibilityDuration is not None:
            oprot.writeFieldBegin('textFlyoffsVisibilityDuration', TType.DOUBLE, 41)
            oprot.writeDouble(self.textFlyoffsVisibilityDuration)
            oprot.writeFieldEnd()
        if self.textFlyoffsFadeDuration is not None:
            oprot.writeFieldBegin('textFlyoffsFadeDuration', TType.DOUBLE, 42)
            oprot.writeDouble(self.textFlyoffsFadeDuration)
            oprot.writeFieldEnd()
        if self.minigameTimeoutMinutes is not None:
            oprot.writeFieldBegin('minigameTimeoutMinutes', TType.DOUBLE, 43)
            oprot.writeDouble(self.minigameTimeoutMinutes)
            oprot.writeFieldEnd()
        if self.heroSummonMainMenuButtonUnlockRankId is not None:
            oprot.writeFieldBegin('heroSummonMainMenuButtonUnlockRankId', TType.I32, 44)
            oprot.writeI32(self.heroSummonMainMenuButtonUnlockRankId)
            oprot.writeFieldEnd()
        if self.minigameHealthbarSeconds is not None:
            oprot.writeFieldBegin('minigameHealthbarSeconds', TType.DOUBLE, 45)
            oprot.writeDouble(self.minigameHealthbarSeconds)
            oprot.writeFieldEnd()
        if self.minigameTimerMinRank is not None:
            oprot.writeFieldBegin('minigameTimerMinRank', TType.I32, 46)
            oprot.writeI32(self.minigameTimerMinRank)
            oprot.writeFieldEnd()
        if self.emptySectionTemplateInbox is not None:
            oprot.writeFieldBegin('emptySectionTemplateInbox', TType.STRING, 47)
            oprot.writeString(self.emptySectionTemplateInbox.encode('utf-8') if sys.version_info[0] == 2 else self.emptySectionTemplateInbox)
            oprot.writeFieldEnd()
        if self.emptySectionTemplateShop is not None:
            oprot.writeFieldBegin('emptySectionTemplateShop', TType.STRING, 48)
            oprot.writeString(self.emptySectionTemplateShop.encode('utf-8') if sys.version_info[0] == 2 else self.emptySectionTemplateShop)
            oprot.writeFieldEnd()
        if self.emptySectionTemplateGuilds is not None:
            oprot.writeFieldBegin('emptySectionTemplateGuilds', TType.STRING, 49)
            oprot.writeString(self.emptySectionTemplateGuilds.encode('utf-8') if sys.version_info[0] == 2 else self.emptySectionTemplateGuilds)
            oprot.writeFieldEnd()
        if self.autoWinCurrencyId is not None:
            oprot.writeFieldBegin('autoWinCurrencyId', TType.STRING, 50)
            oprot.writeString(self.autoWinCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.autoWinCurrencyId)
            oprot.writeFieldEnd()
        if self.currentConfigCleanerNum is not None:
            oprot.writeFieldBegin('currentConfigCleanerNum', TType.I32, 51)
            oprot.writeI32(self.currentConfigCleanerNum)
            oprot.writeFieldEnd()
        if self.numSkillSlots is not None:
            oprot.writeFieldBegin('numSkillSlots', TType.I32, 52)
            oprot.writeI32(self.numSkillSlots)
            oprot.writeFieldEnd()
        if self.maxSkillLevel is not None:
            oprot.writeFieldBegin('maxSkillLevel', TType.I32, 53)
            oprot.writeI32(self.maxSkillLevel)
            oprot.writeFieldEnd()
        if self.energyGainHitOpponent is not None:
            oprot.writeFieldBegin('energyGainHitOpponent', TType.DOUBLE, 54)
            oprot.writeDouble(self.energyGainHitOpponent)
            oprot.writeFieldEnd()
        if self.energyGainDamageOpponent is not None:
            oprot.writeFieldBegin('energyGainDamageOpponent', TType.DOUBLE, 55)
            oprot.writeDouble(self.energyGainDamageOpponent)
            oprot.writeFieldEnd()
        if self.energyGainBumpTeammate is not None:
            oprot.writeFieldBegin('energyGainBumpTeammate', TType.DOUBLE, 56)
            oprot.writeDouble(self.energyGainBumpTeammate)
            oprot.writeFieldEnd()
        if self.energyGainBumpedByTeammate is not None:
            oprot.writeFieldBegin('energyGainBumpedByTeammate', TType.DOUBLE, 57)
            oprot.writeDouble(self.energyGainBumpedByTeammate)
            oprot.writeFieldEnd()
        if self.energyGainLoseHealth is not None:
            oprot.writeFieldBegin('energyGainLoseHealth', TType.DOUBLE, 58)
            oprot.writeDouble(self.energyGainLoseHealth)
            oprot.writeFieldEnd()
        if self.energyGainKillOpponent is not None:
            oprot.writeFieldBegin('energyGainKillOpponent', TType.DOUBLE, 59)
            oprot.writeDouble(self.energyGainKillOpponent)
            oprot.writeFieldEnd()
        if self.energyGainEnchantOpponent is not None:
            oprot.writeFieldBegin('energyGainEnchantOpponent', TType.DOUBLE, 60)
            oprot.writeDouble(self.energyGainEnchantOpponent)
            oprot.writeFieldEnd()
        if self.energyGainEnchantTeammate is not None:
            oprot.writeFieldBegin('energyGainEnchantTeammate', TType.DOUBLE, 61)
            oprot.writeDouble(self.energyGainEnchantTeammate)
            oprot.writeFieldEnd()
        if self.cardRevealFlyingDuration is not None:
            oprot.writeFieldBegin('cardRevealFlyingDuration', TType.DOUBLE, 62)
            oprot.writeDouble(self.cardRevealFlyingDuration)
            oprot.writeFieldEnd()
        if self.cardRevealDelayDuration is not None:
            oprot.writeFieldBegin('cardRevealDelayDuration', TType.DOUBLE, 63)
            oprot.writeDouble(self.cardRevealDelayDuration)
            oprot.writeFieldEnd()
        if self.unlockedStarterPackIconRank is not None:
            oprot.writeFieldBegin('unlockedStarterPackIconRank', TType.I32, 64)
            oprot.writeI32(self.unlockedStarterPackIconRank)
            oprot.writeFieldEnd()
        if self.unlockedAchievementButtonRank is not None:
            oprot.writeFieldBegin('unlockedAchievementButtonRank', TType.I32, 65)
            oprot.writeI32(self.unlockedAchievementButtonRank)
            oprot.writeFieldEnd()
        if self.unlockedRaidButtonRank is not None:
            oprot.writeFieldBegin('unlockedRaidButtonRank', TType.I32, 66)
            oprot.writeI32(self.unlockedRaidButtonRank)
            oprot.writeFieldEnd()
        if self.unlockedDailyQuestsButtonRank is not None:
            oprot.writeFieldBegin('unlockedDailyQuestsButtonRank', TType.I32, 67)
            oprot.writeI32(self.unlockedDailyQuestsButtonRank)
            oprot.writeFieldEnd()
        if self.cardBackImageDefault is not None:
            oprot.writeFieldBegin('cardBackImageDefault', TType.STRING, 70)
            oprot.writeString(self.cardBackImageDefault.encode('utf-8') if sys.version_info[0] == 2 else self.cardBackImageDefault)
            oprot.writeFieldEnd()
        if self.cardBackImageHidden is not None:
            oprot.writeFieldBegin('cardBackImageHidden', TType.STRING, 71)
            oprot.writeString(self.cardBackImageHidden.encode('utf-8') if sys.version_info[0] == 2 else self.cardBackImageHidden)
            oprot.writeFieldEnd()
        if self.cardBackImageCommon is not None:
            oprot.writeFieldBegin('cardBackImageCommon', TType.STRING, 72)
            oprot.writeString(self.cardBackImageCommon.encode('utf-8') if sys.version_info[0] == 2 else self.cardBackImageCommon)
            oprot.writeFieldEnd()
        if self.cardBackImageRare is not None:
            oprot.writeFieldBegin('cardBackImageRare', TType.STRING, 73)
            oprot.writeString(self.cardBackImageRare.encode('utf-8') if sys.version_info[0] == 2 else self.cardBackImageRare)
            oprot.writeFieldEnd()
        if self.cardBackImageEpic is not None:
            oprot.writeFieldBegin('cardBackImageEpic', TType.STRING, 74)
            oprot.writeString(self.cardBackImageEpic.encode('utf-8') if sys.version_info[0] == 2 else self.cardBackImageEpic)
            oprot.writeFieldEnd()
        if self.cardBackImageLegendary is not None:
            oprot.writeFieldBegin('cardBackImageLegendary', TType.STRING, 75)
            oprot.writeString(self.cardBackImageLegendary.encode('utf-8') if sys.version_info[0] == 2 else self.cardBackImageLegendary)
            oprot.writeFieldEnd()
        if self.minigameShowNextTurn is not None:
            oprot.writeFieldBegin('minigameShowNextTurn', TType.BOOL, 76)
            oprot.writeBool(self.minigameShowNextTurn)
            oprot.writeFieldEnd()
        if self.minigameShowShotFeedback is not None:
            oprot.writeFieldBegin('minigameShowShotFeedback', TType.BOOL, 77)
            oprot.writeBool(self.minigameShowShotFeedback)
            oprot.writeFieldEnd()
        if self.cellViewWhereToFindBgDisable is not None:
            oprot.writeFieldBegin('cellViewWhereToFindBgDisable', TType.STRING, 80)
            oprot.writeString(self.cellViewWhereToFindBgDisable.encode('utf-8') if sys.version_info[0] == 2 else self.cellViewWhereToFindBgDisable)
            oprot.writeFieldEnd()
        if self.cellViewWhereToFindBgEnable is not None:
            oprot.writeFieldBegin('cellViewWhereToFindBgEnable', TType.STRING, 81)
            oprot.writeString(self.cellViewWhereToFindBgEnable.encode('utf-8') if sys.version_info[0] == 2 else self.cellViewWhereToFindBgEnable)
            oprot.writeFieldEnd()
        if self.guildProfileInfoLoadingSectionTemplate is not None:
            oprot.writeFieldBegin('guildProfileInfoLoadingSectionTemplate', TType.STRING, 82)
            oprot.writeString(self.guildProfileInfoLoadingSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.guildProfileInfoLoadingSectionTemplate)
            oprot.writeFieldEnd()
        if self.guildProfileInfoLeaveSectionTemplate is not None:
            oprot.writeFieldBegin('guildProfileInfoLeaveSectionTemplate', TType.STRING, 83)
            oprot.writeString(self.guildProfileInfoLeaveSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.guildProfileInfoLeaveSectionTemplate)
            oprot.writeFieldEnd()
        if self.currencyDefaultCellViewPrefab is not None:
            oprot.writeFieldBegin('currencyDefaultCellViewPrefab', TType.STRING, 84)
            oprot.writeString(self.currencyDefaultCellViewPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.currencyDefaultCellViewPrefab)
            oprot.writeFieldEnd()
        if self.autoWinCurrencyCellViewPrefab is not None:
            oprot.writeFieldBegin('autoWinCurrencyCellViewPrefab', TType.STRING, 85)
            oprot.writeString(self.autoWinCurrencyCellViewPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.autoWinCurrencyCellViewPrefab)
            oprot.writeFieldEnd()
        if self.forcedUpdateUrlAndroid is not None:
            oprot.writeFieldBegin('forcedUpdateUrlAndroid', TType.STRING, 86)
            oprot.writeString(self.forcedUpdateUrlAndroid.encode('utf-8') if sys.version_info[0] == 2 else self.forcedUpdateUrlAndroid)
            oprot.writeFieldEnd()
        if self.forcedUpdateUrlIos is not None:
            oprot.writeFieldBegin('forcedUpdateUrlIos', TType.STRING, 87)
            oprot.writeString(self.forcedUpdateUrlIos.encode('utf-8') if sys.version_info[0] == 2 else self.forcedUpdateUrlIos)
            oprot.writeFieldEnd()
        if self.shopRibbonHeadingSectionTemplate is not None:
            oprot.writeFieldBegin('shopRibbonHeadingSectionTemplate', TType.STRING, 90)
            oprot.writeString(self.shopRibbonHeadingSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.shopRibbonHeadingSectionTemplate)
            oprot.writeFieldEnd()
        if self.shopHeadingSectionTemplate is not None:
            oprot.writeFieldBegin('shopHeadingSectionTemplate', TType.STRING, 91)
            oprot.writeString(self.shopHeadingSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.shopHeadingSectionTemplate)
            oprot.writeFieldEnd()
        if self.shopSingleItemSectionTemplate is not None:
            oprot.writeFieldBegin('shopSingleItemSectionTemplate', TType.STRING, 92)
            oprot.writeString(self.shopSingleItemSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.shopSingleItemSectionTemplate)
            oprot.writeFieldEnd()
        if self.shopMultipleItemSectionTemplate is not None:
            oprot.writeFieldBegin('shopMultipleItemSectionTemplate', TType.STRING, 93)
            oprot.writeString(self.shopMultipleItemSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.shopMultipleItemSectionTemplate)
            oprot.writeFieldEnd()
        if self.minigameFloatingHealPrefab is not None:
            oprot.writeFieldBegin('minigameFloatingHealPrefab', TType.STRING, 94)
            oprot.writeString(self.minigameFloatingHealPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.minigameFloatingHealPrefab)
            oprot.writeFieldEnd()
        if self.minigameFloatingDamagePrefab is not None:
            oprot.writeFieldBegin('minigameFloatingDamagePrefab', TType.STRING, 95)
            oprot.writeString(self.minigameFloatingDamagePrefab.encode('utf-8') if sys.version_info[0] == 2 else self.minigameFloatingDamagePrefab)
            oprot.writeFieldEnd()
        if self.eventRibbonHeadingSectionTemplate is not None:
            oprot.writeFieldBegin('eventRibbonHeadingSectionTemplate', TType.STRING, 100)
            oprot.writeString(self.eventRibbonHeadingSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.eventRibbonHeadingSectionTemplate)
            oprot.writeFieldEnd()
        if self.eventHeadingSectionTemplate is not None:
            oprot.writeFieldBegin('eventHeadingSectionTemplate', TType.STRING, 101)
            oprot.writeString(self.eventHeadingSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.eventHeadingSectionTemplate)
            oprot.writeFieldEnd()
        if self.eventSingleItemSectionTemplate is not None:
            oprot.writeFieldBegin('eventSingleItemSectionTemplate', TType.STRING, 102)
            oprot.writeString(self.eventSingleItemSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.eventSingleItemSectionTemplate)
            oprot.writeFieldEnd()
        if self.eventMultipleItemSectionTemplate is not None:
            oprot.writeFieldBegin('eventMultipleItemSectionTemplate', TType.STRING, 103)
            oprot.writeString(self.eventMultipleItemSectionTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.eventMultipleItemSectionTemplate)
            oprot.writeFieldEnd()
        if self.emptySectionTemplateEvent is not None:
            oprot.writeFieldBegin('emptySectionTemplateEvent', TType.STRING, 104)
            oprot.writeString(self.emptySectionTemplateEvent.encode('utf-8') if sys.version_info[0] == 2 else self.emptySectionTemplateEvent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gameId is None:
            raise TProtocolException(message='Required field gameId is unset!')
        if self.thriftNamespace is None:
            raise TProtocolException(message='Required field thriftNamespace is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Text(object):
    """
    Attributes:
     - editUserMenuAllowInvites_self
     - editUserMenuDontAllowInvites_self
     - editUserMenuAllowInvites_other
     - editUserMenuDontAllowInvites_other
     - noCrew
     - joinCrewNow
     - crew
     - damage
     - heal
     - chestSlotFull
     - okay
     - cancel
     - evolve
     - levelUp
     - level
     - commonOkay
     - editGuildSetUpEmblem
     - editGuildSelectIcon
     - editGuildSelectBorder
     - chestNextChestIn
     - purchaseConfirmation_NextPurchaseBonusInNumPurchases
     - heroInfoMenuPrefab
     - settingMenu_FindMyData
     - settingMenu_Connect
     - settingMenuPopup
     - settingMenu_SoundOn
     - settingMenu_SoundOff
     - fusion_HeroInASlot
     - winMenu_XpGained
     - winMenu_XpProgressLeft
     - winMenu_XpProgressRight
     - max
     - maxLevel
     - maxXp
     - xpColon
     - heroFusion_StatValue
     - heroFusion_PlusValue
     - heroFusion_Selected
     - heroFusion_Cost
     - commonFind
     - commonCraft
     - commonEquip
     - commonRequireHeroLevel
     - campUpradeToLevel
     - consumesThisGear
     - xpGained
     - commonFull
     - freeTag
     - buyOnePack
     - youHave
     - heroEvolved
     - heroLeveledUp
     - getHeroes
     - thisAccount
     - heroFusion_SelectedMaxHero
     - heroFusion_MaxXP
     - heroFusion_NoStats
     - camp_Training
     - unlockAt
     - needMoreLootTicket
     - raidsWinLoseTrophies
     - globalRank
     - text_Title_Ready_To_Battle
     - text_Edit_Team
     - text_Battle
     - text_Reroll
     - text_Defense_Team
     - text_Battle_Currency_Cost_Color
     - text_AutoWin
     - text_Title_Prepare_For_Battle
     - text_Title_Campaign_Name
     - text_Raid_Result_Trophy_Win
     - text_Raid_Result_Trophy_Lose
     - text_Title_League
     - text_Rematch
     - text_Battle_Menu_Team_Power
     - text_Guild_Online_Member
     - text_Guild_Members
     - text_AutoWin_Replay_Desc
     - text_AutoWin_YouHave
     - text_AutoWin_LootTickets
     - text_AutoWin_GetMore
     - text_AutoWin_ChanceOfWining
     - text_AutoWin_AmountReplays
     - text_AutoWin_MaxStamina
     - ability
     - enchantment
     - specialMove
     - nameColonDescription
     - text_Camp_Slot_Unlock
     - text_Camp_Slot_SkipWait
     - text_Camp_Slot_Collect
     - text_Camp_Slot_Train
     - text_Select_Border
     - text_Select_Avatar
     - text_Setup_Avatar
     - text_Save
     - text_Nothing
     - text_VIP
     - text_Create_Crew
     - text_Edit_Crew
     - text_AllowInvites
     - text_DoesNotAllowInvites
     - text_Promote
     - text_Rush
     - text_Train
     - text_Collect
     - text_Upgrade
     - text_Resources
     - text_TrainingTime
     - text_ChooseTraining
     - text_TrainingCamp
     - text_Achievements
     - text_HeroShop
     - text_Messages
     - text_VIPLevel
     - text_PlayerRank
     - text_MakeLeader
     - text_TimeLeft
     - text_Create
     - text_Search
     - text_EnterMessage
     - text_ReplyMessage
     - text_SearchInputPlaceHolder
     - text_MakeFriends
     - text_JoinCrewNow
     - text_Buy
     - text_EnemyTurn
     - text_NoConnection
     - text_Free
     - text_FinishTraining
     - text_Hero
     - text_Heroes
     - text_VIPLevelBenefits
     - text_VIPNextLevel
     - camp_Ready
     - text_Go
     - text_ReqMatAndRes
     - text_DailyQuests
     - text_NeedMoreSkillPoint
     - text_UnlockSkillSlot
     - text_RestoreAccount
     - text_SkillSlotUnlocked
     - text_ServerError
     - text_Credits
     - text_CreditsTitle

    """


    def __init__(self, editUserMenuAllowInvites_self=None, editUserMenuDontAllowInvites_self=None, editUserMenuAllowInvites_other=None, editUserMenuDontAllowInvites_other=None, noCrew=None, joinCrewNow=None, crew=None, damage=None, heal=None, chestSlotFull=None, okay=None, cancel=None, evolve=None, levelUp=None, level=None, commonOkay=None, editGuildSetUpEmblem=None, editGuildSelectIcon=None, editGuildSelectBorder=None, chestNextChestIn=None, purchaseConfirmation_NextPurchaseBonusInNumPurchases=None, heroInfoMenuPrefab=None, settingMenu_FindMyData=None, settingMenu_Connect=None, settingMenuPopup=None, settingMenu_SoundOn=None, settingMenu_SoundOff=None, fusion_HeroInASlot=None, winMenu_XpGained=None, winMenu_XpProgressLeft=None, winMenu_XpProgressRight=None, max=None, maxLevel=None, maxXp=None, xpColon=None, heroFusion_StatValue=None, heroFusion_PlusValue=None, heroFusion_Selected=None, heroFusion_Cost=None, commonFind=None, commonCraft=None, commonEquip=None, commonRequireHeroLevel=None, campUpradeToLevel=None, consumesThisGear=None, xpGained=None, commonFull=None, freeTag=None, buyOnePack=None, youHave=None, heroEvolved=None, heroLeveledUp=None, getHeroes=None, thisAccount=None, heroFusion_SelectedMaxHero=None, heroFusion_MaxXP=None, heroFusion_NoStats=None, camp_Training=None, unlockAt=None, needMoreLootTicket=None, raidsWinLoseTrophies=None, globalRank=None, text_Title_Ready_To_Battle=None, text_Edit_Team=None, text_Battle=None, text_Reroll=None, text_Defense_Team=None, text_Battle_Currency_Cost_Color=None, text_AutoWin=None, text_Title_Prepare_For_Battle=None, text_Title_Campaign_Name=None, text_Raid_Result_Trophy_Win=None, text_Raid_Result_Trophy_Lose=None, text_Title_League=None, text_Rematch=None, text_Battle_Menu_Team_Power=None, text_Guild_Online_Member=None, text_Guild_Members=None, text_AutoWin_Replay_Desc=None, text_AutoWin_YouHave=None, text_AutoWin_LootTickets=None, text_AutoWin_GetMore=None, text_AutoWin_ChanceOfWining=None, text_AutoWin_AmountReplays=None, text_AutoWin_MaxStamina=None, ability=None, enchantment=None, specialMove=None, nameColonDescription=None, text_Camp_Slot_Unlock=None, text_Camp_Slot_SkipWait=None, text_Camp_Slot_Collect=None, text_Camp_Slot_Train=None, text_Select_Border=None, text_Select_Avatar=None, text_Setup_Avatar=None, text_Save=None, text_Nothing=None, text_VIP=None, text_Create_Crew=None, text_Edit_Crew=None, text_AllowInvites=None, text_DoesNotAllowInvites=None, text_Promote=None, text_Rush=None, text_Train=None, text_Collect=None, text_Upgrade=None, text_Resources=None, text_TrainingTime=None, text_ChooseTraining=None, text_TrainingCamp=None, text_Achievements=None, text_HeroShop=None, text_Messages=None, text_VIPLevel=None, text_PlayerRank=None, text_MakeLeader=None, text_TimeLeft=None, text_Create=None, text_Search=None, text_EnterMessage=None, text_ReplyMessage=None, text_SearchInputPlaceHolder=None, text_MakeFriends=None, text_JoinCrewNow=None, text_Buy=None, text_EnemyTurn=None, text_NoConnection=None, text_Free=None, text_FinishTraining=None, text_Hero=None, text_Heroes=None, text_VIPLevelBenefits=None, text_VIPNextLevel=None, camp_Ready=None, text_Go=None, text_ReqMatAndRes=None, text_DailyQuests=None, text_NeedMoreSkillPoint=None, text_UnlockSkillSlot=None, text_RestoreAccount=None, text_SkillSlotUnlocked=None, text_ServerError=None, text_Credits=None, text_CreditsTitle=None,):
        self.editUserMenuAllowInvites_self = editUserMenuAllowInvites_self
        self.editUserMenuDontAllowInvites_self = editUserMenuDontAllowInvites_self
        self.editUserMenuAllowInvites_other = editUserMenuAllowInvites_other
        self.editUserMenuDontAllowInvites_other = editUserMenuDontAllowInvites_other
        self.noCrew = noCrew
        self.joinCrewNow = joinCrewNow
        self.crew = crew
        self.damage = damage
        self.heal = heal
        self.chestSlotFull = chestSlotFull
        self.okay = okay
        self.cancel = cancel
        self.evolve = evolve
        self.levelUp = levelUp
        self.level = level
        self.commonOkay = commonOkay
        self.editGuildSetUpEmblem = editGuildSetUpEmblem
        self.editGuildSelectIcon = editGuildSelectIcon
        self.editGuildSelectBorder = editGuildSelectBorder
        self.chestNextChestIn = chestNextChestIn
        self.purchaseConfirmation_NextPurchaseBonusInNumPurchases = purchaseConfirmation_NextPurchaseBonusInNumPurchases
        self.heroInfoMenuPrefab = heroInfoMenuPrefab
        self.settingMenu_FindMyData = settingMenu_FindMyData
        self.settingMenu_Connect = settingMenu_Connect
        self.settingMenuPopup = settingMenuPopup
        self.settingMenu_SoundOn = settingMenu_SoundOn
        self.settingMenu_SoundOff = settingMenu_SoundOff
        self.fusion_HeroInASlot = fusion_HeroInASlot
        self.winMenu_XpGained = winMenu_XpGained
        self.winMenu_XpProgressLeft = winMenu_XpProgressLeft
        self.winMenu_XpProgressRight = winMenu_XpProgressRight
        self.max = max
        self.maxLevel = maxLevel
        self.maxXp = maxXp
        self.xpColon = xpColon
        self.heroFusion_StatValue = heroFusion_StatValue
        self.heroFusion_PlusValue = heroFusion_PlusValue
        self.heroFusion_Selected = heroFusion_Selected
        self.heroFusion_Cost = heroFusion_Cost
        self.commonFind = commonFind
        self.commonCraft = commonCraft
        self.commonEquip = commonEquip
        self.commonRequireHeroLevel = commonRequireHeroLevel
        self.campUpradeToLevel = campUpradeToLevel
        self.consumesThisGear = consumesThisGear
        self.xpGained = xpGained
        self.commonFull = commonFull
        self.freeTag = freeTag
        self.buyOnePack = buyOnePack
        self.youHave = youHave
        self.heroEvolved = heroEvolved
        self.heroLeveledUp = heroLeveledUp
        self.getHeroes = getHeroes
        self.thisAccount = thisAccount
        self.heroFusion_SelectedMaxHero = heroFusion_SelectedMaxHero
        self.heroFusion_MaxXP = heroFusion_MaxXP
        self.heroFusion_NoStats = heroFusion_NoStats
        self.camp_Training = camp_Training
        self.unlockAt = unlockAt
        self.needMoreLootTicket = needMoreLootTicket
        self.raidsWinLoseTrophies = raidsWinLoseTrophies
        self.globalRank = globalRank
        self.text_Title_Ready_To_Battle = text_Title_Ready_To_Battle
        self.text_Edit_Team = text_Edit_Team
        self.text_Battle = text_Battle
        self.text_Reroll = text_Reroll
        self.text_Defense_Team = text_Defense_Team
        self.text_Battle_Currency_Cost_Color = text_Battle_Currency_Cost_Color
        self.text_AutoWin = text_AutoWin
        self.text_Title_Prepare_For_Battle = text_Title_Prepare_For_Battle
        self.text_Title_Campaign_Name = text_Title_Campaign_Name
        self.text_Raid_Result_Trophy_Win = text_Raid_Result_Trophy_Win
        self.text_Raid_Result_Trophy_Lose = text_Raid_Result_Trophy_Lose
        self.text_Title_League = text_Title_League
        self.text_Rematch = text_Rematch
        self.text_Battle_Menu_Team_Power = text_Battle_Menu_Team_Power
        self.text_Guild_Online_Member = text_Guild_Online_Member
        self.text_Guild_Members = text_Guild_Members
        self.text_AutoWin_Replay_Desc = text_AutoWin_Replay_Desc
        self.text_AutoWin_YouHave = text_AutoWin_YouHave
        self.text_AutoWin_LootTickets = text_AutoWin_LootTickets
        self.text_AutoWin_GetMore = text_AutoWin_GetMore
        self.text_AutoWin_ChanceOfWining = text_AutoWin_ChanceOfWining
        self.text_AutoWin_AmountReplays = text_AutoWin_AmountReplays
        self.text_AutoWin_MaxStamina = text_AutoWin_MaxStamina
        self.ability = ability
        self.enchantment = enchantment
        self.specialMove = specialMove
        self.nameColonDescription = nameColonDescription
        self.text_Camp_Slot_Unlock = text_Camp_Slot_Unlock
        self.text_Camp_Slot_SkipWait = text_Camp_Slot_SkipWait
        self.text_Camp_Slot_Collect = text_Camp_Slot_Collect
        self.text_Camp_Slot_Train = text_Camp_Slot_Train
        self.text_Select_Border = text_Select_Border
        self.text_Select_Avatar = text_Select_Avatar
        self.text_Setup_Avatar = text_Setup_Avatar
        self.text_Save = text_Save
        self.text_Nothing = text_Nothing
        self.text_VIP = text_VIP
        self.text_Create_Crew = text_Create_Crew
        self.text_Edit_Crew = text_Edit_Crew
        self.text_AllowInvites = text_AllowInvites
        self.text_DoesNotAllowInvites = text_DoesNotAllowInvites
        self.text_Promote = text_Promote
        self.text_Rush = text_Rush
        self.text_Train = text_Train
        self.text_Collect = text_Collect
        self.text_Upgrade = text_Upgrade
        self.text_Resources = text_Resources
        self.text_TrainingTime = text_TrainingTime
        self.text_ChooseTraining = text_ChooseTraining
        self.text_TrainingCamp = text_TrainingCamp
        self.text_Achievements = text_Achievements
        self.text_HeroShop = text_HeroShop
        self.text_Messages = text_Messages
        self.text_VIPLevel = text_VIPLevel
        self.text_PlayerRank = text_PlayerRank
        self.text_MakeLeader = text_MakeLeader
        self.text_TimeLeft = text_TimeLeft
        self.text_Create = text_Create
        self.text_Search = text_Search
        self.text_EnterMessage = text_EnterMessage
        self.text_ReplyMessage = text_ReplyMessage
        self.text_SearchInputPlaceHolder = text_SearchInputPlaceHolder
        self.text_MakeFriends = text_MakeFriends
        self.text_JoinCrewNow = text_JoinCrewNow
        self.text_Buy = text_Buy
        self.text_EnemyTurn = text_EnemyTurn
        self.text_NoConnection = text_NoConnection
        self.text_Free = text_Free
        self.text_FinishTraining = text_FinishTraining
        self.text_Hero = text_Hero
        self.text_Heroes = text_Heroes
        self.text_VIPLevelBenefits = text_VIPLevelBenefits
        self.text_VIPNextLevel = text_VIPNextLevel
        self.camp_Ready = camp_Ready
        self.text_Go = text_Go
        self.text_ReqMatAndRes = text_ReqMatAndRes
        self.text_DailyQuests = text_DailyQuests
        self.text_NeedMoreSkillPoint = text_NeedMoreSkillPoint
        self.text_UnlockSkillSlot = text_UnlockSkillSlot
        self.text_RestoreAccount = text_RestoreAccount
        self.text_SkillSlotUnlocked = text_SkillSlotUnlocked
        self.text_ServerError = text_ServerError
        self.text_Credits = text_Credits
        self.text_CreditsTitle = text_CreditsTitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.editUserMenuAllowInvites_self = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.editUserMenuDontAllowInvites_self = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.editUserMenuAllowInvites_other = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.editUserMenuDontAllowInvites_other = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.noCrew = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.joinCrewNow = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.crew = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.damage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.heal = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.chestSlotFull = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.okay = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.cancel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.evolve = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.levelUp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.level = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.commonOkay = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.editGuildSetUpEmblem = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.editGuildSelectIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.editGuildSelectBorder = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.chestNextChestIn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.purchaseConfirmation_NextPurchaseBonusInNumPurchases = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.heroInfoMenuPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.settingMenu_FindMyData = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.settingMenu_Connect = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.settingMenuPopup = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.settingMenu_SoundOn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.settingMenu_SoundOff = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.fusion_HeroInASlot = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRING:
                    self.winMenu_XpGained = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.STRING:
                    self.winMenu_XpProgressLeft = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRING:
                    self.winMenu_XpProgressRight = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.max = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.maxLevel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRING:
                    self.maxXp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRING:
                    self.xpColon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.STRING:
                    self.heroFusion_StatValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.STRING:
                    self.heroFusion_PlusValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.STRING:
                    self.heroFusion_Selected = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.STRING:
                    self.heroFusion_Cost = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 58:
                if ftype == TType.STRING:
                    self.commonFind = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.STRING:
                    self.commonCraft = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.STRING:
                    self.commonEquip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.STRING:
                    self.commonRequireHeroLevel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.STRING:
                    self.campUpradeToLevel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.STRING:
                    self.consumesThisGear = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.STRING:
                    self.xpGained = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.STRING:
                    self.commonFull = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.STRING:
                    self.freeTag = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.STRING:
                    self.buyOnePack = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.STRING:
                    self.youHave = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.STRING:
                    self.heroEvolved = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.STRING:
                    self.heroLeveledUp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.STRING:
                    self.getHeroes = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 84:
                if ftype == TType.STRING:
                    self.thisAccount = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.STRING:
                    self.heroFusion_SelectedMaxHero = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.STRING:
                    self.heroFusion_MaxXP = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.STRING:
                    self.heroFusion_NoStats = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.STRING:
                    self.camp_Training = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.STRING:
                    self.unlockAt = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.STRING:
                    self.needMoreLootTicket = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 96:
                if ftype == TType.STRING:
                    self.raidsWinLoseTrophies = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 98:
                if ftype == TType.STRING:
                    self.globalRank = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 99:
                if ftype == TType.STRING:
                    self.text_Title_Ready_To_Battle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.STRING:
                    self.text_Edit_Team = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.STRING:
                    self.text_Battle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 102:
                if ftype == TType.STRING:
                    self.text_Reroll = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 103:
                if ftype == TType.STRING:
                    self.text_Defense_Team = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 104:
                if ftype == TType.STRING:
                    self.text_Battle_Currency_Cost_Color = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 105:
                if ftype == TType.STRING:
                    self.text_AutoWin = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 106:
                if ftype == TType.STRING:
                    self.text_Title_Prepare_For_Battle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 107:
                if ftype == TType.STRING:
                    self.text_Title_Campaign_Name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 109:
                if ftype == TType.STRING:
                    self.text_Raid_Result_Trophy_Win = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 110:
                if ftype == TType.STRING:
                    self.text_Raid_Result_Trophy_Lose = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 111:
                if ftype == TType.STRING:
                    self.text_Title_League = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 112:
                if ftype == TType.STRING:
                    self.text_Rematch = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 113:
                if ftype == TType.STRING:
                    self.text_Battle_Menu_Team_Power = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 114:
                if ftype == TType.STRING:
                    self.text_Guild_Online_Member = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 116:
                if ftype == TType.STRING:
                    self.text_Guild_Members = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 117:
                if ftype == TType.STRING:
                    self.text_AutoWin_Replay_Desc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 118:
                if ftype == TType.STRING:
                    self.text_AutoWin_YouHave = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 119:
                if ftype == TType.STRING:
                    self.text_AutoWin_LootTickets = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.STRING:
                    self.text_AutoWin_GetMore = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 121:
                if ftype == TType.STRING:
                    self.text_AutoWin_ChanceOfWining = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 122:
                if ftype == TType.STRING:
                    self.text_AutoWin_AmountReplays = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 123:
                if ftype == TType.STRING:
                    self.text_AutoWin_MaxStamina = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 124:
                if ftype == TType.STRING:
                    self.ability = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 125:
                if ftype == TType.STRING:
                    self.enchantment = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 126:
                if ftype == TType.STRING:
                    self.specialMove = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 127:
                if ftype == TType.STRING:
                    self.nameColonDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 128:
                if ftype == TType.STRING:
                    self.text_Camp_Slot_Unlock = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 129:
                if ftype == TType.STRING:
                    self.text_Camp_Slot_SkipWait = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.STRING:
                    self.text_Camp_Slot_Collect = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 131:
                if ftype == TType.STRING:
                    self.text_Camp_Slot_Train = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 134:
                if ftype == TType.STRING:
                    self.text_Select_Border = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 135:
                if ftype == TType.STRING:
                    self.text_Select_Avatar = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 136:
                if ftype == TType.STRING:
                    self.text_Setup_Avatar = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 137:
                if ftype == TType.STRING:
                    self.text_Save = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 138:
                if ftype == TType.STRING:
                    self.text_Nothing = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 139:
                if ftype == TType.STRING:
                    self.text_VIP = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.STRING:
                    self.text_Create_Crew = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 141:
                if ftype == TType.STRING:
                    self.text_Edit_Crew = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 143:
                if ftype == TType.STRING:
                    self.text_AllowInvites = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 144:
                if ftype == TType.STRING:
                    self.text_DoesNotAllowInvites = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 145:
                if ftype == TType.STRING:
                    self.text_Promote = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 146:
                if ftype == TType.STRING:
                    self.text_Rush = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 147:
                if ftype == TType.STRING:
                    self.text_Train = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 148:
                if ftype == TType.STRING:
                    self.text_Collect = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 149:
                if ftype == TType.STRING:
                    self.text_Upgrade = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 150:
                if ftype == TType.STRING:
                    self.text_Resources = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 151:
                if ftype == TType.STRING:
                    self.text_TrainingTime = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 152:
                if ftype == TType.STRING:
                    self.text_ChooseTraining = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 153:
                if ftype == TType.STRING:
                    self.text_TrainingCamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 154:
                if ftype == TType.STRING:
                    self.text_Achievements = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 155:
                if ftype == TType.STRING:
                    self.text_HeroShop = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 156:
                if ftype == TType.STRING:
                    self.text_Messages = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 157:
                if ftype == TType.STRING:
                    self.text_VIPLevel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 158:
                if ftype == TType.STRING:
                    self.text_PlayerRank = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 159:
                if ftype == TType.STRING:
                    self.text_MakeLeader = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 160:
                if ftype == TType.STRING:
                    self.text_TimeLeft = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 161:
                if ftype == TType.STRING:
                    self.text_Create = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 162:
                if ftype == TType.STRING:
                    self.text_Search = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 163:
                if ftype == TType.STRING:
                    self.text_EnterMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 164:
                if ftype == TType.STRING:
                    self.text_ReplyMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 165:
                if ftype == TType.STRING:
                    self.text_SearchInputPlaceHolder = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 166:
                if ftype == TType.STRING:
                    self.text_MakeFriends = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 167:
                if ftype == TType.STRING:
                    self.text_JoinCrewNow = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 168:
                if ftype == TType.STRING:
                    self.text_Buy = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 169:
                if ftype == TType.STRING:
                    self.text_EnemyTurn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 170:
                if ftype == TType.STRING:
                    self.text_NoConnection = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 171:
                if ftype == TType.STRING:
                    self.text_Free = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 172:
                if ftype == TType.STRING:
                    self.text_FinishTraining = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 173:
                if ftype == TType.STRING:
                    self.text_Hero = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 174:
                if ftype == TType.STRING:
                    self.text_Heroes = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 176:
                if ftype == TType.STRING:
                    self.text_VIPLevelBenefits = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 177:
                if ftype == TType.STRING:
                    self.text_VIPNextLevel = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 178:
                if ftype == TType.STRING:
                    self.camp_Ready = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 179:
                if ftype == TType.STRING:
                    self.text_Go = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 180:
                if ftype == TType.STRING:
                    self.text_ReqMatAndRes = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 181:
                if ftype == TType.STRING:
                    self.text_DailyQuests = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 183:
                if ftype == TType.STRING:
                    self.text_NeedMoreSkillPoint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 184:
                if ftype == TType.STRING:
                    self.text_UnlockSkillSlot = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 185:
                if ftype == TType.STRING:
                    self.text_RestoreAccount = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 186:
                if ftype == TType.STRING:
                    self.text_SkillSlotUnlocked = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 187:
                if ftype == TType.STRING:
                    self.text_ServerError = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 191:
                if ftype == TType.STRING:
                    self.text_Credits = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 192:
                if ftype == TType.STRING:
                    self.text_CreditsTitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Text')
        if self.editUserMenuAllowInvites_self is not None:
            oprot.writeFieldBegin('editUserMenuAllowInvites_self', TType.STRING, 1)
            oprot.writeString(self.editUserMenuAllowInvites_self.encode('utf-8') if sys.version_info[0] == 2 else self.editUserMenuAllowInvites_self)
            oprot.writeFieldEnd()
        if self.editUserMenuDontAllowInvites_self is not None:
            oprot.writeFieldBegin('editUserMenuDontAllowInvites_self', TType.STRING, 2)
            oprot.writeString(self.editUserMenuDontAllowInvites_self.encode('utf-8') if sys.version_info[0] == 2 else self.editUserMenuDontAllowInvites_self)
            oprot.writeFieldEnd()
        if self.editUserMenuAllowInvites_other is not None:
            oprot.writeFieldBegin('editUserMenuAllowInvites_other', TType.STRING, 3)
            oprot.writeString(self.editUserMenuAllowInvites_other.encode('utf-8') if sys.version_info[0] == 2 else self.editUserMenuAllowInvites_other)
            oprot.writeFieldEnd()
        if self.editUserMenuDontAllowInvites_other is not None:
            oprot.writeFieldBegin('editUserMenuDontAllowInvites_other', TType.STRING, 4)
            oprot.writeString(self.editUserMenuDontAllowInvites_other.encode('utf-8') if sys.version_info[0] == 2 else self.editUserMenuDontAllowInvites_other)
            oprot.writeFieldEnd()
        if self.noCrew is not None:
            oprot.writeFieldBegin('noCrew', TType.STRING, 5)
            oprot.writeString(self.noCrew.encode('utf-8') if sys.version_info[0] == 2 else self.noCrew)
            oprot.writeFieldEnd()
        if self.joinCrewNow is not None:
            oprot.writeFieldBegin('joinCrewNow', TType.STRING, 6)
            oprot.writeString(self.joinCrewNow.encode('utf-8') if sys.version_info[0] == 2 else self.joinCrewNow)
            oprot.writeFieldEnd()
        if self.crew is not None:
            oprot.writeFieldBegin('crew', TType.STRING, 7)
            oprot.writeString(self.crew.encode('utf-8') if sys.version_info[0] == 2 else self.crew)
            oprot.writeFieldEnd()
        if self.damage is not None:
            oprot.writeFieldBegin('damage', TType.STRING, 8)
            oprot.writeString(self.damage.encode('utf-8') if sys.version_info[0] == 2 else self.damage)
            oprot.writeFieldEnd()
        if self.heal is not None:
            oprot.writeFieldBegin('heal', TType.STRING, 9)
            oprot.writeString(self.heal.encode('utf-8') if sys.version_info[0] == 2 else self.heal)
            oprot.writeFieldEnd()
        if self.chestSlotFull is not None:
            oprot.writeFieldBegin('chestSlotFull', TType.STRING, 10)
            oprot.writeString(self.chestSlotFull.encode('utf-8') if sys.version_info[0] == 2 else self.chestSlotFull)
            oprot.writeFieldEnd()
        if self.okay is not None:
            oprot.writeFieldBegin('okay', TType.STRING, 11)
            oprot.writeString(self.okay.encode('utf-8') if sys.version_info[0] == 2 else self.okay)
            oprot.writeFieldEnd()
        if self.cancel is not None:
            oprot.writeFieldBegin('cancel', TType.STRING, 12)
            oprot.writeString(self.cancel.encode('utf-8') if sys.version_info[0] == 2 else self.cancel)
            oprot.writeFieldEnd()
        if self.evolve is not None:
            oprot.writeFieldBegin('evolve', TType.STRING, 13)
            oprot.writeString(self.evolve.encode('utf-8') if sys.version_info[0] == 2 else self.evolve)
            oprot.writeFieldEnd()
        if self.levelUp is not None:
            oprot.writeFieldBegin('levelUp', TType.STRING, 14)
            oprot.writeString(self.levelUp.encode('utf-8') if sys.version_info[0] == 2 else self.levelUp)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.STRING, 15)
            oprot.writeString(self.level.encode('utf-8') if sys.version_info[0] == 2 else self.level)
            oprot.writeFieldEnd()
        if self.commonOkay is not None:
            oprot.writeFieldBegin('commonOkay', TType.STRING, 23)
            oprot.writeString(self.commonOkay.encode('utf-8') if sys.version_info[0] == 2 else self.commonOkay)
            oprot.writeFieldEnd()
        if self.editGuildSetUpEmblem is not None:
            oprot.writeFieldBegin('editGuildSetUpEmblem', TType.STRING, 24)
            oprot.writeString(self.editGuildSetUpEmblem.encode('utf-8') if sys.version_info[0] == 2 else self.editGuildSetUpEmblem)
            oprot.writeFieldEnd()
        if self.editGuildSelectIcon is not None:
            oprot.writeFieldBegin('editGuildSelectIcon', TType.STRING, 25)
            oprot.writeString(self.editGuildSelectIcon.encode('utf-8') if sys.version_info[0] == 2 else self.editGuildSelectIcon)
            oprot.writeFieldEnd()
        if self.editGuildSelectBorder is not None:
            oprot.writeFieldBegin('editGuildSelectBorder', TType.STRING, 26)
            oprot.writeString(self.editGuildSelectBorder.encode('utf-8') if sys.version_info[0] == 2 else self.editGuildSelectBorder)
            oprot.writeFieldEnd()
        if self.chestNextChestIn is not None:
            oprot.writeFieldBegin('chestNextChestIn', TType.STRING, 27)
            oprot.writeString(self.chestNextChestIn.encode('utf-8') if sys.version_info[0] == 2 else self.chestNextChestIn)
            oprot.writeFieldEnd()
        if self.purchaseConfirmation_NextPurchaseBonusInNumPurchases is not None:
            oprot.writeFieldBegin('purchaseConfirmation_NextPurchaseBonusInNumPurchases', TType.STRING, 28)
            oprot.writeString(self.purchaseConfirmation_NextPurchaseBonusInNumPurchases.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseConfirmation_NextPurchaseBonusInNumPurchases)
            oprot.writeFieldEnd()
        if self.heroInfoMenuPrefab is not None:
            oprot.writeFieldBegin('heroInfoMenuPrefab', TType.STRING, 30)
            oprot.writeString(self.heroInfoMenuPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.heroInfoMenuPrefab)
            oprot.writeFieldEnd()
        if self.settingMenu_FindMyData is not None:
            oprot.writeFieldBegin('settingMenu_FindMyData', TType.STRING, 31)
            oprot.writeString(self.settingMenu_FindMyData.encode('utf-8') if sys.version_info[0] == 2 else self.settingMenu_FindMyData)
            oprot.writeFieldEnd()
        if self.settingMenu_Connect is not None:
            oprot.writeFieldBegin('settingMenu_Connect', TType.STRING, 32)
            oprot.writeString(self.settingMenu_Connect.encode('utf-8') if sys.version_info[0] == 2 else self.settingMenu_Connect)
            oprot.writeFieldEnd()
        if self.settingMenuPopup is not None:
            oprot.writeFieldBegin('settingMenuPopup', TType.STRING, 34)
            oprot.writeString(self.settingMenuPopup.encode('utf-8') if sys.version_info[0] == 2 else self.settingMenuPopup)
            oprot.writeFieldEnd()
        if self.settingMenu_SoundOn is not None:
            oprot.writeFieldBegin('settingMenu_SoundOn', TType.STRING, 35)
            oprot.writeString(self.settingMenu_SoundOn.encode('utf-8') if sys.version_info[0] == 2 else self.settingMenu_SoundOn)
            oprot.writeFieldEnd()
        if self.settingMenu_SoundOff is not None:
            oprot.writeFieldBegin('settingMenu_SoundOff', TType.STRING, 36)
            oprot.writeString(self.settingMenu_SoundOff.encode('utf-8') if sys.version_info[0] == 2 else self.settingMenu_SoundOff)
            oprot.writeFieldEnd()
        if self.fusion_HeroInASlot is not None:
            oprot.writeFieldBegin('fusion_HeroInASlot', TType.STRING, 40)
            oprot.writeString(self.fusion_HeroInASlot.encode('utf-8') if sys.version_info[0] == 2 else self.fusion_HeroInASlot)
            oprot.writeFieldEnd()
        if self.winMenu_XpGained is not None:
            oprot.writeFieldBegin('winMenu_XpGained', TType.STRING, 47)
            oprot.writeString(self.winMenu_XpGained.encode('utf-8') if sys.version_info[0] == 2 else self.winMenu_XpGained)
            oprot.writeFieldEnd()
        if self.winMenu_XpProgressLeft is not None:
            oprot.writeFieldBegin('winMenu_XpProgressLeft', TType.STRING, 48)
            oprot.writeString(self.winMenu_XpProgressLeft.encode('utf-8') if sys.version_info[0] == 2 else self.winMenu_XpProgressLeft)
            oprot.writeFieldEnd()
        if self.winMenu_XpProgressRight is not None:
            oprot.writeFieldBegin('winMenu_XpProgressRight', TType.STRING, 49)
            oprot.writeString(self.winMenu_XpProgressRight.encode('utf-8') if sys.version_info[0] == 2 else self.winMenu_XpProgressRight)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.STRING, 50)
            oprot.writeString(self.max.encode('utf-8') if sys.version_info[0] == 2 else self.max)
            oprot.writeFieldEnd()
        if self.maxLevel is not None:
            oprot.writeFieldBegin('maxLevel', TType.STRING, 51)
            oprot.writeString(self.maxLevel.encode('utf-8') if sys.version_info[0] == 2 else self.maxLevel)
            oprot.writeFieldEnd()
        if self.maxXp is not None:
            oprot.writeFieldBegin('maxXp', TType.STRING, 52)
            oprot.writeString(self.maxXp.encode('utf-8') if sys.version_info[0] == 2 else self.maxXp)
            oprot.writeFieldEnd()
        if self.xpColon is not None:
            oprot.writeFieldBegin('xpColon', TType.STRING, 53)
            oprot.writeString(self.xpColon.encode('utf-8') if sys.version_info[0] == 2 else self.xpColon)
            oprot.writeFieldEnd()
        if self.heroFusion_StatValue is not None:
            oprot.writeFieldBegin('heroFusion_StatValue', TType.STRING, 54)
            oprot.writeString(self.heroFusion_StatValue.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_StatValue)
            oprot.writeFieldEnd()
        if self.heroFusion_PlusValue is not None:
            oprot.writeFieldBegin('heroFusion_PlusValue', TType.STRING, 55)
            oprot.writeString(self.heroFusion_PlusValue.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_PlusValue)
            oprot.writeFieldEnd()
        if self.heroFusion_Selected is not None:
            oprot.writeFieldBegin('heroFusion_Selected', TType.STRING, 56)
            oprot.writeString(self.heroFusion_Selected.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_Selected)
            oprot.writeFieldEnd()
        if self.heroFusion_Cost is not None:
            oprot.writeFieldBegin('heroFusion_Cost', TType.STRING, 57)
            oprot.writeString(self.heroFusion_Cost.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_Cost)
            oprot.writeFieldEnd()
        if self.commonFind is not None:
            oprot.writeFieldBegin('commonFind', TType.STRING, 58)
            oprot.writeString(self.commonFind.encode('utf-8') if sys.version_info[0] == 2 else self.commonFind)
            oprot.writeFieldEnd()
        if self.commonCraft is not None:
            oprot.writeFieldBegin('commonCraft', TType.STRING, 59)
            oprot.writeString(self.commonCraft.encode('utf-8') if sys.version_info[0] == 2 else self.commonCraft)
            oprot.writeFieldEnd()
        if self.commonEquip is not None:
            oprot.writeFieldBegin('commonEquip', TType.STRING, 60)
            oprot.writeString(self.commonEquip.encode('utf-8') if sys.version_info[0] == 2 else self.commonEquip)
            oprot.writeFieldEnd()
        if self.commonRequireHeroLevel is not None:
            oprot.writeFieldBegin('commonRequireHeroLevel', TType.STRING, 61)
            oprot.writeString(self.commonRequireHeroLevel.encode('utf-8') if sys.version_info[0] == 2 else self.commonRequireHeroLevel)
            oprot.writeFieldEnd()
        if self.campUpradeToLevel is not None:
            oprot.writeFieldBegin('campUpradeToLevel', TType.STRING, 63)
            oprot.writeString(self.campUpradeToLevel.encode('utf-8') if sys.version_info[0] == 2 else self.campUpradeToLevel)
            oprot.writeFieldEnd()
        if self.consumesThisGear is not None:
            oprot.writeFieldBegin('consumesThisGear', TType.STRING, 64)
            oprot.writeString(self.consumesThisGear.encode('utf-8') if sys.version_info[0] == 2 else self.consumesThisGear)
            oprot.writeFieldEnd()
        if self.xpGained is not None:
            oprot.writeFieldBegin('xpGained', TType.STRING, 70)
            oprot.writeString(self.xpGained.encode('utf-8') if sys.version_info[0] == 2 else self.xpGained)
            oprot.writeFieldEnd()
        if self.commonFull is not None:
            oprot.writeFieldBegin('commonFull', TType.STRING, 71)
            oprot.writeString(self.commonFull.encode('utf-8') if sys.version_info[0] == 2 else self.commonFull)
            oprot.writeFieldEnd()
        if self.freeTag is not None:
            oprot.writeFieldBegin('freeTag', TType.STRING, 77)
            oprot.writeString(self.freeTag.encode('utf-8') if sys.version_info[0] == 2 else self.freeTag)
            oprot.writeFieldEnd()
        if self.buyOnePack is not None:
            oprot.writeFieldBegin('buyOnePack', TType.STRING, 79)
            oprot.writeString(self.buyOnePack.encode('utf-8') if sys.version_info[0] == 2 else self.buyOnePack)
            oprot.writeFieldEnd()
        if self.heroEvolved is not None:
            oprot.writeFieldBegin('heroEvolved', TType.STRING, 80)
            oprot.writeString(self.heroEvolved.encode('utf-8') if sys.version_info[0] == 2 else self.heroEvolved)
            oprot.writeFieldEnd()
        if self.youHave is not None:
            oprot.writeFieldBegin('youHave', TType.STRING, 81)
            oprot.writeString(self.youHave.encode('utf-8') if sys.version_info[0] == 2 else self.youHave)
            oprot.writeFieldEnd()
        if self.getHeroes is not None:
            oprot.writeFieldBegin('getHeroes', TType.STRING, 82)
            oprot.writeString(self.getHeroes.encode('utf-8') if sys.version_info[0] == 2 else self.getHeroes)
            oprot.writeFieldEnd()
        if self.heroLeveledUp is not None:
            oprot.writeFieldBegin('heroLeveledUp', TType.STRING, 83)
            oprot.writeString(self.heroLeveledUp.encode('utf-8') if sys.version_info[0] == 2 else self.heroLeveledUp)
            oprot.writeFieldEnd()
        if self.thisAccount is not None:
            oprot.writeFieldBegin('thisAccount', TType.STRING, 84)
            oprot.writeString(self.thisAccount.encode('utf-8') if sys.version_info[0] == 2 else self.thisAccount)
            oprot.writeFieldEnd()
        if self.heroFusion_SelectedMaxHero is not None:
            oprot.writeFieldBegin('heroFusion_SelectedMaxHero', TType.STRING, 85)
            oprot.writeString(self.heroFusion_SelectedMaxHero.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_SelectedMaxHero)
            oprot.writeFieldEnd()
        if self.heroFusion_MaxXP is not None:
            oprot.writeFieldBegin('heroFusion_MaxXP', TType.STRING, 86)
            oprot.writeString(self.heroFusion_MaxXP.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_MaxXP)
            oprot.writeFieldEnd()
        if self.heroFusion_NoStats is not None:
            oprot.writeFieldBegin('heroFusion_NoStats', TType.STRING, 87)
            oprot.writeString(self.heroFusion_NoStats.encode('utf-8') if sys.version_info[0] == 2 else self.heroFusion_NoStats)
            oprot.writeFieldEnd()
        if self.camp_Training is not None:
            oprot.writeFieldBegin('camp_Training', TType.STRING, 91)
            oprot.writeString(self.camp_Training.encode('utf-8') if sys.version_info[0] == 2 else self.camp_Training)
            oprot.writeFieldEnd()
        if self.unlockAt is not None:
            oprot.writeFieldBegin('unlockAt', TType.STRING, 92)
            oprot.writeString(self.unlockAt.encode('utf-8') if sys.version_info[0] == 2 else self.unlockAt)
            oprot.writeFieldEnd()
        if self.needMoreLootTicket is not None:
            oprot.writeFieldBegin('needMoreLootTicket', TType.STRING, 95)
            oprot.writeString(self.needMoreLootTicket.encode('utf-8') if sys.version_info[0] == 2 else self.needMoreLootTicket)
            oprot.writeFieldEnd()
        if self.raidsWinLoseTrophies is not None:
            oprot.writeFieldBegin('raidsWinLoseTrophies', TType.STRING, 96)
            oprot.writeString(self.raidsWinLoseTrophies.encode('utf-8') if sys.version_info[0] == 2 else self.raidsWinLoseTrophies)
            oprot.writeFieldEnd()
        if self.globalRank is not None:
            oprot.writeFieldBegin('globalRank', TType.STRING, 98)
            oprot.writeString(self.globalRank.encode('utf-8') if sys.version_info[0] == 2 else self.globalRank)
            oprot.writeFieldEnd()
        if self.text_Title_Ready_To_Battle is not None:
            oprot.writeFieldBegin('text_Title_Ready_To_Battle', TType.STRING, 99)
            oprot.writeString(self.text_Title_Ready_To_Battle.encode('utf-8') if sys.version_info[0] == 2 else self.text_Title_Ready_To_Battle)
            oprot.writeFieldEnd()
        if self.text_Edit_Team is not None:
            oprot.writeFieldBegin('text_Edit_Team', TType.STRING, 100)
            oprot.writeString(self.text_Edit_Team.encode('utf-8') if sys.version_info[0] == 2 else self.text_Edit_Team)
            oprot.writeFieldEnd()
        if self.text_Battle is not None:
            oprot.writeFieldBegin('text_Battle', TType.STRING, 101)
            oprot.writeString(self.text_Battle.encode('utf-8') if sys.version_info[0] == 2 else self.text_Battle)
            oprot.writeFieldEnd()
        if self.text_Reroll is not None:
            oprot.writeFieldBegin('text_Reroll', TType.STRING, 102)
            oprot.writeString(self.text_Reroll.encode('utf-8') if sys.version_info[0] == 2 else self.text_Reroll)
            oprot.writeFieldEnd()
        if self.text_Defense_Team is not None:
            oprot.writeFieldBegin('text_Defense_Team', TType.STRING, 103)
            oprot.writeString(self.text_Defense_Team.encode('utf-8') if sys.version_info[0] == 2 else self.text_Defense_Team)
            oprot.writeFieldEnd()
        if self.text_Battle_Currency_Cost_Color is not None:
            oprot.writeFieldBegin('text_Battle_Currency_Cost_Color', TType.STRING, 104)
            oprot.writeString(self.text_Battle_Currency_Cost_Color.encode('utf-8') if sys.version_info[0] == 2 else self.text_Battle_Currency_Cost_Color)
            oprot.writeFieldEnd()
        if self.text_AutoWin is not None:
            oprot.writeFieldBegin('text_AutoWin', TType.STRING, 105)
            oprot.writeString(self.text_AutoWin.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin)
            oprot.writeFieldEnd()
        if self.text_Title_Prepare_For_Battle is not None:
            oprot.writeFieldBegin('text_Title_Prepare_For_Battle', TType.STRING, 106)
            oprot.writeString(self.text_Title_Prepare_For_Battle.encode('utf-8') if sys.version_info[0] == 2 else self.text_Title_Prepare_For_Battle)
            oprot.writeFieldEnd()
        if self.text_Title_Campaign_Name is not None:
            oprot.writeFieldBegin('text_Title_Campaign_Name', TType.STRING, 107)
            oprot.writeString(self.text_Title_Campaign_Name.encode('utf-8') if sys.version_info[0] == 2 else self.text_Title_Campaign_Name)
            oprot.writeFieldEnd()
        if self.text_Raid_Result_Trophy_Win is not None:
            oprot.writeFieldBegin('text_Raid_Result_Trophy_Win', TType.STRING, 109)
            oprot.writeString(self.text_Raid_Result_Trophy_Win.encode('utf-8') if sys.version_info[0] == 2 else self.text_Raid_Result_Trophy_Win)
            oprot.writeFieldEnd()
        if self.text_Raid_Result_Trophy_Lose is not None:
            oprot.writeFieldBegin('text_Raid_Result_Trophy_Lose', TType.STRING, 110)
            oprot.writeString(self.text_Raid_Result_Trophy_Lose.encode('utf-8') if sys.version_info[0] == 2 else self.text_Raid_Result_Trophy_Lose)
            oprot.writeFieldEnd()
        if self.text_Title_League is not None:
            oprot.writeFieldBegin('text_Title_League', TType.STRING, 111)
            oprot.writeString(self.text_Title_League.encode('utf-8') if sys.version_info[0] == 2 else self.text_Title_League)
            oprot.writeFieldEnd()
        if self.text_Rematch is not None:
            oprot.writeFieldBegin('text_Rematch', TType.STRING, 112)
            oprot.writeString(self.text_Rematch.encode('utf-8') if sys.version_info[0] == 2 else self.text_Rematch)
            oprot.writeFieldEnd()
        if self.text_Battle_Menu_Team_Power is not None:
            oprot.writeFieldBegin('text_Battle_Menu_Team_Power', TType.STRING, 113)
            oprot.writeString(self.text_Battle_Menu_Team_Power.encode('utf-8') if sys.version_info[0] == 2 else self.text_Battle_Menu_Team_Power)
            oprot.writeFieldEnd()
        if self.text_Guild_Online_Member is not None:
            oprot.writeFieldBegin('text_Guild_Online_Member', TType.STRING, 114)
            oprot.writeString(self.text_Guild_Online_Member.encode('utf-8') if sys.version_info[0] == 2 else self.text_Guild_Online_Member)
            oprot.writeFieldEnd()
        if self.text_Guild_Members is not None:
            oprot.writeFieldBegin('text_Guild_Members', TType.STRING, 116)
            oprot.writeString(self.text_Guild_Members.encode('utf-8') if sys.version_info[0] == 2 else self.text_Guild_Members)
            oprot.writeFieldEnd()
        if self.text_AutoWin_Replay_Desc is not None:
            oprot.writeFieldBegin('text_AutoWin_Replay_Desc', TType.STRING, 117)
            oprot.writeString(self.text_AutoWin_Replay_Desc.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_Replay_Desc)
            oprot.writeFieldEnd()
        if self.text_AutoWin_YouHave is not None:
            oprot.writeFieldBegin('text_AutoWin_YouHave', TType.STRING, 118)
            oprot.writeString(self.text_AutoWin_YouHave.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_YouHave)
            oprot.writeFieldEnd()
        if self.text_AutoWin_LootTickets is not None:
            oprot.writeFieldBegin('text_AutoWin_LootTickets', TType.STRING, 119)
            oprot.writeString(self.text_AutoWin_LootTickets.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_LootTickets)
            oprot.writeFieldEnd()
        if self.text_AutoWin_GetMore is not None:
            oprot.writeFieldBegin('text_AutoWin_GetMore', TType.STRING, 120)
            oprot.writeString(self.text_AutoWin_GetMore.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_GetMore)
            oprot.writeFieldEnd()
        if self.text_AutoWin_ChanceOfWining is not None:
            oprot.writeFieldBegin('text_AutoWin_ChanceOfWining', TType.STRING, 121)
            oprot.writeString(self.text_AutoWin_ChanceOfWining.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_ChanceOfWining)
            oprot.writeFieldEnd()
        if self.text_AutoWin_AmountReplays is not None:
            oprot.writeFieldBegin('text_AutoWin_AmountReplays', TType.STRING, 122)
            oprot.writeString(self.text_AutoWin_AmountReplays.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_AmountReplays)
            oprot.writeFieldEnd()
        if self.text_AutoWin_MaxStamina is not None:
            oprot.writeFieldBegin('text_AutoWin_MaxStamina', TType.STRING, 123)
            oprot.writeString(self.text_AutoWin_MaxStamina.encode('utf-8') if sys.version_info[0] == 2 else self.text_AutoWin_MaxStamina)
            oprot.writeFieldEnd()
        if self.ability is not None:
            oprot.writeFieldBegin('ability', TType.STRING, 124)
            oprot.writeString(self.ability.encode('utf-8') if sys.version_info[0] == 2 else self.ability)
            oprot.writeFieldEnd()
        if self.enchantment is not None:
            oprot.writeFieldBegin('enchantment', TType.STRING, 125)
            oprot.writeString(self.enchantment.encode('utf-8') if sys.version_info[0] == 2 else self.enchantment)
            oprot.writeFieldEnd()
        if self.specialMove is not None:
            oprot.writeFieldBegin('specialMove', TType.STRING, 126)
            oprot.writeString(self.specialMove.encode('utf-8') if sys.version_info[0] == 2 else self.specialMove)
            oprot.writeFieldEnd()
        if self.nameColonDescription is not None:
            oprot.writeFieldBegin('nameColonDescription', TType.STRING, 127)
            oprot.writeString(self.nameColonDescription.encode('utf-8') if sys.version_info[0] == 2 else self.nameColonDescription)
            oprot.writeFieldEnd()
        if self.text_Camp_Slot_Unlock is not None:
            oprot.writeFieldBegin('text_Camp_Slot_Unlock', TType.STRING, 128)
            oprot.writeString(self.text_Camp_Slot_Unlock.encode('utf-8') if sys.version_info[0] == 2 else self.text_Camp_Slot_Unlock)
            oprot.writeFieldEnd()
        if self.text_Camp_Slot_SkipWait is not None:
            oprot.writeFieldBegin('text_Camp_Slot_SkipWait', TType.STRING, 129)
            oprot.writeString(self.text_Camp_Slot_SkipWait.encode('utf-8') if sys.version_info[0] == 2 else self.text_Camp_Slot_SkipWait)
            oprot.writeFieldEnd()
        if self.text_Camp_Slot_Collect is not None:
            oprot.writeFieldBegin('text_Camp_Slot_Collect', TType.STRING, 130)
            oprot.writeString(self.text_Camp_Slot_Collect.encode('utf-8') if sys.version_info[0] == 2 else self.text_Camp_Slot_Collect)
            oprot.writeFieldEnd()
        if self.text_Camp_Slot_Train is not None:
            oprot.writeFieldBegin('text_Camp_Slot_Train', TType.STRING, 131)
            oprot.writeString(self.text_Camp_Slot_Train.encode('utf-8') if sys.version_info[0] == 2 else self.text_Camp_Slot_Train)
            oprot.writeFieldEnd()
        if self.text_Select_Border is not None:
            oprot.writeFieldBegin('text_Select_Border', TType.STRING, 134)
            oprot.writeString(self.text_Select_Border.encode('utf-8') if sys.version_info[0] == 2 else self.text_Select_Border)
            oprot.writeFieldEnd()
        if self.text_Select_Avatar is not None:
            oprot.writeFieldBegin('text_Select_Avatar', TType.STRING, 135)
            oprot.writeString(self.text_Select_Avatar.encode('utf-8') if sys.version_info[0] == 2 else self.text_Select_Avatar)
            oprot.writeFieldEnd()
        if self.text_Setup_Avatar is not None:
            oprot.writeFieldBegin('text_Setup_Avatar', TType.STRING, 136)
            oprot.writeString(self.text_Setup_Avatar.encode('utf-8') if sys.version_info[0] == 2 else self.text_Setup_Avatar)
            oprot.writeFieldEnd()
        if self.text_Save is not None:
            oprot.writeFieldBegin('text_Save', TType.STRING, 137)
            oprot.writeString(self.text_Save.encode('utf-8') if sys.version_info[0] == 2 else self.text_Save)
            oprot.writeFieldEnd()
        if self.text_Nothing is not None:
            oprot.writeFieldBegin('text_Nothing', TType.STRING, 138)
            oprot.writeString(self.text_Nothing.encode('utf-8') if sys.version_info[0] == 2 else self.text_Nothing)
            oprot.writeFieldEnd()
        if self.text_VIP is not None:
            oprot.writeFieldBegin('text_VIP', TType.STRING, 139)
            oprot.writeString(self.text_VIP.encode('utf-8') if sys.version_info[0] == 2 else self.text_VIP)
            oprot.writeFieldEnd()
        if self.text_Create_Crew is not None:
            oprot.writeFieldBegin('text_Create_Crew', TType.STRING, 140)
            oprot.writeString(self.text_Create_Crew.encode('utf-8') if sys.version_info[0] == 2 else self.text_Create_Crew)
            oprot.writeFieldEnd()
        if self.text_Edit_Crew is not None:
            oprot.writeFieldBegin('text_Edit_Crew', TType.STRING, 141)
            oprot.writeString(self.text_Edit_Crew.encode('utf-8') if sys.version_info[0] == 2 else self.text_Edit_Crew)
            oprot.writeFieldEnd()
        if self.text_AllowInvites is not None:
            oprot.writeFieldBegin('text_AllowInvites', TType.STRING, 143)
            oprot.writeString(self.text_AllowInvites.encode('utf-8') if sys.version_info[0] == 2 else self.text_AllowInvites)
            oprot.writeFieldEnd()
        if self.text_DoesNotAllowInvites is not None:
            oprot.writeFieldBegin('text_DoesNotAllowInvites', TType.STRING, 144)
            oprot.writeString(self.text_DoesNotAllowInvites.encode('utf-8') if sys.version_info[0] == 2 else self.text_DoesNotAllowInvites)
            oprot.writeFieldEnd()
        if self.text_Promote is not None:
            oprot.writeFieldBegin('text_Promote', TType.STRING, 145)
            oprot.writeString(self.text_Promote.encode('utf-8') if sys.version_info[0] == 2 else self.text_Promote)
            oprot.writeFieldEnd()
        if self.text_Rush is not None:
            oprot.writeFieldBegin('text_Rush', TType.STRING, 146)
            oprot.writeString(self.text_Rush.encode('utf-8') if sys.version_info[0] == 2 else self.text_Rush)
            oprot.writeFieldEnd()
        if self.text_Train is not None:
            oprot.writeFieldBegin('text_Train', TType.STRING, 147)
            oprot.writeString(self.text_Train.encode('utf-8') if sys.version_info[0] == 2 else self.text_Train)
            oprot.writeFieldEnd()
        if self.text_Collect is not None:
            oprot.writeFieldBegin('text_Collect', TType.STRING, 148)
            oprot.writeString(self.text_Collect.encode('utf-8') if sys.version_info[0] == 2 else self.text_Collect)
            oprot.writeFieldEnd()
        if self.text_Upgrade is not None:
            oprot.writeFieldBegin('text_Upgrade', TType.STRING, 149)
            oprot.writeString(self.text_Upgrade.encode('utf-8') if sys.version_info[0] == 2 else self.text_Upgrade)
            oprot.writeFieldEnd()
        if self.text_Resources is not None:
            oprot.writeFieldBegin('text_Resources', TType.STRING, 150)
            oprot.writeString(self.text_Resources.encode('utf-8') if sys.version_info[0] == 2 else self.text_Resources)
            oprot.writeFieldEnd()
        if self.text_TrainingTime is not None:
            oprot.writeFieldBegin('text_TrainingTime', TType.STRING, 151)
            oprot.writeString(self.text_TrainingTime.encode('utf-8') if sys.version_info[0] == 2 else self.text_TrainingTime)
            oprot.writeFieldEnd()
        if self.text_ChooseTraining is not None:
            oprot.writeFieldBegin('text_ChooseTraining', TType.STRING, 152)
            oprot.writeString(self.text_ChooseTraining.encode('utf-8') if sys.version_info[0] == 2 else self.text_ChooseTraining)
            oprot.writeFieldEnd()
        if self.text_TrainingCamp is not None:
            oprot.writeFieldBegin('text_TrainingCamp', TType.STRING, 153)
            oprot.writeString(self.text_TrainingCamp.encode('utf-8') if sys.version_info[0] == 2 else self.text_TrainingCamp)
            oprot.writeFieldEnd()
        if self.text_Achievements is not None:
            oprot.writeFieldBegin('text_Achievements', TType.STRING, 154)
            oprot.writeString(self.text_Achievements.encode('utf-8') if sys.version_info[0] == 2 else self.text_Achievements)
            oprot.writeFieldEnd()
        if self.text_HeroShop is not None:
            oprot.writeFieldBegin('text_HeroShop', TType.STRING, 155)
            oprot.writeString(self.text_HeroShop.encode('utf-8') if sys.version_info[0] == 2 else self.text_HeroShop)
            oprot.writeFieldEnd()
        if self.text_Messages is not None:
            oprot.writeFieldBegin('text_Messages', TType.STRING, 156)
            oprot.writeString(self.text_Messages.encode('utf-8') if sys.version_info[0] == 2 else self.text_Messages)
            oprot.writeFieldEnd()
        if self.text_VIPLevel is not None:
            oprot.writeFieldBegin('text_VIPLevel', TType.STRING, 157)
            oprot.writeString(self.text_VIPLevel.encode('utf-8') if sys.version_info[0] == 2 else self.text_VIPLevel)
            oprot.writeFieldEnd()
        if self.text_PlayerRank is not None:
            oprot.writeFieldBegin('text_PlayerRank', TType.STRING, 158)
            oprot.writeString(self.text_PlayerRank.encode('utf-8') if sys.version_info[0] == 2 else self.text_PlayerRank)
            oprot.writeFieldEnd()
        if self.text_MakeLeader is not None:
            oprot.writeFieldBegin('text_MakeLeader', TType.STRING, 159)
            oprot.writeString(self.text_MakeLeader.encode('utf-8') if sys.version_info[0] == 2 else self.text_MakeLeader)
            oprot.writeFieldEnd()
        if self.text_TimeLeft is not None:
            oprot.writeFieldBegin('text_TimeLeft', TType.STRING, 160)
            oprot.writeString(self.text_TimeLeft.encode('utf-8') if sys.version_info[0] == 2 else self.text_TimeLeft)
            oprot.writeFieldEnd()
        if self.text_Create is not None:
            oprot.writeFieldBegin('text_Create', TType.STRING, 161)
            oprot.writeString(self.text_Create.encode('utf-8') if sys.version_info[0] == 2 else self.text_Create)
            oprot.writeFieldEnd()
        if self.text_Search is not None:
            oprot.writeFieldBegin('text_Search', TType.STRING, 162)
            oprot.writeString(self.text_Search.encode('utf-8') if sys.version_info[0] == 2 else self.text_Search)
            oprot.writeFieldEnd()
        if self.text_EnterMessage is not None:
            oprot.writeFieldBegin('text_EnterMessage', TType.STRING, 163)
            oprot.writeString(self.text_EnterMessage.encode('utf-8') if sys.version_info[0] == 2 else self.text_EnterMessage)
            oprot.writeFieldEnd()
        if self.text_ReplyMessage is not None:
            oprot.writeFieldBegin('text_ReplyMessage', TType.STRING, 164)
            oprot.writeString(self.text_ReplyMessage.encode('utf-8') if sys.version_info[0] == 2 else self.text_ReplyMessage)
            oprot.writeFieldEnd()
        if self.text_SearchInputPlaceHolder is not None:
            oprot.writeFieldBegin('text_SearchInputPlaceHolder', TType.STRING, 165)
            oprot.writeString(self.text_SearchInputPlaceHolder.encode('utf-8') if sys.version_info[0] == 2 else self.text_SearchInputPlaceHolder)
            oprot.writeFieldEnd()
        if self.text_MakeFriends is not None:
            oprot.writeFieldBegin('text_MakeFriends', TType.STRING, 166)
            oprot.writeString(self.text_MakeFriends.encode('utf-8') if sys.version_info[0] == 2 else self.text_MakeFriends)
            oprot.writeFieldEnd()
        if self.text_JoinCrewNow is not None:
            oprot.writeFieldBegin('text_JoinCrewNow', TType.STRING, 167)
            oprot.writeString(self.text_JoinCrewNow.encode('utf-8') if sys.version_info[0] == 2 else self.text_JoinCrewNow)
            oprot.writeFieldEnd()
        if self.text_Buy is not None:
            oprot.writeFieldBegin('text_Buy', TType.STRING, 168)
            oprot.writeString(self.text_Buy.encode('utf-8') if sys.version_info[0] == 2 else self.text_Buy)
            oprot.writeFieldEnd()
        if self.text_EnemyTurn is not None:
            oprot.writeFieldBegin('text_EnemyTurn', TType.STRING, 169)
            oprot.writeString(self.text_EnemyTurn.encode('utf-8') if sys.version_info[0] == 2 else self.text_EnemyTurn)
            oprot.writeFieldEnd()
        if self.text_NoConnection is not None:
            oprot.writeFieldBegin('text_NoConnection', TType.STRING, 170)
            oprot.writeString(self.text_NoConnection.encode('utf-8') if sys.version_info[0] == 2 else self.text_NoConnection)
            oprot.writeFieldEnd()
        if self.text_Free is not None:
            oprot.writeFieldBegin('text_Free', TType.STRING, 171)
            oprot.writeString(self.text_Free.encode('utf-8') if sys.version_info[0] == 2 else self.text_Free)
            oprot.writeFieldEnd()
        if self.text_FinishTraining is not None:
            oprot.writeFieldBegin('text_FinishTraining', TType.STRING, 172)
            oprot.writeString(self.text_FinishTraining.encode('utf-8') if sys.version_info[0] == 2 else self.text_FinishTraining)
            oprot.writeFieldEnd()
        if self.text_Hero is not None:
            oprot.writeFieldBegin('text_Hero', TType.STRING, 173)
            oprot.writeString(self.text_Hero.encode('utf-8') if sys.version_info[0] == 2 else self.text_Hero)
            oprot.writeFieldEnd()
        if self.text_Heroes is not None:
            oprot.writeFieldBegin('text_Heroes', TType.STRING, 174)
            oprot.writeString(self.text_Heroes.encode('utf-8') if sys.version_info[0] == 2 else self.text_Heroes)
            oprot.writeFieldEnd()
        if self.text_VIPLevelBenefits is not None:
            oprot.writeFieldBegin('text_VIPLevelBenefits', TType.STRING, 176)
            oprot.writeString(self.text_VIPLevelBenefits.encode('utf-8') if sys.version_info[0] == 2 else self.text_VIPLevelBenefits)
            oprot.writeFieldEnd()
        if self.text_VIPNextLevel is not None:
            oprot.writeFieldBegin('text_VIPNextLevel', TType.STRING, 177)
            oprot.writeString(self.text_VIPNextLevel.encode('utf-8') if sys.version_info[0] == 2 else self.text_VIPNextLevel)
            oprot.writeFieldEnd()
        if self.camp_Ready is not None:
            oprot.writeFieldBegin('camp_Ready', TType.STRING, 178)
            oprot.writeString(self.camp_Ready.encode('utf-8') if sys.version_info[0] == 2 else self.camp_Ready)
            oprot.writeFieldEnd()
        if self.text_Go is not None:
            oprot.writeFieldBegin('text_Go', TType.STRING, 179)
            oprot.writeString(self.text_Go.encode('utf-8') if sys.version_info[0] == 2 else self.text_Go)
            oprot.writeFieldEnd()
        if self.text_ReqMatAndRes is not None:
            oprot.writeFieldBegin('text_ReqMatAndRes', TType.STRING, 180)
            oprot.writeString(self.text_ReqMatAndRes.encode('utf-8') if sys.version_info[0] == 2 else self.text_ReqMatAndRes)
            oprot.writeFieldEnd()
        if self.text_DailyQuests is not None:
            oprot.writeFieldBegin('text_DailyQuests', TType.STRING, 181)
            oprot.writeString(self.text_DailyQuests.encode('utf-8') if sys.version_info[0] == 2 else self.text_DailyQuests)
            oprot.writeFieldEnd()
        if self.text_NeedMoreSkillPoint is not None:
            oprot.writeFieldBegin('text_NeedMoreSkillPoint', TType.STRING, 183)
            oprot.writeString(self.text_NeedMoreSkillPoint.encode('utf-8') if sys.version_info[0] == 2 else self.text_NeedMoreSkillPoint)
            oprot.writeFieldEnd()
        if self.text_UnlockSkillSlot is not None:
            oprot.writeFieldBegin('text_UnlockSkillSlot', TType.STRING, 184)
            oprot.writeString(self.text_UnlockSkillSlot.encode('utf-8') if sys.version_info[0] == 2 else self.text_UnlockSkillSlot)
            oprot.writeFieldEnd()
        if self.text_RestoreAccount is not None:
            oprot.writeFieldBegin('text_RestoreAccount', TType.STRING, 185)
            oprot.writeString(self.text_RestoreAccount.encode('utf-8') if sys.version_info[0] == 2 else self.text_RestoreAccount)
            oprot.writeFieldEnd()
        if self.text_SkillSlotUnlocked is not None:
            oprot.writeFieldBegin('text_SkillSlotUnlocked', TType.STRING, 186)
            oprot.writeString(self.text_SkillSlotUnlocked.encode('utf-8') if sys.version_info[0] == 2 else self.text_SkillSlotUnlocked)
            oprot.writeFieldEnd()
        if self.text_ServerError is not None:
            oprot.writeFieldBegin('text_ServerError', TType.STRING, 187)
            oprot.writeString(self.text_ServerError.encode('utf-8') if sys.version_info[0] == 2 else self.text_ServerError)
            oprot.writeFieldEnd()
        if self.text_Credits is not None:
            oprot.writeFieldBegin('text_Credits', TType.STRING, 191)
            oprot.writeString(self.text_Credits.encode('utf-8') if sys.version_info[0] == 2 else self.text_Credits)
            oprot.writeFieldEnd()
        if self.text_CreditsTitle is not None:
            oprot.writeFieldBegin('text_CreditsTitle', TType.STRING, 192)
            oprot.writeString(self.text_CreditsTitle.encode('utf-8') if sys.version_info[0] == 2 else self.text_CreditsTitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LocalizedStringEntry(object):
    """
    Attributes:
     - localizedStringEntryId
     - value

    """


    def __init__(self, localizedStringEntryId=None, value=None,):
        self.localizedStringEntryId = localizedStringEntryId
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.localizedStringEntryId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LocalizedStringEntry')
        if self.localizedStringEntryId is not None:
            oprot.writeFieldBegin('localizedStringEntryId', TType.STRING, 1)
            oprot.writeString(self.localizedStringEntryId.encode('utf-8') if sys.version_info[0] == 2 else self.localizedStringEntryId)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.localizedStringEntryId is None:
            raise TProtocolException(message='Required field localizedStringEntryId is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroSummon(object):
    """
    Attributes:
     - heroSummonId
     - minHeroes
     - maxHeroes
     - weightCommon
     - weightUncommon
     - weightRare
     - weightEpic
     - weightLegendary
     - affinityId
     - tokenCurrencyId
     - overrideHeroSummonId
     - overridePurchaseCount
     - heroSummonOverrides
     - setUserAffinity
     - guaranteedHeroIds
     - autoAddToTeam
     - matchUserAffinity

    """


    def __init__(self, heroSummonId=None, minHeroes=None, maxHeroes=None, weightCommon=None, weightUncommon=None, weightRare=None, weightEpic=None, weightLegendary=None, affinityId=None, tokenCurrencyId=None, overrideHeroSummonId=None, overridePurchaseCount=None, heroSummonOverrides=None, setUserAffinity=None, guaranteedHeroIds=None, autoAddToTeam=None, matchUserAffinity=None,):
        self.heroSummonId = heroSummonId
        self.minHeroes = minHeroes
        self.maxHeroes = maxHeroes
        self.weightCommon = weightCommon
        self.weightUncommon = weightUncommon
        self.weightRare = weightRare
        self.weightEpic = weightEpic
        self.weightLegendary = weightLegendary
        self.affinityId = affinityId
        self.tokenCurrencyId = tokenCurrencyId
        self.overrideHeroSummonId = overrideHeroSummonId
        self.overridePurchaseCount = overridePurchaseCount
        self.heroSummonOverrides = heroSummonOverrides
        self.setUserAffinity = setUserAffinity
        self.guaranteedHeroIds = guaranteedHeroIds
        self.autoAddToTeam = autoAddToTeam
        self.matchUserAffinity = matchUserAffinity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.heroSummonId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.minHeroes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.maxHeroes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.weightCommon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.weightUncommon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.weightRare = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.weightEpic = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.weightLegendary = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.affinityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.tokenCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.overrideHeroSummonId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.overridePurchaseCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.heroSummonOverrides = {}
                    (_ktype36, _vtype37, _size35) = iprot.readMapBegin()
                    for _i39 in range(_size35):
                        _key40 = iprot.readI32()
                        _val41 = HeroSummon()
                        _val41.read(iprot)
                        self.heroSummonOverrides[_key40] = _val41
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.setUserAffinity = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.guaranteedHeroIds = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.guaranteedHeroIds.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.autoAddToTeam = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.matchUserAffinity = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroSummon')
        if self.heroSummonId is not None:
            oprot.writeFieldBegin('heroSummonId', TType.STRING, 1)
            oprot.writeString(self.heroSummonId.encode('utf-8') if sys.version_info[0] == 2 else self.heroSummonId)
            oprot.writeFieldEnd()
        if self.minHeroes is not None:
            oprot.writeFieldBegin('minHeroes', TType.I32, 3)
            oprot.writeI32(self.minHeroes)
            oprot.writeFieldEnd()
        if self.maxHeroes is not None:
            oprot.writeFieldBegin('maxHeroes', TType.I32, 4)
            oprot.writeI32(self.maxHeroes)
            oprot.writeFieldEnd()
        if self.weightCommon is not None:
            oprot.writeFieldBegin('weightCommon', TType.I32, 5)
            oprot.writeI32(self.weightCommon)
            oprot.writeFieldEnd()
        if self.weightUncommon is not None:
            oprot.writeFieldBegin('weightUncommon', TType.I32, 6)
            oprot.writeI32(self.weightUncommon)
            oprot.writeFieldEnd()
        if self.weightRare is not None:
            oprot.writeFieldBegin('weightRare', TType.I32, 7)
            oprot.writeI32(self.weightRare)
            oprot.writeFieldEnd()
        if self.weightEpic is not None:
            oprot.writeFieldBegin('weightEpic', TType.I32, 8)
            oprot.writeI32(self.weightEpic)
            oprot.writeFieldEnd()
        if self.weightLegendary is not None:
            oprot.writeFieldBegin('weightLegendary', TType.I32, 9)
            oprot.writeI32(self.weightLegendary)
            oprot.writeFieldEnd()
        if self.affinityId is not None:
            oprot.writeFieldBegin('affinityId', TType.I32, 10)
            oprot.writeI32(self.affinityId)
            oprot.writeFieldEnd()
        if self.tokenCurrencyId is not None:
            oprot.writeFieldBegin('tokenCurrencyId', TType.STRING, 11)
            oprot.writeString(self.tokenCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.tokenCurrencyId)
            oprot.writeFieldEnd()
        if self.overrideHeroSummonId is not None:
            oprot.writeFieldBegin('overrideHeroSummonId', TType.STRING, 12)
            oprot.writeString(self.overrideHeroSummonId.encode('utf-8') if sys.version_info[0] == 2 else self.overrideHeroSummonId)
            oprot.writeFieldEnd()
        if self.overridePurchaseCount is not None:
            oprot.writeFieldBegin('overridePurchaseCount', TType.I32, 13)
            oprot.writeI32(self.overridePurchaseCount)
            oprot.writeFieldEnd()
        if self.heroSummonOverrides is not None:
            oprot.writeFieldBegin('heroSummonOverrides', TType.MAP, 14)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.heroSummonOverrides))
            for kiter48, viter49 in self.heroSummonOverrides.items():
                oprot.writeI32(kiter48)
                viter49.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.setUserAffinity is not None:
            oprot.writeFieldBegin('setUserAffinity', TType.BOOL, 15)
            oprot.writeBool(self.setUserAffinity)
            oprot.writeFieldEnd()
        if self.guaranteedHeroIds is not None:
            oprot.writeFieldBegin('guaranteedHeroIds', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.guaranteedHeroIds))
            for iter50 in self.guaranteedHeroIds:
                oprot.writeString(iter50.encode('utf-8') if sys.version_info[0] == 2 else iter50)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.autoAddToTeam is not None:
            oprot.writeFieldBegin('autoAddToTeam', TType.BOOL, 17)
            oprot.writeBool(self.autoAddToTeam)
            oprot.writeFieldEnd()
        if self.matchUserAffinity is not None:
            oprot.writeFieldBegin('matchUserAffinity', TType.BOOL, 18)
            oprot.writeBool(self.matchUserAffinity)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroSummonId is None:
            raise TProtocolException(message='Required field heroSummonId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Skill(object):
    """
    Attributes:
     - skillId
     - display
     - skillTypeId
     - hintSkillStatProfileId
     - description
     - iconImagePath
     - whenToShootId
     - predelaySeconds
     - heroSkillIconId
     - maxBadEnergy

    """


    def __init__(self, skillId=None, display=None, skillTypeId=None, hintSkillStatProfileId=None, description=None, iconImagePath=None, whenToShootId=None, predelaySeconds=None, heroSkillIconId=None, maxBadEnergy=None,):
        self.skillId = skillId
        self.display = display
        self.skillTypeId = skillTypeId
        self.hintSkillStatProfileId = hintSkillStatProfileId
        self.description = description
        self.iconImagePath = iconImagePath
        self.whenToShootId = whenToShootId
        self.predelaySeconds = predelaySeconds
        self.heroSkillIconId = heroSkillIconId
        self.maxBadEnergy = maxBadEnergy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.skillId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.skillTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hintSkillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.iconImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.whenToShootId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.predelaySeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.heroSkillIconId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.maxBadEnergy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Skill')
        if self.skillId is not None:
            oprot.writeFieldBegin('skillId', TType.STRING, 1)
            oprot.writeString(self.skillId.encode('utf-8') if sys.version_info[0] == 2 else self.skillId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.skillTypeId is not None:
            oprot.writeFieldBegin('skillTypeId', TType.I32, 4)
            oprot.writeI32(self.skillTypeId)
            oprot.writeFieldEnd()
        if self.hintSkillStatProfileId is not None:
            oprot.writeFieldBegin('hintSkillStatProfileId', TType.STRING, 5)
            oprot.writeString(self.hintSkillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.hintSkillStatProfileId)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 6)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.iconImagePath is not None:
            oprot.writeFieldBegin('iconImagePath', TType.STRING, 7)
            oprot.writeString(self.iconImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.iconImagePath)
            oprot.writeFieldEnd()
        if self.whenToShootId is not None:
            oprot.writeFieldBegin('whenToShootId', TType.I32, 8)
            oprot.writeI32(self.whenToShootId)
            oprot.writeFieldEnd()
        if self.predelaySeconds is not None:
            oprot.writeFieldBegin('predelaySeconds', TType.DOUBLE, 10)
            oprot.writeDouble(self.predelaySeconds)
            oprot.writeFieldEnd()
        if self.heroSkillIconId is not None:
            oprot.writeFieldBegin('heroSkillIconId', TType.STRING, 11)
            oprot.writeString(self.heroSkillIconId.encode('utf-8') if sys.version_info[0] == 2 else self.heroSkillIconId)
            oprot.writeFieldEnd()
        if self.maxBadEnergy is not None:
            oprot.writeFieldBegin('maxBadEnergy', TType.DOUBLE, 12)
            oprot.writeDouble(self.maxBadEnergy)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.skillId is None:
            raise TProtocolException(message='Required field skillId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.skillTypeId is None:
            raise TProtocolException(message='Required field skillTypeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroSkillIcon(object):
    """
    Attributes:
     - heroSkillIconId
     - prefabPath
     - iconPath
     - iconDisabledPath

    """


    def __init__(self, heroSkillIconId=None, prefabPath=None, iconPath=None, iconDisabledPath=None,):
        self.heroSkillIconId = heroSkillIconId
        self.prefabPath = prefabPath
        self.iconPath = iconPath
        self.iconDisabledPath = iconDisabledPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.heroSkillIconId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.iconPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.iconDisabledPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroSkillIcon')
        if self.heroSkillIconId is not None:
            oprot.writeFieldBegin('heroSkillIconId', TType.STRING, 1)
            oprot.writeString(self.heroSkillIconId.encode('utf-8') if sys.version_info[0] == 2 else self.heroSkillIconId)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 2)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.iconPath is not None:
            oprot.writeFieldBegin('iconPath', TType.STRING, 3)
            oprot.writeString(self.iconPath.encode('utf-8') if sys.version_info[0] == 2 else self.iconPath)
            oprot.writeFieldEnd()
        if self.iconDisabledPath is not None:
            oprot.writeFieldBegin('iconDisabledPath', TType.STRING, 4)
            oprot.writeString(self.iconDisabledPath.encode('utf-8') if sys.version_info[0] == 2 else self.iconDisabledPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroSkillIconId is None:
            raise TProtocolException(message='Required field heroSkillIconId is unset!')
        if self.prefabPath is None:
            raise TProtocolException(message='Required field prefabPath is unset!')
        if self.iconPath is None:
            raise TProtocolException(message='Required field iconPath is unset!')
        if self.iconDisabledPath is None:
            raise TProtocolException(message='Required field iconDisabledPath is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SkillStatProfile(object):
    """
    Attributes:
     - skillStatProfileId
     - skillStatProfileEntries

    """


    def __init__(self, skillStatProfileId=None, skillStatProfileEntries=None,):
        self.skillStatProfileId = skillStatProfileId
        self.skillStatProfileEntries = skillStatProfileEntries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.skillStatProfileEntries = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = SkillStatProfileEntry()
                        _elem56.read(iprot)
                        self.skillStatProfileEntries.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SkillStatProfile')
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 1)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.skillStatProfileEntries is not None:
            oprot.writeFieldBegin('skillStatProfileEntries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.skillStatProfileEntries))
            for iter57 in self.skillStatProfileEntries:
                iter57.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.skillStatProfileId is None:
            raise TProtocolException(message='Required field skillStatProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SkillStatProfileEntry(object):
    """
    Attributes:
     - skillStatProfileId
     - heroStatId
     - inflectLevelNum
     - baseValue
     - maxValue
     - inflectValue
     - durationId
     - modTypeId

    """


    def __init__(self, skillStatProfileId=None, heroStatId=None, inflectLevelNum=None, baseValue=None, maxValue=None, inflectValue=None, durationId=None, modTypeId=None,):
        self.skillStatProfileId = skillStatProfileId
        self.heroStatId = heroStatId
        self.inflectLevelNum = inflectLevelNum
        self.baseValue = baseValue
        self.maxValue = maxValue
        self.inflectValue = inflectValue
        self.durationId = durationId
        self.modTypeId = modTypeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.heroStatId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.inflectLevelNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.baseValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.maxValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.inflectValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.durationId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.modTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SkillStatProfileEntry')
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 1)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.heroStatId is not None:
            oprot.writeFieldBegin('heroStatId', TType.I32, 2)
            oprot.writeI32(self.heroStatId)
            oprot.writeFieldEnd()
        if self.inflectLevelNum is not None:
            oprot.writeFieldBegin('inflectLevelNum', TType.I32, 3)
            oprot.writeI32(self.inflectLevelNum)
            oprot.writeFieldEnd()
        if self.baseValue is not None:
            oprot.writeFieldBegin('baseValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.baseValue)
            oprot.writeFieldEnd()
        if self.maxValue is not None:
            oprot.writeFieldBegin('maxValue', TType.DOUBLE, 5)
            oprot.writeDouble(self.maxValue)
            oprot.writeFieldEnd()
        if self.inflectValue is not None:
            oprot.writeFieldBegin('inflectValue', TType.DOUBLE, 6)
            oprot.writeDouble(self.inflectValue)
            oprot.writeFieldEnd()
        if self.durationId is not None:
            oprot.writeFieldBegin('durationId', TType.I32, 7)
            oprot.writeI32(self.durationId)
            oprot.writeFieldEnd()
        if self.modTypeId is not None:
            oprot.writeFieldBegin('modTypeId', TType.I32, 8)
            oprot.writeI32(self.modTypeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.skillStatProfileId is None:
            raise TProtocolException(message='Required field skillStatProfileId is unset!')
        if self.heroStatId is None:
            raise TProtocolException(message='Required field heroStatId is unset!')
        if self.inflectLevelNum is None:
            raise TProtocolException(message='Required field inflectLevelNum is unset!')
        if self.baseValue is None:
            raise TProtocolException(message='Required field baseValue is unset!')
        if self.maxValue is None:
            raise TProtocolException(message='Required field maxValue is unset!')
        if self.inflectValue is None:
            raise TProtocolException(message='Required field inflectValue is unset!')
        if self.durationId is None:
            raise TProtocolException(message='Required field durationId is unset!')
        if self.modTypeId is None:
            raise TProtocolException(message='Required field modTypeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StrengthProfile(object):
    """
    Attributes:
     - strengthProfileId
     - baseHealth
     - baseDamage
     - baseSpeed
     - baseRest
     - maxHealth
     - maxDamage
     - maxSpeed
     - maxRest
     - baseMass
     - maxMass
     - baseDrag
     - maxDrag
     - speedInflectLevelNum
     - inflectSpeed
     - healthInflectLevelNum
     - inflectHealth
     - damageInflectLevelNum
     - inflectDamage
     - basePhysicalAttack
     - maxPhysicalAttack
     - basePhysicalDefense
     - maxPhysicalDefense
     - baseMagicAttack
     - maxMagicAttack
     - baseMagicDefense
     - maxMagicDefense

    """


    def __init__(self, strengthProfileId=None, baseHealth=None, baseDamage=None, baseSpeed=None, baseRest=None, maxHealth=None, maxDamage=None, maxSpeed=None, maxRest=None, baseMass=None, maxMass=None, baseDrag=None, maxDrag=None, speedInflectLevelNum=None, inflectSpeed=None, healthInflectLevelNum=None, inflectHealth=None, damageInflectLevelNum=None, inflectDamage=None, basePhysicalAttack=None, maxPhysicalAttack=None, basePhysicalDefense=None, maxPhysicalDefense=None, baseMagicAttack=None, maxMagicAttack=None, baseMagicDefense=None, maxMagicDefense=None,):
        self.strengthProfileId = strengthProfileId
        self.baseHealth = baseHealth
        self.baseDamage = baseDamage
        self.baseSpeed = baseSpeed
        self.baseRest = baseRest
        self.maxHealth = maxHealth
        self.maxDamage = maxDamage
        self.maxSpeed = maxSpeed
        self.maxRest = maxRest
        self.baseMass = baseMass
        self.maxMass = maxMass
        self.baseDrag = baseDrag
        self.maxDrag = maxDrag
        self.speedInflectLevelNum = speedInflectLevelNum
        self.inflectSpeed = inflectSpeed
        self.healthInflectLevelNum = healthInflectLevelNum
        self.inflectHealth = inflectHealth
        self.damageInflectLevelNum = damageInflectLevelNum
        self.inflectDamage = inflectDamage
        self.basePhysicalAttack = basePhysicalAttack
        self.maxPhysicalAttack = maxPhysicalAttack
        self.basePhysicalDefense = basePhysicalDefense
        self.maxPhysicalDefense = maxPhysicalDefense
        self.baseMagicAttack = baseMagicAttack
        self.maxMagicAttack = maxMagicAttack
        self.baseMagicDefense = baseMagicDefense
        self.maxMagicDefense = maxMagicDefense

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.strengthProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.baseHealth = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = iprot.readI32()
                        self.baseHealth.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.baseDamage = []
                    (_etype67, _size64) = iprot.readListBegin()
                    for _i68 in range(_size64):
                        _elem69 = iprot.readI32()
                        self.baseDamage.append(_elem69)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.baseSpeed = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readI32()
                        self.baseSpeed.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.baseRest = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = iprot.readI32()
                        self.baseRest.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.maxHealth = []
                    (_etype85, _size82) = iprot.readListBegin()
                    for _i86 in range(_size82):
                        _elem87 = iprot.readI32()
                        self.maxHealth.append(_elem87)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.maxDamage = []
                    (_etype91, _size88) = iprot.readListBegin()
                    for _i92 in range(_size88):
                        _elem93 = iprot.readI32()
                        self.maxDamage.append(_elem93)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.maxSpeed = []
                    (_etype97, _size94) = iprot.readListBegin()
                    for _i98 in range(_size94):
                        _elem99 = iprot.readI32()
                        self.maxSpeed.append(_elem99)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.maxRest = []
                    (_etype103, _size100) = iprot.readListBegin()
                    for _i104 in range(_size100):
                        _elem105 = iprot.readI32()
                        self.maxRest.append(_elem105)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.baseMass = []
                    (_etype109, _size106) = iprot.readListBegin()
                    for _i110 in range(_size106):
                        _elem111 = iprot.readI32()
                        self.baseMass.append(_elem111)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.maxMass = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = iprot.readI32()
                        self.maxMass.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.baseDrag = []
                    (_etype121, _size118) = iprot.readListBegin()
                    for _i122 in range(_size118):
                        _elem123 = iprot.readI32()
                        self.baseDrag.append(_elem123)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.maxDrag = []
                    (_etype127, _size124) = iprot.readListBegin()
                    for _i128 in range(_size124):
                        _elem129 = iprot.readI32()
                        self.maxDrag.append(_elem129)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.speedInflectLevelNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.LIST:
                    self.inflectSpeed = []
                    (_etype133, _size130) = iprot.readListBegin()
                    for _i134 in range(_size130):
                        _elem135 = iprot.readI32()
                        self.inflectSpeed.append(_elem135)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.healthInflectLevelNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.inflectHealth = []
                    (_etype139, _size136) = iprot.readListBegin()
                    for _i140 in range(_size136):
                        _elem141 = iprot.readI32()
                        self.inflectHealth.append(_elem141)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.damageInflectLevelNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.LIST:
                    self.inflectDamage = []
                    (_etype145, _size142) = iprot.readListBegin()
                    for _i146 in range(_size142):
                        _elem147 = iprot.readI32()
                        self.inflectDamage.append(_elem147)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.LIST:
                    self.basePhysicalAttack = []
                    (_etype151, _size148) = iprot.readListBegin()
                    for _i152 in range(_size148):
                        _elem153 = iprot.readI32()
                        self.basePhysicalAttack.append(_elem153)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.LIST:
                    self.maxPhysicalAttack = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = iprot.readI32()
                        self.maxPhysicalAttack.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.LIST:
                    self.basePhysicalDefense = []
                    (_etype163, _size160) = iprot.readListBegin()
                    for _i164 in range(_size160):
                        _elem165 = iprot.readI32()
                        self.basePhysicalDefense.append(_elem165)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.LIST:
                    self.maxPhysicalDefense = []
                    (_etype169, _size166) = iprot.readListBegin()
                    for _i170 in range(_size166):
                        _elem171 = iprot.readI32()
                        self.maxPhysicalDefense.append(_elem171)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.LIST:
                    self.baseMagicAttack = []
                    (_etype175, _size172) = iprot.readListBegin()
                    for _i176 in range(_size172):
                        _elem177 = iprot.readI32()
                        self.baseMagicAttack.append(_elem177)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.maxMagicAttack = []
                    (_etype181, _size178) = iprot.readListBegin()
                    for _i182 in range(_size178):
                        _elem183 = iprot.readI32()
                        self.maxMagicAttack.append(_elem183)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.LIST:
                    self.baseMagicDefense = []
                    (_etype187, _size184) = iprot.readListBegin()
                    for _i188 in range(_size184):
                        _elem189 = iprot.readI32()
                        self.baseMagicDefense.append(_elem189)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.LIST:
                    self.maxMagicDefense = []
                    (_etype193, _size190) = iprot.readListBegin()
                    for _i194 in range(_size190):
                        _elem195 = iprot.readI32()
                        self.maxMagicDefense.append(_elem195)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StrengthProfile')
        if self.strengthProfileId is not None:
            oprot.writeFieldBegin('strengthProfileId', TType.STRING, 1)
            oprot.writeString(self.strengthProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.strengthProfileId)
            oprot.writeFieldEnd()
        if self.baseHealth is not None:
            oprot.writeFieldBegin('baseHealth', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.baseHealth))
            for iter196 in self.baseHealth:
                oprot.writeI32(iter196)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseDamage is not None:
            oprot.writeFieldBegin('baseDamage', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.baseDamage))
            for iter197 in self.baseDamage:
                oprot.writeI32(iter197)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseSpeed is not None:
            oprot.writeFieldBegin('baseSpeed', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.baseSpeed))
            for iter198 in self.baseSpeed:
                oprot.writeI32(iter198)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseRest is not None:
            oprot.writeFieldBegin('baseRest', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.baseRest))
            for iter199 in self.baseRest:
                oprot.writeI32(iter199)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxHealth is not None:
            oprot.writeFieldBegin('maxHealth', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.maxHealth))
            for iter200 in self.maxHealth:
                oprot.writeI32(iter200)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxDamage is not None:
            oprot.writeFieldBegin('maxDamage', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.maxDamage))
            for iter201 in self.maxDamage:
                oprot.writeI32(iter201)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxSpeed is not None:
            oprot.writeFieldBegin('maxSpeed', TType.LIST, 10)
            oprot.writeListBegin(TType.I32, len(self.maxSpeed))
            for iter202 in self.maxSpeed:
                oprot.writeI32(iter202)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxRest is not None:
            oprot.writeFieldBegin('maxRest', TType.LIST, 11)
            oprot.writeListBegin(TType.I32, len(self.maxRest))
            for iter203 in self.maxRest:
                oprot.writeI32(iter203)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseMass is not None:
            oprot.writeFieldBegin('baseMass', TType.LIST, 12)
            oprot.writeListBegin(TType.I32, len(self.baseMass))
            for iter204 in self.baseMass:
                oprot.writeI32(iter204)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxMass is not None:
            oprot.writeFieldBegin('maxMass', TType.LIST, 13)
            oprot.writeListBegin(TType.I32, len(self.maxMass))
            for iter205 in self.maxMass:
                oprot.writeI32(iter205)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseDrag is not None:
            oprot.writeFieldBegin('baseDrag', TType.LIST, 14)
            oprot.writeListBegin(TType.I32, len(self.baseDrag))
            for iter206 in self.baseDrag:
                oprot.writeI32(iter206)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxDrag is not None:
            oprot.writeFieldBegin('maxDrag', TType.LIST, 15)
            oprot.writeListBegin(TType.I32, len(self.maxDrag))
            for iter207 in self.maxDrag:
                oprot.writeI32(iter207)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.speedInflectLevelNum is not None:
            oprot.writeFieldBegin('speedInflectLevelNum', TType.I32, 18)
            oprot.writeI32(self.speedInflectLevelNum)
            oprot.writeFieldEnd()
        if self.inflectSpeed is not None:
            oprot.writeFieldBegin('inflectSpeed', TType.LIST, 19)
            oprot.writeListBegin(TType.I32, len(self.inflectSpeed))
            for iter208 in self.inflectSpeed:
                oprot.writeI32(iter208)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.healthInflectLevelNum is not None:
            oprot.writeFieldBegin('healthInflectLevelNum', TType.I32, 20)
            oprot.writeI32(self.healthInflectLevelNum)
            oprot.writeFieldEnd()
        if self.inflectHealth is not None:
            oprot.writeFieldBegin('inflectHealth', TType.LIST, 21)
            oprot.writeListBegin(TType.I32, len(self.inflectHealth))
            for iter209 in self.inflectHealth:
                oprot.writeI32(iter209)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.damageInflectLevelNum is not None:
            oprot.writeFieldBegin('damageInflectLevelNum', TType.I32, 24)
            oprot.writeI32(self.damageInflectLevelNum)
            oprot.writeFieldEnd()
        if self.inflectDamage is not None:
            oprot.writeFieldBegin('inflectDamage', TType.LIST, 25)
            oprot.writeListBegin(TType.I32, len(self.inflectDamage))
            for iter210 in self.inflectDamage:
                oprot.writeI32(iter210)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.basePhysicalAttack is not None:
            oprot.writeFieldBegin('basePhysicalAttack', TType.LIST, 26)
            oprot.writeListBegin(TType.I32, len(self.basePhysicalAttack))
            for iter211 in self.basePhysicalAttack:
                oprot.writeI32(iter211)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxPhysicalAttack is not None:
            oprot.writeFieldBegin('maxPhysicalAttack', TType.LIST, 27)
            oprot.writeListBegin(TType.I32, len(self.maxPhysicalAttack))
            for iter212 in self.maxPhysicalAttack:
                oprot.writeI32(iter212)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.basePhysicalDefense is not None:
            oprot.writeFieldBegin('basePhysicalDefense', TType.LIST, 28)
            oprot.writeListBegin(TType.I32, len(self.basePhysicalDefense))
            for iter213 in self.basePhysicalDefense:
                oprot.writeI32(iter213)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxPhysicalDefense is not None:
            oprot.writeFieldBegin('maxPhysicalDefense', TType.LIST, 29)
            oprot.writeListBegin(TType.I32, len(self.maxPhysicalDefense))
            for iter214 in self.maxPhysicalDefense:
                oprot.writeI32(iter214)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseMagicAttack is not None:
            oprot.writeFieldBegin('baseMagicAttack', TType.LIST, 30)
            oprot.writeListBegin(TType.I32, len(self.baseMagicAttack))
            for iter215 in self.baseMagicAttack:
                oprot.writeI32(iter215)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxMagicAttack is not None:
            oprot.writeFieldBegin('maxMagicAttack', TType.LIST, 31)
            oprot.writeListBegin(TType.I32, len(self.maxMagicAttack))
            for iter216 in self.maxMagicAttack:
                oprot.writeI32(iter216)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseMagicDefense is not None:
            oprot.writeFieldBegin('baseMagicDefense', TType.LIST, 32)
            oprot.writeListBegin(TType.I32, len(self.baseMagicDefense))
            for iter217 in self.baseMagicDefense:
                oprot.writeI32(iter217)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.maxMagicDefense is not None:
            oprot.writeFieldBegin('maxMagicDefense', TType.LIST, 33)
            oprot.writeListBegin(TType.I32, len(self.maxMagicDefense))
            for iter218 in self.maxMagicDefense:
                oprot.writeI32(iter218)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.strengthProfileId is None:
            raise TProtocolException(message='Required field strengthProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PhysicsProfile(object):
    """
    Attributes:
     - physicsProfileId
     - reactDurationSeconds
     - reactTranslate
     - reactTranslateHz
     - reactTranslateSeconds
     - shakeFrequency
     - shakeBodyRotation
     - shakeBoneShear
     - shakeBoneScaleX
     - shakeBoneScaleY
     - shakePositionX
     - shakePositionY
     - shakeBonePositionX
     - shakeBonePositionY
     - shakeBoneRotation

    """


    def __init__(self, physicsProfileId=None, reactDurationSeconds=None, reactTranslate=None, reactTranslateHz=None, reactTranslateSeconds=None, shakeFrequency=None, shakeBodyRotation=None, shakeBoneShear=None, shakeBoneScaleX=None, shakeBoneScaleY=None, shakePositionX=None, shakePositionY=None, shakeBonePositionX=None, shakeBonePositionY=None, shakeBoneRotation=None,):
        self.physicsProfileId = physicsProfileId
        self.reactDurationSeconds = reactDurationSeconds
        self.reactTranslate = reactTranslate
        self.reactTranslateHz = reactTranslateHz
        self.reactTranslateSeconds = reactTranslateSeconds
        self.shakeFrequency = shakeFrequency
        self.shakeBodyRotation = shakeBodyRotation
        self.shakeBoneShear = shakeBoneShear
        self.shakeBoneScaleX = shakeBoneScaleX
        self.shakeBoneScaleY = shakeBoneScaleY
        self.shakePositionX = shakePositionX
        self.shakePositionY = shakePositionY
        self.shakeBonePositionX = shakeBonePositionX
        self.shakeBonePositionY = shakeBonePositionY
        self.shakeBoneRotation = shakeBoneRotation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.physicsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.reactDurationSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.reactTranslate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.reactTranslateHz = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.reactTranslateSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.shakeFrequency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.shakeBodyRotation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.shakeBoneShear = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.shakeBoneScaleX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.shakeBoneScaleY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.shakePositionX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.shakePositionY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.shakeBonePositionX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.shakeBonePositionY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.shakeBoneRotation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PhysicsProfile')
        if self.physicsProfileId is not None:
            oprot.writeFieldBegin('physicsProfileId', TType.STRING, 1)
            oprot.writeString(self.physicsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.physicsProfileId)
            oprot.writeFieldEnd()
        if self.reactDurationSeconds is not None:
            oprot.writeFieldBegin('reactDurationSeconds', TType.DOUBLE, 2)
            oprot.writeDouble(self.reactDurationSeconds)
            oprot.writeFieldEnd()
        if self.reactTranslate is not None:
            oprot.writeFieldBegin('reactTranslate', TType.DOUBLE, 3)
            oprot.writeDouble(self.reactTranslate)
            oprot.writeFieldEnd()
        if self.reactTranslateHz is not None:
            oprot.writeFieldBegin('reactTranslateHz', TType.DOUBLE, 4)
            oprot.writeDouble(self.reactTranslateHz)
            oprot.writeFieldEnd()
        if self.reactTranslateSeconds is not None:
            oprot.writeFieldBegin('reactTranslateSeconds', TType.DOUBLE, 5)
            oprot.writeDouble(self.reactTranslateSeconds)
            oprot.writeFieldEnd()
        if self.shakeFrequency is not None:
            oprot.writeFieldBegin('shakeFrequency', TType.DOUBLE, 7)
            oprot.writeDouble(self.shakeFrequency)
            oprot.writeFieldEnd()
        if self.shakeBodyRotation is not None:
            oprot.writeFieldBegin('shakeBodyRotation', TType.DOUBLE, 8)
            oprot.writeDouble(self.shakeBodyRotation)
            oprot.writeFieldEnd()
        if self.shakeBoneShear is not None:
            oprot.writeFieldBegin('shakeBoneShear', TType.DOUBLE, 9)
            oprot.writeDouble(self.shakeBoneShear)
            oprot.writeFieldEnd()
        if self.shakeBoneScaleX is not None:
            oprot.writeFieldBegin('shakeBoneScaleX', TType.DOUBLE, 10)
            oprot.writeDouble(self.shakeBoneScaleX)
            oprot.writeFieldEnd()
        if self.shakeBoneScaleY is not None:
            oprot.writeFieldBegin('shakeBoneScaleY', TType.DOUBLE, 11)
            oprot.writeDouble(self.shakeBoneScaleY)
            oprot.writeFieldEnd()
        if self.shakePositionX is not None:
            oprot.writeFieldBegin('shakePositionX', TType.DOUBLE, 12)
            oprot.writeDouble(self.shakePositionX)
            oprot.writeFieldEnd()
        if self.shakePositionY is not None:
            oprot.writeFieldBegin('shakePositionY', TType.DOUBLE, 13)
            oprot.writeDouble(self.shakePositionY)
            oprot.writeFieldEnd()
        if self.shakeBonePositionX is not None:
            oprot.writeFieldBegin('shakeBonePositionX', TType.DOUBLE, 14)
            oprot.writeDouble(self.shakeBonePositionX)
            oprot.writeFieldEnd()
        if self.shakeBonePositionY is not None:
            oprot.writeFieldBegin('shakeBonePositionY', TType.DOUBLE, 15)
            oprot.writeDouble(self.shakeBonePositionY)
            oprot.writeFieldEnd()
        if self.shakeBoneRotation is not None:
            oprot.writeFieldBegin('shakeBoneRotation', TType.DOUBLE, 16)
            oprot.writeDouble(self.shakeBoneRotation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.physicsProfileId is None:
            raise TProtocolException(message='Required field physicsProfileId is unset!')
        if self.reactDurationSeconds is None:
            raise TProtocolException(message='Required field reactDurationSeconds is unset!')
        if self.shakeFrequency is None:
            raise TProtocolException(message='Required field shakeFrequency is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnimationProfile(object):
    """
    Attributes:
     - animationProfileId
     - eyeSpeed

    """


    def __init__(self, animationProfileId=None, eyeSpeed=None,):
        self.animationProfileId = animationProfileId
        self.eyeSpeed = eyeSpeed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.animationProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.eyeSpeed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AnimationProfile')
        if self.animationProfileId is not None:
            oprot.writeFieldBegin('animationProfileId', TType.STRING, 1)
            oprot.writeString(self.animationProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.animationProfileId)
            oprot.writeFieldEnd()
        if self.eyeSpeed is not None:
            oprot.writeFieldBegin('eyeSpeed', TType.DOUBLE, 2)
            oprot.writeDouble(self.eyeSpeed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.animationProfileId is None:
            raise TProtocolException(message='Required field animationProfileId is unset!')
        if self.eyeSpeed is None:
            raise TProtocolException(message='Required field eyeSpeed is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Gender(object):
    """
    Attributes:
     - genderId
     - display

    """


    def __init__(self, genderId=None, display=None,):
        self.genderId = genderId
        self.display = display

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.genderId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Gender')
        if self.genderId is not None:
            oprot.writeFieldBegin('genderId', TType.I32, 1)
            oprot.writeI32(self.genderId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.genderId is None:
            raise TProtocolException(message='Required field genderId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EffectList(object):
    """
    Attributes:
     - effectListId
     - effectListEntries

    """


    def __init__(self, effectListId=None, effectListEntries=None,):
        self.effectListId = effectListId
        self.effectListEntries = effectListEntries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.effectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.effectListEntries = []
                    (_etype222, _size219) = iprot.readListBegin()
                    for _i223 in range(_size219):
                        _elem224 = EffectListEntry()
                        _elem224.read(iprot)
                        self.effectListEntries.append(_elem224)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EffectList')
        if self.effectListId is not None:
            oprot.writeFieldBegin('effectListId', TType.STRING, 1)
            oprot.writeString(self.effectListId.encode('utf-8') if sys.version_info[0] == 2 else self.effectListId)
            oprot.writeFieldEnd()
        if self.effectListEntries is not None:
            oprot.writeFieldBegin('effectListEntries', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.effectListEntries))
            for iter225 in self.effectListEntries:
                iter225.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.effectListId is None:
            raise TProtocolException(message='Required field effectListId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EffectListEntry(object):
    """
    Attributes:
     - effectListId
     - prefabPath
     - autoReclaim
     - poolSize
     - releaseSeconds
     - disable

    """


    def __init__(self, effectListId=None, prefabPath=None, autoReclaim=None, poolSize=None, releaseSeconds=None, disable=None,):
        self.effectListId = effectListId
        self.prefabPath = prefabPath
        self.autoReclaim = autoReclaim
        self.poolSize = poolSize
        self.releaseSeconds = releaseSeconds
        self.disable = disable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.effectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoReclaim = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.poolSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.releaseSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.disable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EffectListEntry')
        if self.effectListId is not None:
            oprot.writeFieldBegin('effectListId', TType.STRING, 1)
            oprot.writeString(self.effectListId.encode('utf-8') if sys.version_info[0] == 2 else self.effectListId)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 2)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.autoReclaim is not None:
            oprot.writeFieldBegin('autoReclaim', TType.BOOL, 3)
            oprot.writeBool(self.autoReclaim)
            oprot.writeFieldEnd()
        if self.poolSize is not None:
            oprot.writeFieldBegin('poolSize', TType.I32, 4)
            oprot.writeI32(self.poolSize)
            oprot.writeFieldEnd()
        if self.releaseSeconds is not None:
            oprot.writeFieldBegin('releaseSeconds', TType.DOUBLE, 6)
            oprot.writeDouble(self.releaseSeconds)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.BOOL, 7)
            oprot.writeBool(self.disable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.prefabPath is None:
            raise TProtocolException(message='Required field prefabPath is unset!')
        if self.autoReclaim is None:
            raise TProtocolException(message='Required field autoReclaim is unset!')
        if self.poolSize is None:
            raise TProtocolException(message='Required field poolSize is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VisualEffectsProfile(object):
    """
    Attributes:
     - visualEffectsProfileId
     - hitEnemyEffectListId
     - physicalDamageEffectListId
     - magicDamageEffectListId
     - deathEffectListId
     - energyShotZoomEffectListId
     - energyShotParticlesEffectListId
     - trailEffectListId
     - enterSceneEffectListId
     - hitWallEffectListId
     - hitTeammateEffectListId
     - hitByTeammateEffectListId
     - dramaticPauseEffectListId

    """


    def __init__(self, visualEffectsProfileId=None, hitEnemyEffectListId=None, physicalDamageEffectListId=None, magicDamageEffectListId=None, deathEffectListId=None, energyShotZoomEffectListId=None, energyShotParticlesEffectListId=None, trailEffectListId=None, enterSceneEffectListId=None, hitWallEffectListId=None, hitTeammateEffectListId=None, hitByTeammateEffectListId=None, dramaticPauseEffectListId=None,):
        self.visualEffectsProfileId = visualEffectsProfileId
        self.hitEnemyEffectListId = hitEnemyEffectListId
        self.physicalDamageEffectListId = physicalDamageEffectListId
        self.magicDamageEffectListId = magicDamageEffectListId
        self.deathEffectListId = deathEffectListId
        self.energyShotZoomEffectListId = energyShotZoomEffectListId
        self.energyShotParticlesEffectListId = energyShotParticlesEffectListId
        self.trailEffectListId = trailEffectListId
        self.enterSceneEffectListId = enterSceneEffectListId
        self.hitWallEffectListId = hitWallEffectListId
        self.hitTeammateEffectListId = hitTeammateEffectListId
        self.hitByTeammateEffectListId = hitByTeammateEffectListId
        self.dramaticPauseEffectListId = dramaticPauseEffectListId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.visualEffectsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hitEnemyEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.physicalDamageEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.magicDamageEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.deathEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.energyShotZoomEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.energyShotParticlesEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.trailEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.enterSceneEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.hitWallEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.hitTeammateEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.hitByTeammateEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.dramaticPauseEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VisualEffectsProfile')
        if self.visualEffectsProfileId is not None:
            oprot.writeFieldBegin('visualEffectsProfileId', TType.STRING, 1)
            oprot.writeString(self.visualEffectsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.visualEffectsProfileId)
            oprot.writeFieldEnd()
        if self.hitEnemyEffectListId is not None:
            oprot.writeFieldBegin('hitEnemyEffectListId', TType.STRING, 2)
            oprot.writeString(self.hitEnemyEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.hitEnemyEffectListId)
            oprot.writeFieldEnd()
        if self.physicalDamageEffectListId is not None:
            oprot.writeFieldBegin('physicalDamageEffectListId', TType.STRING, 3)
            oprot.writeString(self.physicalDamageEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.physicalDamageEffectListId)
            oprot.writeFieldEnd()
        if self.magicDamageEffectListId is not None:
            oprot.writeFieldBegin('magicDamageEffectListId', TType.STRING, 4)
            oprot.writeString(self.magicDamageEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.magicDamageEffectListId)
            oprot.writeFieldEnd()
        if self.deathEffectListId is not None:
            oprot.writeFieldBegin('deathEffectListId', TType.STRING, 5)
            oprot.writeString(self.deathEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.deathEffectListId)
            oprot.writeFieldEnd()
        if self.energyShotZoomEffectListId is not None:
            oprot.writeFieldBegin('energyShotZoomEffectListId', TType.STRING, 6)
            oprot.writeString(self.energyShotZoomEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.energyShotZoomEffectListId)
            oprot.writeFieldEnd()
        if self.energyShotParticlesEffectListId is not None:
            oprot.writeFieldBegin('energyShotParticlesEffectListId', TType.STRING, 7)
            oprot.writeString(self.energyShotParticlesEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.energyShotParticlesEffectListId)
            oprot.writeFieldEnd()
        if self.trailEffectListId is not None:
            oprot.writeFieldBegin('trailEffectListId', TType.STRING, 8)
            oprot.writeString(self.trailEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.trailEffectListId)
            oprot.writeFieldEnd()
        if self.enterSceneEffectListId is not None:
            oprot.writeFieldBegin('enterSceneEffectListId', TType.STRING, 9)
            oprot.writeString(self.enterSceneEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.enterSceneEffectListId)
            oprot.writeFieldEnd()
        if self.hitWallEffectListId is not None:
            oprot.writeFieldBegin('hitWallEffectListId', TType.STRING, 10)
            oprot.writeString(self.hitWallEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.hitWallEffectListId)
            oprot.writeFieldEnd()
        if self.hitTeammateEffectListId is not None:
            oprot.writeFieldBegin('hitTeammateEffectListId', TType.STRING, 11)
            oprot.writeString(self.hitTeammateEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.hitTeammateEffectListId)
            oprot.writeFieldEnd()
        if self.hitByTeammateEffectListId is not None:
            oprot.writeFieldBegin('hitByTeammateEffectListId', TType.STRING, 12)
            oprot.writeString(self.hitByTeammateEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.hitByTeammateEffectListId)
            oprot.writeFieldEnd()
        if self.dramaticPauseEffectListId is not None:
            oprot.writeFieldBegin('dramaticPauseEffectListId', TType.STRING, 13)
            oprot.writeString(self.dramaticPauseEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.dramaticPauseEffectListId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.visualEffectsProfileId is None:
            raise TProtocolException(message='Required field visualEffectsProfileId is unset!')
        if self.hitEnemyEffectListId is None:
            raise TProtocolException(message='Required field hitEnemyEffectListId is unset!')
        if self.physicalDamageEffectListId is None:
            raise TProtocolException(message='Required field physicalDamageEffectListId is unset!')
        if self.magicDamageEffectListId is None:
            raise TProtocolException(message='Required field magicDamageEffectListId is unset!')
        if self.deathEffectListId is None:
            raise TProtocolException(message='Required field deathEffectListId is unset!')
        if self.energyShotZoomEffectListId is None:
            raise TProtocolException(message='Required field energyShotZoomEffectListId is unset!')
        if self.energyShotParticlesEffectListId is None:
            raise TProtocolException(message='Required field energyShotParticlesEffectListId is unset!')
        if self.trailEffectListId is None:
            raise TProtocolException(message='Required field trailEffectListId is unset!')
        if self.enterSceneEffectListId is None:
            raise TProtocolException(message='Required field enterSceneEffectListId is unset!')
        if self.hitWallEffectListId is None:
            raise TProtocolException(message='Required field hitWallEffectListId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroBody(object):
    """
    Attributes:
     - heroId
     - bodyTypeId
     - heroBodyTypeId
     - display
     - rarityId
     - affinityId
     - unlockCampaignId
     - evolutionProfileId
     - genderId
     - animationProfileId
     - summary
     - description
     - drag
     - strengthProfileId
     - winAnimations
     - loseAnimations
     - bodyCirclePrefab
     - heroInfoAnimations
     - levelUpAnimations
     - heroPrefab
     - cardImage
     - bwCardImage
     - specialMoveTrigger
     - skillIds
     - enchantmentSkillSlotNum
     - bumpComboSkillSlotNum
     - energyShotSkillSlotNum
     - idleAnimations
     - visualEffectsProfileId
     - physicsProfileId
     - magicReactProfileId
     - healthBarPrefab
     - healthBarYOffset
     - heroSoundProfileId
     - physicalReactProfileId
     - skillId0
     - skillId1
     - skillId2
     - skillId3
     - movementTypeId
     - lifespanTypeId
     - skillIconHolderPrefab
     - attackAnimDelaySeconds
     - Nickname

    """


    def __init__(self, heroId=None, bodyTypeId=None, heroBodyTypeId=None, display=None, rarityId=None, affinityId=None, unlockCampaignId=None, evolutionProfileId=None, genderId=None, animationProfileId=None, summary=None, description=None, drag=None, strengthProfileId=None, winAnimations=None, loseAnimations=None, bodyCirclePrefab=None, heroInfoAnimations=None, levelUpAnimations=None, heroPrefab=None, cardImage=None, bwCardImage=None, specialMoveTrigger=None, skillIds=None, enchantmentSkillSlotNum=None, bumpComboSkillSlotNum=None, energyShotSkillSlotNum=None, idleAnimations=None, visualEffectsProfileId=None, physicsProfileId=None, magicReactProfileId=None, healthBarPrefab=None, healthBarYOffset=None, heroSoundProfileId=None, physicalReactProfileId=None, skillId0=None, skillId1=None, skillId2=None, skillId3=None, movementTypeId=None, lifespanTypeId=None, skillIconHolderPrefab=None, attackAnimDelaySeconds=None, Nickname=None,):
        self.heroId = heroId
        self.bodyTypeId = bodyTypeId
        self.heroBodyTypeId = heroBodyTypeId
        self.display = display
        self.rarityId = rarityId
        self.affinityId = affinityId
        self.unlockCampaignId = unlockCampaignId
        self.evolutionProfileId = evolutionProfileId
        self.genderId = genderId
        self.animationProfileId = animationProfileId
        self.summary = summary
        self.description = description
        self.drag = drag
        self.strengthProfileId = strengthProfileId
        self.winAnimations = winAnimations
        self.loseAnimations = loseAnimations
        self.bodyCirclePrefab = bodyCirclePrefab
        self.heroInfoAnimations = heroInfoAnimations
        self.levelUpAnimations = levelUpAnimations
        self.heroPrefab = heroPrefab
        self.cardImage = cardImage
        self.bwCardImage = bwCardImage
        self.specialMoveTrigger = specialMoveTrigger
        self.skillIds = skillIds
        self.enchantmentSkillSlotNum = enchantmentSkillSlotNum
        self.bumpComboSkillSlotNum = bumpComboSkillSlotNum
        self.energyShotSkillSlotNum = energyShotSkillSlotNum
        self.idleAnimations = idleAnimations
        self.visualEffectsProfileId = visualEffectsProfileId
        self.physicsProfileId = physicsProfileId
        self.magicReactProfileId = magicReactProfileId
        self.healthBarPrefab = healthBarPrefab
        self.healthBarYOffset = healthBarYOffset
        self.heroSoundProfileId = heroSoundProfileId
        self.physicalReactProfileId = physicalReactProfileId
        self.skillId0 = skillId0
        self.skillId1 = skillId1
        self.skillId2 = skillId2
        self.skillId3 = skillId3
        self.movementTypeId = movementTypeId
        self.lifespanTypeId = lifespanTypeId
        self.skillIconHolderPrefab = skillIconHolderPrefab
        self.attackAnimDelaySeconds = attackAnimDelaySeconds
        self.Nickname = Nickname

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.heroId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.bodyTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.heroBodyTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rarityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.affinityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.unlockCampaignId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.evolutionProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.genderId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.animationProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.summary = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.drag = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.strengthProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.winAnimations = []
                    (_etype229, _size226) = iprot.readListBegin()
                    for _i230 in range(_size226):
                        _elem231 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.winAnimations.append(_elem231)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.loseAnimations = []
                    (_etype235, _size232) = iprot.readListBegin()
                    for _i236 in range(_size232):
                        _elem237 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.loseAnimations.append(_elem237)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.bodyCirclePrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.heroInfoAnimations = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.heroInfoAnimations.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.LIST:
                    self.levelUpAnimations = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.levelUpAnimations.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.heroPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.cardImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.bwCardImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.specialMoveTrigger = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.LIST:
                    self.skillIds = []
                    (_etype253, _size250) = iprot.readListBegin()
                    for _i254 in range(_size250):
                        _elem255 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.skillIds.append(_elem255)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.enchantmentSkillSlotNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.bumpComboSkillSlotNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.energyShotSkillSlotNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.LIST:
                    self.idleAnimations = []
                    (_etype259, _size256) = iprot.readListBegin()
                    for _i260 in range(_size256):
                        _elem261 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.idleAnimations.append(_elem261)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.visualEffectsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.physicsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.magicReactProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.healthBarPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.DOUBLE:
                    self.healthBarYOffset = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.heroSoundProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.physicalReactProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.skillId0 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.skillId1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.skillId2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.skillId3 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.movementTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.lifespanTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRING:
                    self.skillIconHolderPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.DOUBLE:
                    self.attackAnimDelaySeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.STRING:
                    self.Nickname = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroBody')
        if self.heroId is not None:
            oprot.writeFieldBegin('heroId', TType.STRING, 1)
            oprot.writeString(self.heroId.encode('utf-8') if sys.version_info[0] == 2 else self.heroId)
            oprot.writeFieldEnd()
        if self.bodyTypeId is not None:
            oprot.writeFieldBegin('bodyTypeId', TType.I32, 2)
            oprot.writeI32(self.bodyTypeId)
            oprot.writeFieldEnd()
        if self.heroBodyTypeId is not None:
            oprot.writeFieldBegin('heroBodyTypeId', TType.I32, 3)
            oprot.writeI32(self.heroBodyTypeId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 4)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.rarityId is not None:
            oprot.writeFieldBegin('rarityId', TType.I32, 5)
            oprot.writeI32(self.rarityId)
            oprot.writeFieldEnd()
        if self.affinityId is not None:
            oprot.writeFieldBegin('affinityId', TType.I32, 6)
            oprot.writeI32(self.affinityId)
            oprot.writeFieldEnd()
        if self.unlockCampaignId is not None:
            oprot.writeFieldBegin('unlockCampaignId', TType.STRING, 7)
            oprot.writeString(self.unlockCampaignId.encode('utf-8') if sys.version_info[0] == 2 else self.unlockCampaignId)
            oprot.writeFieldEnd()
        if self.evolutionProfileId is not None:
            oprot.writeFieldBegin('evolutionProfileId', TType.STRING, 8)
            oprot.writeString(self.evolutionProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.evolutionProfileId)
            oprot.writeFieldEnd()
        if self.genderId is not None:
            oprot.writeFieldBegin('genderId', TType.I32, 9)
            oprot.writeI32(self.genderId)
            oprot.writeFieldEnd()
        if self.animationProfileId is not None:
            oprot.writeFieldBegin('animationProfileId', TType.STRING, 10)
            oprot.writeString(self.animationProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.animationProfileId)
            oprot.writeFieldEnd()
        if self.summary is not None:
            oprot.writeFieldBegin('summary', TType.STRING, 11)
            oprot.writeString(self.summary.encode('utf-8') if sys.version_info[0] == 2 else self.summary)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 12)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.drag is not None:
            oprot.writeFieldBegin('drag', TType.DOUBLE, 13)
            oprot.writeDouble(self.drag)
            oprot.writeFieldEnd()
        if self.strengthProfileId is not None:
            oprot.writeFieldBegin('strengthProfileId', TType.STRING, 14)
            oprot.writeString(self.strengthProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.strengthProfileId)
            oprot.writeFieldEnd()
        if self.winAnimations is not None:
            oprot.writeFieldBegin('winAnimations', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.winAnimations))
            for iter262 in self.winAnimations:
                oprot.writeString(iter262.encode('utf-8') if sys.version_info[0] == 2 else iter262)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.loseAnimations is not None:
            oprot.writeFieldBegin('loseAnimations', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.loseAnimations))
            for iter263 in self.loseAnimations:
                oprot.writeString(iter263.encode('utf-8') if sys.version_info[0] == 2 else iter263)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bodyCirclePrefab is not None:
            oprot.writeFieldBegin('bodyCirclePrefab', TType.STRING, 17)
            oprot.writeString(self.bodyCirclePrefab.encode('utf-8') if sys.version_info[0] == 2 else self.bodyCirclePrefab)
            oprot.writeFieldEnd()
        if self.heroInfoAnimations is not None:
            oprot.writeFieldBegin('heroInfoAnimations', TType.LIST, 18)
            oprot.writeListBegin(TType.STRING, len(self.heroInfoAnimations))
            for iter264 in self.heroInfoAnimations:
                oprot.writeString(iter264.encode('utf-8') if sys.version_info[0] == 2 else iter264)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.levelUpAnimations is not None:
            oprot.writeFieldBegin('levelUpAnimations', TType.LIST, 19)
            oprot.writeListBegin(TType.STRING, len(self.levelUpAnimations))
            for iter265 in self.levelUpAnimations:
                oprot.writeString(iter265.encode('utf-8') if sys.version_info[0] == 2 else iter265)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroPrefab is not None:
            oprot.writeFieldBegin('heroPrefab', TType.STRING, 20)
            oprot.writeString(self.heroPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.heroPrefab)
            oprot.writeFieldEnd()
        if self.cardImage is not None:
            oprot.writeFieldBegin('cardImage', TType.STRING, 21)
            oprot.writeString(self.cardImage.encode('utf-8') if sys.version_info[0] == 2 else self.cardImage)
            oprot.writeFieldEnd()
        if self.bwCardImage is not None:
            oprot.writeFieldBegin('bwCardImage', TType.STRING, 22)
            oprot.writeString(self.bwCardImage.encode('utf-8') if sys.version_info[0] == 2 else self.bwCardImage)
            oprot.writeFieldEnd()
        if self.specialMoveTrigger is not None:
            oprot.writeFieldBegin('specialMoveTrigger', TType.I32, 23)
            oprot.writeI32(self.specialMoveTrigger)
            oprot.writeFieldEnd()
        if self.skillIds is not None:
            oprot.writeFieldBegin('skillIds', TType.LIST, 24)
            oprot.writeListBegin(TType.STRING, len(self.skillIds))
            for iter266 in self.skillIds:
                oprot.writeString(iter266.encode('utf-8') if sys.version_info[0] == 2 else iter266)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.enchantmentSkillSlotNum is not None:
            oprot.writeFieldBegin('enchantmentSkillSlotNum', TType.I32, 25)
            oprot.writeI32(self.enchantmentSkillSlotNum)
            oprot.writeFieldEnd()
        if self.bumpComboSkillSlotNum is not None:
            oprot.writeFieldBegin('bumpComboSkillSlotNum', TType.I32, 26)
            oprot.writeI32(self.bumpComboSkillSlotNum)
            oprot.writeFieldEnd()
        if self.energyShotSkillSlotNum is not None:
            oprot.writeFieldBegin('energyShotSkillSlotNum', TType.I32, 27)
            oprot.writeI32(self.energyShotSkillSlotNum)
            oprot.writeFieldEnd()
        if self.idleAnimations is not None:
            oprot.writeFieldBegin('idleAnimations', TType.LIST, 28)
            oprot.writeListBegin(TType.STRING, len(self.idleAnimations))
            for iter267 in self.idleAnimations:
                oprot.writeString(iter267.encode('utf-8') if sys.version_info[0] == 2 else iter267)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.visualEffectsProfileId is not None:
            oprot.writeFieldBegin('visualEffectsProfileId', TType.STRING, 29)
            oprot.writeString(self.visualEffectsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.visualEffectsProfileId)
            oprot.writeFieldEnd()
        if self.physicsProfileId is not None:
            oprot.writeFieldBegin('physicsProfileId', TType.STRING, 30)
            oprot.writeString(self.physicsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.physicsProfileId)
            oprot.writeFieldEnd()
        if self.magicReactProfileId is not None:
            oprot.writeFieldBegin('magicReactProfileId', TType.STRING, 31)
            oprot.writeString(self.magicReactProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.magicReactProfileId)
            oprot.writeFieldEnd()
        if self.healthBarPrefab is not None:
            oprot.writeFieldBegin('healthBarPrefab', TType.STRING, 32)
            oprot.writeString(self.healthBarPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.healthBarPrefab)
            oprot.writeFieldEnd()
        if self.healthBarYOffset is not None:
            oprot.writeFieldBegin('healthBarYOffset', TType.DOUBLE, 33)
            oprot.writeDouble(self.healthBarYOffset)
            oprot.writeFieldEnd()
        if self.heroSoundProfileId is not None:
            oprot.writeFieldBegin('heroSoundProfileId', TType.STRING, 37)
            oprot.writeString(self.heroSoundProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.heroSoundProfileId)
            oprot.writeFieldEnd()
        if self.physicalReactProfileId is not None:
            oprot.writeFieldBegin('physicalReactProfileId', TType.STRING, 38)
            oprot.writeString(self.physicalReactProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.physicalReactProfileId)
            oprot.writeFieldEnd()
        if self.skillId0 is not None:
            oprot.writeFieldBegin('skillId0', TType.STRING, 40)
            oprot.writeString(self.skillId0.encode('utf-8') if sys.version_info[0] == 2 else self.skillId0)
            oprot.writeFieldEnd()
        if self.skillId1 is not None:
            oprot.writeFieldBegin('skillId1', TType.STRING, 41)
            oprot.writeString(self.skillId1.encode('utf-8') if sys.version_info[0] == 2 else self.skillId1)
            oprot.writeFieldEnd()
        if self.skillId2 is not None:
            oprot.writeFieldBegin('skillId2', TType.STRING, 42)
            oprot.writeString(self.skillId2.encode('utf-8') if sys.version_info[0] == 2 else self.skillId2)
            oprot.writeFieldEnd()
        if self.skillId3 is not None:
            oprot.writeFieldBegin('skillId3', TType.STRING, 43)
            oprot.writeString(self.skillId3.encode('utf-8') if sys.version_info[0] == 2 else self.skillId3)
            oprot.writeFieldEnd()
        if self.movementTypeId is not None:
            oprot.writeFieldBegin('movementTypeId', TType.I32, 44)
            oprot.writeI32(self.movementTypeId)
            oprot.writeFieldEnd()
        if self.lifespanTypeId is not None:
            oprot.writeFieldBegin('lifespanTypeId', TType.I32, 45)
            oprot.writeI32(self.lifespanTypeId)
            oprot.writeFieldEnd()
        if self.skillIconHolderPrefab is not None:
            oprot.writeFieldBegin('skillIconHolderPrefab', TType.STRING, 46)
            oprot.writeString(self.skillIconHolderPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.skillIconHolderPrefab)
            oprot.writeFieldEnd()
        if self.attackAnimDelaySeconds is not None:
            oprot.writeFieldBegin('attackAnimDelaySeconds', TType.DOUBLE, 47)
            oprot.writeDouble(self.attackAnimDelaySeconds)
            oprot.writeFieldEnd()
        if self.Nickname is not None:
            oprot.writeFieldBegin('Nickname', TType.STRING, 48)
            oprot.writeString(self.Nickname.encode('utf-8') if sys.version_info[0] == 2 else self.Nickname)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroId is None:
            raise TProtocolException(message='Required field heroId is unset!')
        if self.heroBodyTypeId is None:
            raise TProtocolException(message='Required field heroBodyTypeId is unset!')
        if self.rarityId is None:
            raise TProtocolException(message='Required field rarityId is unset!')
        if self.affinityId is None:
            raise TProtocolException(message='Required field affinityId is unset!')
        if self.heroPrefab is None:
            raise TProtocolException(message='Required field heroPrefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroSoundProfile(object):
    """
    Attributes:
     - heroId
     - shootClip
     - myTurnClip
     - deathClip
     - energyShotClip
     - worriedClip
     - aimClip
     - hitClip
     - physicalDamageClip

    """


    def __init__(self, heroId=None, shootClip=None, myTurnClip=None, deathClip=None, energyShotClip=None, worriedClip=None, aimClip=None, hitClip=None, physicalDamageClip=None,):
        self.heroId = heroId
        self.shootClip = shootClip
        self.myTurnClip = myTurnClip
        self.deathClip = deathClip
        self.energyShotClip = energyShotClip
        self.worriedClip = worriedClip
        self.aimClip = aimClip
        self.hitClip = hitClip
        self.physicalDamageClip = physicalDamageClip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.heroId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shootClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.myTurnClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.deathClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.energyShotClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.worriedClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.aimClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.hitClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.physicalDamageClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroSoundProfile')
        if self.heroId is not None:
            oprot.writeFieldBegin('heroId', TType.STRING, 1)
            oprot.writeString(self.heroId.encode('utf-8') if sys.version_info[0] == 2 else self.heroId)
            oprot.writeFieldEnd()
        if self.shootClip is not None:
            oprot.writeFieldBegin('shootClip', TType.STRING, 2)
            oprot.writeString(self.shootClip.encode('utf-8') if sys.version_info[0] == 2 else self.shootClip)
            oprot.writeFieldEnd()
        if self.myTurnClip is not None:
            oprot.writeFieldBegin('myTurnClip', TType.STRING, 3)
            oprot.writeString(self.myTurnClip.encode('utf-8') if sys.version_info[0] == 2 else self.myTurnClip)
            oprot.writeFieldEnd()
        if self.deathClip is not None:
            oprot.writeFieldBegin('deathClip', TType.STRING, 4)
            oprot.writeString(self.deathClip.encode('utf-8') if sys.version_info[0] == 2 else self.deathClip)
            oprot.writeFieldEnd()
        if self.energyShotClip is not None:
            oprot.writeFieldBegin('energyShotClip', TType.STRING, 5)
            oprot.writeString(self.energyShotClip.encode('utf-8') if sys.version_info[0] == 2 else self.energyShotClip)
            oprot.writeFieldEnd()
        if self.worriedClip is not None:
            oprot.writeFieldBegin('worriedClip', TType.STRING, 6)
            oprot.writeString(self.worriedClip.encode('utf-8') if sys.version_info[0] == 2 else self.worriedClip)
            oprot.writeFieldEnd()
        if self.aimClip is not None:
            oprot.writeFieldBegin('aimClip', TType.STRING, 7)
            oprot.writeString(self.aimClip.encode('utf-8') if sys.version_info[0] == 2 else self.aimClip)
            oprot.writeFieldEnd()
        if self.hitClip is not None:
            oprot.writeFieldBegin('hitClip', TType.STRING, 8)
            oprot.writeString(self.hitClip.encode('utf-8') if sys.version_info[0] == 2 else self.hitClip)
            oprot.writeFieldEnd()
        if self.physicalDamageClip is not None:
            oprot.writeFieldBegin('physicalDamageClip', TType.STRING, 9)
            oprot.writeString(self.physicalDamageClip.encode('utf-8') if sys.version_info[0] == 2 else self.physicalDamageClip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroId is None:
            raise TProtocolException(message='Required field heroId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Campaign(object):
    """
    Attributes:
     - campaignId
     - display
     - order
     - hideTitle
     - raidLevelSceneId
     - imagePath
     - backgroundImagePath
     - campaignLoadingSignPath
     - backgroundImageTypeId
     - unlockedHeroIds
     - levelIds
     - iconPrefabPath
     - battleMenuImagePath
     - campaignSignPath
     - campaignLevelFontPath
     - highlightOpacity
     - showIconShadow

    """


    def __init__(self, campaignId=None, display=None, order=None, hideTitle=None, raidLevelSceneId=None, imagePath=None, backgroundImagePath=None, campaignLoadingSignPath=None, backgroundImageTypeId=None, unlockedHeroIds=None, levelIds=None, iconPrefabPath=None, battleMenuImagePath=None, campaignSignPath=None, campaignLevelFontPath=None, highlightOpacity=None, showIconShadow=None,):
        self.campaignId = campaignId
        self.display = display
        self.order = order
        self.hideTitle = hideTitle
        self.raidLevelSceneId = raidLevelSceneId
        self.imagePath = imagePath
        self.backgroundImagePath = backgroundImagePath
        self.campaignLoadingSignPath = campaignLoadingSignPath
        self.backgroundImageTypeId = backgroundImageTypeId
        self.unlockedHeroIds = unlockedHeroIds
        self.levelIds = levelIds
        self.iconPrefabPath = iconPrefabPath
        self.battleMenuImagePath = battleMenuImagePath
        self.campaignSignPath = campaignSignPath
        self.campaignLevelFontPath = campaignLevelFontPath
        self.highlightOpacity = highlightOpacity
        self.showIconShadow = showIconShadow

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.campaignId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.hideTitle = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.raidLevelSceneId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.imagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.backgroundImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.campaignLoadingSignPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.backgroundImageTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.unlockedHeroIds = []
                    (_etype271, _size268) = iprot.readListBegin()
                    for _i272 in range(_size268):
                        _elem273 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.unlockedHeroIds.append(_elem273)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.levelIds = []
                    (_etype277, _size274) = iprot.readListBegin()
                    for _i278 in range(_size274):
                        _elem279 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.levelIds.append(_elem279)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.iconPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.battleMenuImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.campaignSignPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.campaignLevelFontPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.DOUBLE:
                    self.highlightOpacity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.BOOL:
                    self.showIconShadow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Campaign')
        if self.campaignId is not None:
            oprot.writeFieldBegin('campaignId', TType.STRING, 1)
            oprot.writeString(self.campaignId.encode('utf-8') if sys.version_info[0] == 2 else self.campaignId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 3)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.hideTitle is not None:
            oprot.writeFieldBegin('hideTitle', TType.BOOL, 4)
            oprot.writeBool(self.hideTitle)
            oprot.writeFieldEnd()
        if self.raidLevelSceneId is not None:
            oprot.writeFieldBegin('raidLevelSceneId', TType.STRING, 5)
            oprot.writeString(self.raidLevelSceneId.encode('utf-8') if sys.version_info[0] == 2 else self.raidLevelSceneId)
            oprot.writeFieldEnd()
        if self.imagePath is not None:
            oprot.writeFieldBegin('imagePath', TType.STRING, 10)
            oprot.writeString(self.imagePath.encode('utf-8') if sys.version_info[0] == 2 else self.imagePath)
            oprot.writeFieldEnd()
        if self.backgroundImagePath is not None:
            oprot.writeFieldBegin('backgroundImagePath', TType.STRING, 11)
            oprot.writeString(self.backgroundImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImagePath)
            oprot.writeFieldEnd()
        if self.campaignLoadingSignPath is not None:
            oprot.writeFieldBegin('campaignLoadingSignPath', TType.STRING, 12)
            oprot.writeString(self.campaignLoadingSignPath.encode('utf-8') if sys.version_info[0] == 2 else self.campaignLoadingSignPath)
            oprot.writeFieldEnd()
        if self.backgroundImageTypeId is not None:
            oprot.writeFieldBegin('backgroundImageTypeId', TType.I32, 13)
            oprot.writeI32(self.backgroundImageTypeId)
            oprot.writeFieldEnd()
        if self.unlockedHeroIds is not None:
            oprot.writeFieldBegin('unlockedHeroIds', TType.LIST, 20)
            oprot.writeListBegin(TType.STRING, len(self.unlockedHeroIds))
            for iter280 in self.unlockedHeroIds:
                oprot.writeString(iter280.encode('utf-8') if sys.version_info[0] == 2 else iter280)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.levelIds is not None:
            oprot.writeFieldBegin('levelIds', TType.LIST, 21)
            oprot.writeListBegin(TType.STRING, len(self.levelIds))
            for iter281 in self.levelIds:
                oprot.writeString(iter281.encode('utf-8') if sys.version_info[0] == 2 else iter281)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iconPrefabPath is not None:
            oprot.writeFieldBegin('iconPrefabPath', TType.STRING, 30)
            oprot.writeString(self.iconPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.iconPrefabPath)
            oprot.writeFieldEnd()
        if self.battleMenuImagePath is not None:
            oprot.writeFieldBegin('battleMenuImagePath', TType.STRING, 31)
            oprot.writeString(self.battleMenuImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.battleMenuImagePath)
            oprot.writeFieldEnd()
        if self.campaignSignPath is not None:
            oprot.writeFieldBegin('campaignSignPath', TType.STRING, 32)
            oprot.writeString(self.campaignSignPath.encode('utf-8') if sys.version_info[0] == 2 else self.campaignSignPath)
            oprot.writeFieldEnd()
        if self.campaignLevelFontPath is not None:
            oprot.writeFieldBegin('campaignLevelFontPath', TType.STRING, 33)
            oprot.writeString(self.campaignLevelFontPath.encode('utf-8') if sys.version_info[0] == 2 else self.campaignLevelFontPath)
            oprot.writeFieldEnd()
        if self.highlightOpacity is not None:
            oprot.writeFieldBegin('highlightOpacity', TType.DOUBLE, 34)
            oprot.writeDouble(self.highlightOpacity)
            oprot.writeFieldEnd()
        if self.showIconShadow is not None:
            oprot.writeFieldBegin('showIconShadow', TType.BOOL, 35)
            oprot.writeBool(self.showIconShadow)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.campaignId is None:
            raise TProtocolException(message='Required field campaignId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Level(object):
    """
    Attributes:
     - levelId
     - display
     - campaignId
     - levelSceneIds
     - order
     - difficulty
     - valueCents
     - heroXp
     - globalOrder
     - items1
     - items2
     - items3
     - items4
     - parms1
     - parms2
     - parms3
     - parms4
     - items5
     - items6
     - parms5
     - parms6
     - items7
     - items8
     - parms7
     - parms8
     - costCurrencyId
     - currencyCost

    """


    def __init__(self, levelId=None, display=None, campaignId=None, levelSceneIds=None, order=None, difficulty=None, valueCents=None, heroXp=None, globalOrder=None, items1=None, items2=None, items3=None, items4=None, parms1=None, parms2=None, parms3=None, parms4=None, items5=None, items6=None, parms5=None, parms6=None, items7=None, items8=None, parms7=None, parms8=None, costCurrencyId=None, currencyCost=None,):
        self.levelId = levelId
        self.display = display
        self.campaignId = campaignId
        self.levelSceneIds = levelSceneIds
        self.order = order
        self.difficulty = difficulty
        self.valueCents = valueCents
        self.heroXp = heroXp
        self.globalOrder = globalOrder
        self.items1 = items1
        self.items2 = items2
        self.items3 = items3
        self.items4 = items4
        self.parms1 = parms1
        self.parms2 = parms2
        self.parms3 = parms3
        self.parms4 = parms4
        self.items5 = items5
        self.items6 = items6
        self.parms5 = parms5
        self.parms6 = parms6
        self.items7 = items7
        self.items8 = items8
        self.parms7 = parms7
        self.parms8 = parms8
        self.costCurrencyId = costCurrencyId
        self.currencyCost = currencyCost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.levelId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.campaignId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.levelSceneIds = []
                    (_etype285, _size282) = iprot.readListBegin()
                    for _i286 in range(_size282):
                        _elem287 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.levelSceneIds.append(_elem287)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.difficulty = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.valueCents = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.heroXp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.globalOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.items1 = []
                    (_etype291, _size288) = iprot.readListBegin()
                    for _i292 in range(_size288):
                        _elem293 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items1.append(_elem293)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.items2 = []
                    (_etype297, _size294) = iprot.readListBegin()
                    for _i298 in range(_size294):
                        _elem299 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items2.append(_elem299)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.items3 = []
                    (_etype303, _size300) = iprot.readListBegin()
                    for _i304 in range(_size300):
                        _elem305 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items3.append(_elem305)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.items4 = []
                    (_etype309, _size306) = iprot.readListBegin()
                    for _i310 in range(_size306):
                        _elem311 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items4.append(_elem311)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.parms1 = []
                    (_etype315, _size312) = iprot.readListBegin()
                    for _i316 in range(_size312):
                        _elem317 = iprot.readDouble()
                        self.parms1.append(_elem317)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.parms2 = []
                    (_etype321, _size318) = iprot.readListBegin()
                    for _i322 in range(_size318):
                        _elem323 = iprot.readDouble()
                        self.parms2.append(_elem323)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.parms3 = []
                    (_etype327, _size324) = iprot.readListBegin()
                    for _i328 in range(_size324):
                        _elem329 = iprot.readDouble()
                        self.parms3.append(_elem329)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.parms4 = []
                    (_etype333, _size330) = iprot.readListBegin()
                    for _i334 in range(_size330):
                        _elem335 = iprot.readDouble()
                        self.parms4.append(_elem335)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.items5 = []
                    (_etype339, _size336) = iprot.readListBegin()
                    for _i340 in range(_size336):
                        _elem341 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items5.append(_elem341)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.items6 = []
                    (_etype345, _size342) = iprot.readListBegin()
                    for _i346 in range(_size342):
                        _elem347 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items6.append(_elem347)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.parms5 = []
                    (_etype351, _size348) = iprot.readListBegin()
                    for _i352 in range(_size348):
                        _elem353 = iprot.readDouble()
                        self.parms5.append(_elem353)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.LIST:
                    self.parms6 = []
                    (_etype357, _size354) = iprot.readListBegin()
                    for _i358 in range(_size354):
                        _elem359 = iprot.readDouble()
                        self.parms6.append(_elem359)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.LIST:
                    self.items7 = []
                    (_etype363, _size360) = iprot.readListBegin()
                    for _i364 in range(_size360):
                        _elem365 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items7.append(_elem365)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.LIST:
                    self.items8 = []
                    (_etype369, _size366) = iprot.readListBegin()
                    for _i370 in range(_size366):
                        _elem371 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.items8.append(_elem371)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.LIST:
                    self.parms7 = []
                    (_etype375, _size372) = iprot.readListBegin()
                    for _i376 in range(_size372):
                        _elem377 = iprot.readDouble()
                        self.parms7.append(_elem377)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.LIST:
                    self.parms8 = []
                    (_etype381, _size378) = iprot.readListBegin()
                    for _i382 in range(_size378):
                        _elem383 = iprot.readDouble()
                        self.parms8.append(_elem383)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.costCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.currencyCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Level')
        if self.levelId is not None:
            oprot.writeFieldBegin('levelId', TType.STRING, 1)
            oprot.writeString(self.levelId.encode('utf-8') if sys.version_info[0] == 2 else self.levelId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.campaignId is not None:
            oprot.writeFieldBegin('campaignId', TType.STRING, 3)
            oprot.writeString(self.campaignId.encode('utf-8') if sys.version_info[0] == 2 else self.campaignId)
            oprot.writeFieldEnd()
        if self.levelSceneIds is not None:
            oprot.writeFieldBegin('levelSceneIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.levelSceneIds))
            for iter384 in self.levelSceneIds:
                oprot.writeString(iter384.encode('utf-8') if sys.version_info[0] == 2 else iter384)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 5)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.difficulty is not None:
            oprot.writeFieldBegin('difficulty', TType.DOUBLE, 6)
            oprot.writeDouble(self.difficulty)
            oprot.writeFieldEnd()
        if self.valueCents is not None:
            oprot.writeFieldBegin('valueCents', TType.DOUBLE, 7)
            oprot.writeDouble(self.valueCents)
            oprot.writeFieldEnd()
        if self.heroXp is not None:
            oprot.writeFieldBegin('heroXp', TType.I32, 8)
            oprot.writeI32(self.heroXp)
            oprot.writeFieldEnd()
        if self.globalOrder is not None:
            oprot.writeFieldBegin('globalOrder', TType.I32, 9)
            oprot.writeI32(self.globalOrder)
            oprot.writeFieldEnd()
        if self.items1 is not None:
            oprot.writeFieldBegin('items1', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.items1))
            for iter385 in self.items1:
                oprot.writeString(iter385.encode('utf-8') if sys.version_info[0] == 2 else iter385)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items2 is not None:
            oprot.writeFieldBegin('items2', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.items2))
            for iter386 in self.items2:
                oprot.writeString(iter386.encode('utf-8') if sys.version_info[0] == 2 else iter386)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items3 is not None:
            oprot.writeFieldBegin('items3', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.items3))
            for iter387 in self.items3:
                oprot.writeString(iter387.encode('utf-8') if sys.version_info[0] == 2 else iter387)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items4 is not None:
            oprot.writeFieldBegin('items4', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.items4))
            for iter388 in self.items4:
                oprot.writeString(iter388.encode('utf-8') if sys.version_info[0] == 2 else iter388)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms1 is not None:
            oprot.writeFieldBegin('parms1', TType.LIST, 15)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms1))
            for iter389 in self.parms1:
                oprot.writeDouble(iter389)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms2 is not None:
            oprot.writeFieldBegin('parms2', TType.LIST, 16)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms2))
            for iter390 in self.parms2:
                oprot.writeDouble(iter390)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms3 is not None:
            oprot.writeFieldBegin('parms3', TType.LIST, 17)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms3))
            for iter391 in self.parms3:
                oprot.writeDouble(iter391)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms4 is not None:
            oprot.writeFieldBegin('parms4', TType.LIST, 18)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms4))
            for iter392 in self.parms4:
                oprot.writeDouble(iter392)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items5 is not None:
            oprot.writeFieldBegin('items5', TType.LIST, 21)
            oprot.writeListBegin(TType.STRING, len(self.items5))
            for iter393 in self.items5:
                oprot.writeString(iter393.encode('utf-8') if sys.version_info[0] == 2 else iter393)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items6 is not None:
            oprot.writeFieldBegin('items6', TType.LIST, 22)
            oprot.writeListBegin(TType.STRING, len(self.items6))
            for iter394 in self.items6:
                oprot.writeString(iter394.encode('utf-8') if sys.version_info[0] == 2 else iter394)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms5 is not None:
            oprot.writeFieldBegin('parms5', TType.LIST, 23)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms5))
            for iter395 in self.parms5:
                oprot.writeDouble(iter395)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms6 is not None:
            oprot.writeFieldBegin('parms6', TType.LIST, 24)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms6))
            for iter396 in self.parms6:
                oprot.writeDouble(iter396)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items7 is not None:
            oprot.writeFieldBegin('items7', TType.LIST, 25)
            oprot.writeListBegin(TType.STRING, len(self.items7))
            for iter397 in self.items7:
                oprot.writeString(iter397.encode('utf-8') if sys.version_info[0] == 2 else iter397)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.items8 is not None:
            oprot.writeFieldBegin('items8', TType.LIST, 26)
            oprot.writeListBegin(TType.STRING, len(self.items8))
            for iter398 in self.items8:
                oprot.writeString(iter398.encode('utf-8') if sys.version_info[0] == 2 else iter398)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms7 is not None:
            oprot.writeFieldBegin('parms7', TType.LIST, 27)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms7))
            for iter399 in self.parms7:
                oprot.writeDouble(iter399)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parms8 is not None:
            oprot.writeFieldBegin('parms8', TType.LIST, 28)
            oprot.writeListBegin(TType.DOUBLE, len(self.parms8))
            for iter400 in self.parms8:
                oprot.writeDouble(iter400)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.costCurrencyId is not None:
            oprot.writeFieldBegin('costCurrencyId', TType.STRING, 30)
            oprot.writeString(self.costCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.costCurrencyId)
            oprot.writeFieldEnd()
        if self.currencyCost is not None:
            oprot.writeFieldBegin('currencyCost', TType.I32, 31)
            oprot.writeI32(self.currencyCost)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.levelId is None:
            raise TProtocolException(message='Required field levelId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.order is None:
            raise TProtocolException(message='Required field order is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgeElementEntry(object):
    """
    Attributes:
     - edgeElementsProfileId
     - edgeElementId
     - firstMove
     - lastMove
     - probability
     - groupId

    """


    def __init__(self, edgeElementsProfileId=None, edgeElementId=None, firstMove=None, lastMove=None, probability=None, groupId=None,):
        self.edgeElementsProfileId = edgeElementsProfileId
        self.edgeElementId = edgeElementId
        self.firstMove = firstMove
        self.lastMove = lastMove
        self.probability = probability
        self.groupId = groupId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.edgeElementsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.edgeElementId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.firstMove = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.lastMove = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.probability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgeElementEntry')
        if self.edgeElementsProfileId is not None:
            oprot.writeFieldBegin('edgeElementsProfileId', TType.STRING, 1)
            oprot.writeString(self.edgeElementsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.edgeElementsProfileId)
            oprot.writeFieldEnd()
        if self.edgeElementId is not None:
            oprot.writeFieldBegin('edgeElementId', TType.STRING, 2)
            oprot.writeString(self.edgeElementId.encode('utf-8') if sys.version_info[0] == 2 else self.edgeElementId)
            oprot.writeFieldEnd()
        if self.firstMove is not None:
            oprot.writeFieldBegin('firstMove', TType.I32, 3)
            oprot.writeI32(self.firstMove)
            oprot.writeFieldEnd()
        if self.lastMove is not None:
            oprot.writeFieldBegin('lastMove', TType.I32, 4)
            oprot.writeI32(self.lastMove)
            oprot.writeFieldEnd()
        if self.probability is not None:
            oprot.writeFieldBegin('probability', TType.DOUBLE, 5)
            oprot.writeDouble(self.probability)
            oprot.writeFieldEnd()
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 6)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edgeElementsProfileId is None:
            raise TProtocolException(message='Required field edgeElementsProfileId is unset!')
        if self.edgeElementId is None:
            raise TProtocolException(message='Required field edgeElementId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgeElementsProfile(object):
    """
    Attributes:
     - edgeElementsProfileId
     - edgeElementEntries

    """


    def __init__(self, edgeElementsProfileId=None, edgeElementEntries=None,):
        self.edgeElementsProfileId = edgeElementsProfileId
        self.edgeElementEntries = edgeElementEntries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.edgeElementsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.edgeElementEntries = []
                    (_etype404, _size401) = iprot.readListBegin()
                    for _i405 in range(_size401):
                        _elem406 = EdgeElementEntry()
                        _elem406.read(iprot)
                        self.edgeElementEntries.append(_elem406)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgeElementsProfile')
        if self.edgeElementsProfileId is not None:
            oprot.writeFieldBegin('edgeElementsProfileId', TType.STRING, 1)
            oprot.writeString(self.edgeElementsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.edgeElementsProfileId)
            oprot.writeFieldEnd()
        if self.edgeElementEntries is not None:
            oprot.writeFieldBegin('edgeElementEntries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.edgeElementEntries))
            for iter407 in self.edgeElementEntries:
                iter407.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edgeElementsProfileId is None:
            raise TProtocolException(message='Required field edgeElementsProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LevelScene(object):
    """
    Attributes:
     - levelSceneId
     - levelId
     - enemySpawnPoints
     - minigameMusicThemeIds
     - order
     - levelPrefabPath
     - edgeElementsProfileId
     - hasBoss
     - startCameraPosition
     - cameraPosition
     - fightEffectListId
     - playerTurnEffectListId
     - transitionY
     - fanTransitionPath
     - enemyTurnEffectListId

    """


    def __init__(self, levelSceneId=None, levelId=None, enemySpawnPoints=None, minigameMusicThemeIds=None, order=None, levelPrefabPath=None, edgeElementsProfileId=None, hasBoss=None, startCameraPosition=None, cameraPosition=None, fightEffectListId=None, playerTurnEffectListId=None, transitionY=None, fanTransitionPath=None, enemyTurnEffectListId=None,):
        self.levelSceneId = levelSceneId
        self.levelId = levelId
        self.enemySpawnPoints = enemySpawnPoints
        self.minigameMusicThemeIds = minigameMusicThemeIds
        self.order = order
        self.levelPrefabPath = levelPrefabPath
        self.edgeElementsProfileId = edgeElementsProfileId
        self.hasBoss = hasBoss
        self.startCameraPosition = startCameraPosition
        self.cameraPosition = cameraPosition
        self.fightEffectListId = fightEffectListId
        self.playerTurnEffectListId = playerTurnEffectListId
        self.transitionY = transitionY
        self.fanTransitionPath = fanTransitionPath
        self.enemyTurnEffectListId = enemyTurnEffectListId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.levelSceneId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.levelId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.enemySpawnPoints = []
                    (_etype411, _size408) = iprot.readListBegin()
                    for _i412 in range(_size408):
                        _elem413 = EnemySpawnPoint()
                        _elem413.read(iprot)
                        self.enemySpawnPoints.append(_elem413)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.minigameMusicThemeIds = []
                    (_etype417, _size414) = iprot.readListBegin()
                    for _i418 in range(_size414):
                        _elem419 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.minigameMusicThemeIds.append(_elem419)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.levelPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.edgeElementsProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.hasBoss = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.startCameraPosition = []
                    (_etype423, _size420) = iprot.readListBegin()
                    for _i424 in range(_size420):
                        _elem425 = iprot.readDouble()
                        self.startCameraPosition.append(_elem425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.cameraPosition = []
                    (_etype429, _size426) = iprot.readListBegin()
                    for _i430 in range(_size426):
                        _elem431 = iprot.readDouble()
                        self.cameraPosition.append(_elem431)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.fightEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.playerTurnEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.transitionY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.fanTransitionPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.enemyTurnEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LevelScene')
        if self.levelSceneId is not None:
            oprot.writeFieldBegin('levelSceneId', TType.STRING, 1)
            oprot.writeString(self.levelSceneId.encode('utf-8') if sys.version_info[0] == 2 else self.levelSceneId)
            oprot.writeFieldEnd()
        if self.levelId is not None:
            oprot.writeFieldBegin('levelId', TType.STRING, 2)
            oprot.writeString(self.levelId.encode('utf-8') if sys.version_info[0] == 2 else self.levelId)
            oprot.writeFieldEnd()
        if self.enemySpawnPoints is not None:
            oprot.writeFieldBegin('enemySpawnPoints', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.enemySpawnPoints))
            for iter432 in self.enemySpawnPoints:
                iter432.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.minigameMusicThemeIds is not None:
            oprot.writeFieldBegin('minigameMusicThemeIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.minigameMusicThemeIds))
            for iter433 in self.minigameMusicThemeIds:
                oprot.writeString(iter433.encode('utf-8') if sys.version_info[0] == 2 else iter433)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 5)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.levelPrefabPath is not None:
            oprot.writeFieldBegin('levelPrefabPath', TType.STRING, 6)
            oprot.writeString(self.levelPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.levelPrefabPath)
            oprot.writeFieldEnd()
        if self.edgeElementsProfileId is not None:
            oprot.writeFieldBegin('edgeElementsProfileId', TType.STRING, 9)
            oprot.writeString(self.edgeElementsProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.edgeElementsProfileId)
            oprot.writeFieldEnd()
        if self.hasBoss is not None:
            oprot.writeFieldBegin('hasBoss', TType.BOOL, 10)
            oprot.writeBool(self.hasBoss)
            oprot.writeFieldEnd()
        if self.startCameraPosition is not None:
            oprot.writeFieldBegin('startCameraPosition', TType.LIST, 11)
            oprot.writeListBegin(TType.DOUBLE, len(self.startCameraPosition))
            for iter434 in self.startCameraPosition:
                oprot.writeDouble(iter434)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cameraPosition is not None:
            oprot.writeFieldBegin('cameraPosition', TType.LIST, 12)
            oprot.writeListBegin(TType.DOUBLE, len(self.cameraPosition))
            for iter435 in self.cameraPosition:
                oprot.writeDouble(iter435)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fightEffectListId is not None:
            oprot.writeFieldBegin('fightEffectListId', TType.STRING, 13)
            oprot.writeString(self.fightEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.fightEffectListId)
            oprot.writeFieldEnd()
        if self.playerTurnEffectListId is not None:
            oprot.writeFieldBegin('playerTurnEffectListId', TType.STRING, 14)
            oprot.writeString(self.playerTurnEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.playerTurnEffectListId)
            oprot.writeFieldEnd()
        if self.transitionY is not None:
            oprot.writeFieldBegin('transitionY', TType.DOUBLE, 15)
            oprot.writeDouble(self.transitionY)
            oprot.writeFieldEnd()
        if self.fanTransitionPath is not None:
            oprot.writeFieldBegin('fanTransitionPath', TType.STRING, 16)
            oprot.writeString(self.fanTransitionPath.encode('utf-8') if sys.version_info[0] == 2 else self.fanTransitionPath)
            oprot.writeFieldEnd()
        if self.enemyTurnEffectListId is not None:
            oprot.writeFieldBegin('enemyTurnEffectListId', TType.STRING, 17)
            oprot.writeString(self.enemyTurnEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.enemyTurnEffectListId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.levelSceneId is None:
            raise TProtocolException(message='Required field levelSceneId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroState(object):
    """
    Attributes:
     - heroId
     - evolutionLevel
     - heroStateId
     - slotStatus
     - xp
     - skillLevels

    """


    def __init__(self, heroId=None, evolutionLevel=None, heroStateId=None, slotStatus=None, xp=None, skillLevels=None,):
        self.heroId = heroId
        self.evolutionLevel = evolutionLevel
        self.heroStateId = heroStateId
        self.slotStatus = slotStatus
        self.xp = xp
        self.skillLevels = skillLevels

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.heroId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.evolutionLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.heroStateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.slotStatus = []
                    (_etype439, _size436) = iprot.readListBegin()
                    for _i440 in range(_size436):
                        _elem441 = iprot.readBool()
                        self.slotStatus.append(_elem441)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.xp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.skillLevels = []
                    (_etype445, _size442) = iprot.readListBegin()
                    for _i446 in range(_size442):
                        _elem447 = iprot.readI32()
                        self.skillLevels.append(_elem447)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroState')
        if self.heroId is not None:
            oprot.writeFieldBegin('heroId', TType.STRING, 1)
            oprot.writeString(self.heroId.encode('utf-8') if sys.version_info[0] == 2 else self.heroId)
            oprot.writeFieldEnd()
        if self.evolutionLevel is not None:
            oprot.writeFieldBegin('evolutionLevel', TType.I32, 2)
            oprot.writeI32(self.evolutionLevel)
            oprot.writeFieldEnd()
        if self.heroStateId is not None:
            oprot.writeFieldBegin('heroStateId', TType.STRING, 3)
            oprot.writeString(self.heroStateId.encode('utf-8') if sys.version_info[0] == 2 else self.heroStateId)
            oprot.writeFieldEnd()
        if self.slotStatus is not None:
            oprot.writeFieldBegin('slotStatus', TType.LIST, 5)
            oprot.writeListBegin(TType.BOOL, len(self.slotStatus))
            for iter448 in self.slotStatus:
                oprot.writeBool(iter448)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.xp is not None:
            oprot.writeFieldBegin('xp', TType.I32, 6)
            oprot.writeI32(self.xp)
            oprot.writeFieldEnd()
        if self.skillLevels is not None:
            oprot.writeFieldBegin('skillLevels', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.skillLevels))
            for iter449 in self.skillLevels:
                oprot.writeI32(iter449)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroId is None:
            raise TProtocolException(message='Required field heroId is unset!')
        if self.evolutionLevel is None:
            raise TProtocolException(message='Required field evolutionLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EnemySpawnPoint(object):
    """
    Attributes:
     - levelSceneId
     - level
     - evolutionLevel
     - heroId
     - skillLevels
     - spawnTypeId
     - spawnParams
     - highlight
     - x
     - y
     - slotStatus
     - heroState
     - attackGroup
     - attackWait

    """


    def __init__(self, levelSceneId=None, level=None, evolutionLevel=None, heroId=None, skillLevels=None, spawnTypeId=None, spawnParams=None, highlight=None, x=None, y=None, slotStatus=None, heroState=None, attackGroup=None, attackWait=None,):
        self.levelSceneId = levelSceneId
        self.level = level
        self.evolutionLevel = evolutionLevel
        self.heroId = heroId
        self.skillLevels = skillLevels
        self.spawnTypeId = spawnTypeId
        self.spawnParams = spawnParams
        self.highlight = highlight
        self.x = x
        self.y = y
        self.slotStatus = slotStatus
        self.heroState = heroState
        self.attackGroup = attackGroup
        self.attackWait = attackWait

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.levelSceneId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.evolutionLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.heroId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.skillLevels = []
                    (_etype453, _size450) = iprot.readListBegin()
                    for _i454 in range(_size450):
                        _elem455 = iprot.readI32()
                        self.skillLevels.append(_elem455)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.spawnTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.spawnParams = []
                    (_etype459, _size456) = iprot.readListBegin()
                    for _i460 in range(_size456):
                        _elem461 = iprot.readI32()
                        self.spawnParams.append(_elem461)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.highlight = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.slotStatus = []
                    (_etype465, _size462) = iprot.readListBegin()
                    for _i466 in range(_size462):
                        _elem467 = iprot.readBool()
                        self.slotStatus.append(_elem467)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.heroState = HeroState()
                    self.heroState.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.attackGroup = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.attackWait = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnemySpawnPoint')
        if self.levelSceneId is not None:
            oprot.writeFieldBegin('levelSceneId', TType.STRING, 1)
            oprot.writeString(self.levelSceneId.encode('utf-8') if sys.version_info[0] == 2 else self.levelSceneId)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 3)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.evolutionLevel is not None:
            oprot.writeFieldBegin('evolutionLevel', TType.I32, 4)
            oprot.writeI32(self.evolutionLevel)
            oprot.writeFieldEnd()
        if self.heroId is not None:
            oprot.writeFieldBegin('heroId', TType.STRING, 5)
            oprot.writeString(self.heroId.encode('utf-8') if sys.version_info[0] == 2 else self.heroId)
            oprot.writeFieldEnd()
        if self.skillLevels is not None:
            oprot.writeFieldBegin('skillLevels', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.skillLevels))
            for iter468 in self.skillLevels:
                oprot.writeI32(iter468)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.spawnTypeId is not None:
            oprot.writeFieldBegin('spawnTypeId', TType.I32, 7)
            oprot.writeI32(self.spawnTypeId)
            oprot.writeFieldEnd()
        if self.spawnParams is not None:
            oprot.writeFieldBegin('spawnParams', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.spawnParams))
            for iter469 in self.spawnParams:
                oprot.writeI32(iter469)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.highlight is not None:
            oprot.writeFieldBegin('highlight', TType.BOOL, 9)
            oprot.writeBool(self.highlight)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 10)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 11)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.slotStatus is not None:
            oprot.writeFieldBegin('slotStatus', TType.LIST, 12)
            oprot.writeListBegin(TType.BOOL, len(self.slotStatus))
            for iter470 in self.slotStatus:
                oprot.writeBool(iter470)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroState is not None:
            oprot.writeFieldBegin('heroState', TType.STRUCT, 14)
            self.heroState.write(oprot)
            oprot.writeFieldEnd()
        if self.attackGroup is not None:
            oprot.writeFieldBegin('attackGroup', TType.I32, 15)
            oprot.writeI32(self.attackGroup)
            oprot.writeFieldEnd()
        if self.attackWait is not None:
            oprot.writeFieldBegin('attackWait', TType.DOUBLE, 16)
            oprot.writeDouble(self.attackWait)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.levelSceneId is None:
            raise TProtocolException(message='Required field levelSceneId is unset!')
        if self.x is None:
            raise TProtocolException(message='Required field x is unset!')
        if self.y is None:
            raise TProtocolException(message='Required field y is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EdgeElement(object):
    """
    Attributes:
     - edgeElementId
     - skillStatProfileId
     - placementTypeId
     - controllerPath
     - effectPath
     - collisionEffectListId
     - heroBadgePath
     - heroEffectListId
     - level
     - appearSoundId
     - launchSoundId

    """


    def __init__(self, edgeElementId=None, skillStatProfileId=None, placementTypeId=None, controllerPath=None, effectPath=None, collisionEffectListId=None, heroBadgePath=None, heroEffectListId=None, level=None, appearSoundId=None, launchSoundId=None,):
        self.edgeElementId = edgeElementId
        self.skillStatProfileId = skillStatProfileId
        self.placementTypeId = placementTypeId
        self.controllerPath = controllerPath
        self.effectPath = effectPath
        self.collisionEffectListId = collisionEffectListId
        self.heroBadgePath = heroBadgePath
        self.heroEffectListId = heroEffectListId
        self.level = level
        self.appearSoundId = appearSoundId
        self.launchSoundId = launchSoundId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.edgeElementId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.placementTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.controllerPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.effectPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.collisionEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.heroBadgePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.heroEffectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.appearSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.launchSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EdgeElement')
        if self.edgeElementId is not None:
            oprot.writeFieldBegin('edgeElementId', TType.STRING, 1)
            oprot.writeString(self.edgeElementId.encode('utf-8') if sys.version_info[0] == 2 else self.edgeElementId)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 2)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.placementTypeId is not None:
            oprot.writeFieldBegin('placementTypeId', TType.I32, 3)
            oprot.writeI32(self.placementTypeId)
            oprot.writeFieldEnd()
        if self.controllerPath is not None:
            oprot.writeFieldBegin('controllerPath', TType.STRING, 4)
            oprot.writeString(self.controllerPath.encode('utf-8') if sys.version_info[0] == 2 else self.controllerPath)
            oprot.writeFieldEnd()
        if self.effectPath is not None:
            oprot.writeFieldBegin('effectPath', TType.STRING, 5)
            oprot.writeString(self.effectPath.encode('utf-8') if sys.version_info[0] == 2 else self.effectPath)
            oprot.writeFieldEnd()
        if self.collisionEffectListId is not None:
            oprot.writeFieldBegin('collisionEffectListId', TType.STRING, 6)
            oprot.writeString(self.collisionEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.collisionEffectListId)
            oprot.writeFieldEnd()
        if self.heroBadgePath is not None:
            oprot.writeFieldBegin('heroBadgePath', TType.STRING, 7)
            oprot.writeString(self.heroBadgePath.encode('utf-8') if sys.version_info[0] == 2 else self.heroBadgePath)
            oprot.writeFieldEnd()
        if self.heroEffectListId is not None:
            oprot.writeFieldBegin('heroEffectListId', TType.STRING, 8)
            oprot.writeString(self.heroEffectListId.encode('utf-8') if sys.version_info[0] == 2 else self.heroEffectListId)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 9)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.appearSoundId is not None:
            oprot.writeFieldBegin('appearSoundId', TType.STRING, 10)
            oprot.writeString(self.appearSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.appearSoundId)
            oprot.writeFieldEnd()
        if self.launchSoundId is not None:
            oprot.writeFieldBegin('launchSoundId', TType.STRING, 11)
            oprot.writeString(self.launchSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.launchSoundId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.edgeElementId is None:
            raise TProtocolException(message='Required field edgeElementId is unset!')
        if self.skillStatProfileId is None:
            raise TProtocolException(message='Required field skillStatProfileId is unset!')
        if self.placementTypeId is None:
            raise TProtocolException(message='Required field placementTypeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Color(object):
    """
    Attributes:
     - colorId
     - red
     - green
     - blue
     - alpha

    """


    def __init__(self, colorId=None, red=None, green=None, blue=None, alpha=None,):
        self.colorId = colorId
        self.red = red
        self.green = green
        self.blue = blue
        self.alpha = alpha

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.colorId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.red = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.green = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.blue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.alpha = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Color')
        if self.colorId is not None:
            oprot.writeFieldBegin('colorId', TType.I32, 1)
            oprot.writeI32(self.colorId)
            oprot.writeFieldEnd()
        if self.red is not None:
            oprot.writeFieldBegin('red', TType.DOUBLE, 2)
            oprot.writeDouble(self.red)
            oprot.writeFieldEnd()
        if self.green is not None:
            oprot.writeFieldBegin('green', TType.DOUBLE, 3)
            oprot.writeDouble(self.green)
            oprot.writeFieldEnd()
        if self.blue is not None:
            oprot.writeFieldBegin('blue', TType.DOUBLE, 4)
            oprot.writeDouble(self.blue)
            oprot.writeFieldEnd()
        if self.alpha is not None:
            oprot.writeFieldBegin('alpha', TType.DOUBLE, 5)
            oprot.writeDouble(self.alpha)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.colorId is None:
            raise TProtocolException(message='Required field colorId is unset!')
        if self.red is None:
            raise TProtocolException(message='Required field red is unset!')
        if self.green is None:
            raise TProtocolException(message='Required field green is unset!')
        if self.blue is None:
            raise TProtocolException(message='Required field blue is unset!')
        if self.alpha is None:
            raise TProtocolException(message='Required field alpha is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Affinity(object):
    """
    Attributes:
     - affinityId
     - colorId
     - display
     - heroInfoBgPath
     - levelRibbonImagePath
     - heroSummaryBgPath
     - heroPurchaseCardFrame
     - evolveSequenceBgPath
     - healthBarPrefab
     - aimArrowPrefabPath
     - playerShieldImagePath
     - playerXpBarImagePath
     - activeHeroMarkerPrefab
     - bodyCirclePrefab
     - userIconBackgroundImage

    """


    def __init__(self, affinityId=None, colorId=None, display=None, heroInfoBgPath=None, levelRibbonImagePath=None, heroSummaryBgPath=None, heroPurchaseCardFrame=None, evolveSequenceBgPath=None, healthBarPrefab=None, aimArrowPrefabPath=None, playerShieldImagePath=None, playerXpBarImagePath=None, activeHeroMarkerPrefab=None, bodyCirclePrefab=None, userIconBackgroundImage=None,):
        self.affinityId = affinityId
        self.colorId = colorId
        self.display = display
        self.heroInfoBgPath = heroInfoBgPath
        self.levelRibbonImagePath = levelRibbonImagePath
        self.heroSummaryBgPath = heroSummaryBgPath
        self.heroPurchaseCardFrame = heroPurchaseCardFrame
        self.evolveSequenceBgPath = evolveSequenceBgPath
        self.healthBarPrefab = healthBarPrefab
        self.aimArrowPrefabPath = aimArrowPrefabPath
        self.playerShieldImagePath = playerShieldImagePath
        self.playerXpBarImagePath = playerXpBarImagePath
        self.activeHeroMarkerPrefab = activeHeroMarkerPrefab
        self.bodyCirclePrefab = bodyCirclePrefab
        self.userIconBackgroundImage = userIconBackgroundImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.affinityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.colorId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.heroInfoBgPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.levelRibbonImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.heroSummaryBgPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.heroPurchaseCardFrame = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.evolveSequenceBgPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.healthBarPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.aimArrowPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.playerShieldImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.playerXpBarImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.activeHeroMarkerPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.bodyCirclePrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.userIconBackgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Affinity')
        if self.affinityId is not None:
            oprot.writeFieldBegin('affinityId', TType.I32, 1)
            oprot.writeI32(self.affinityId)
            oprot.writeFieldEnd()
        if self.colorId is not None:
            oprot.writeFieldBegin('colorId', TType.I32, 2)
            oprot.writeI32(self.colorId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.heroInfoBgPath is not None:
            oprot.writeFieldBegin('heroInfoBgPath', TType.STRING, 5)
            oprot.writeString(self.heroInfoBgPath.encode('utf-8') if sys.version_info[0] == 2 else self.heroInfoBgPath)
            oprot.writeFieldEnd()
        if self.levelRibbonImagePath is not None:
            oprot.writeFieldBegin('levelRibbonImagePath', TType.STRING, 6)
            oprot.writeString(self.levelRibbonImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.levelRibbonImagePath)
            oprot.writeFieldEnd()
        if self.heroSummaryBgPath is not None:
            oprot.writeFieldBegin('heroSummaryBgPath', TType.STRING, 7)
            oprot.writeString(self.heroSummaryBgPath.encode('utf-8') if sys.version_info[0] == 2 else self.heroSummaryBgPath)
            oprot.writeFieldEnd()
        if self.heroPurchaseCardFrame is not None:
            oprot.writeFieldBegin('heroPurchaseCardFrame', TType.STRING, 8)
            oprot.writeString(self.heroPurchaseCardFrame.encode('utf-8') if sys.version_info[0] == 2 else self.heroPurchaseCardFrame)
            oprot.writeFieldEnd()
        if self.evolveSequenceBgPath is not None:
            oprot.writeFieldBegin('evolveSequenceBgPath', TType.STRING, 9)
            oprot.writeString(self.evolveSequenceBgPath.encode('utf-8') if sys.version_info[0] == 2 else self.evolveSequenceBgPath)
            oprot.writeFieldEnd()
        if self.healthBarPrefab is not None:
            oprot.writeFieldBegin('healthBarPrefab', TType.STRING, 10)
            oprot.writeString(self.healthBarPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.healthBarPrefab)
            oprot.writeFieldEnd()
        if self.aimArrowPrefabPath is not None:
            oprot.writeFieldBegin('aimArrowPrefabPath', TType.STRING, 11)
            oprot.writeString(self.aimArrowPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.aimArrowPrefabPath)
            oprot.writeFieldEnd()
        if self.playerShieldImagePath is not None:
            oprot.writeFieldBegin('playerShieldImagePath', TType.STRING, 12)
            oprot.writeString(self.playerShieldImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.playerShieldImagePath)
            oprot.writeFieldEnd()
        if self.playerXpBarImagePath is not None:
            oprot.writeFieldBegin('playerXpBarImagePath', TType.STRING, 13)
            oprot.writeString(self.playerXpBarImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.playerXpBarImagePath)
            oprot.writeFieldEnd()
        if self.activeHeroMarkerPrefab is not None:
            oprot.writeFieldBegin('activeHeroMarkerPrefab', TType.STRING, 20)
            oprot.writeString(self.activeHeroMarkerPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.activeHeroMarkerPrefab)
            oprot.writeFieldEnd()
        if self.bodyCirclePrefab is not None:
            oprot.writeFieldBegin('bodyCirclePrefab', TType.STRING, 21)
            oprot.writeString(self.bodyCirclePrefab.encode('utf-8') if sys.version_info[0] == 2 else self.bodyCirclePrefab)
            oprot.writeFieldEnd()
        if self.userIconBackgroundImage is not None:
            oprot.writeFieldBegin('userIconBackgroundImage', TType.STRING, 30)
            oprot.writeString(self.userIconBackgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.userIconBackgroundImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.affinityId is None:
            raise TProtocolException(message='Required field affinityId is unset!')
        if self.colorId is None:
            raise TProtocolException(message='Required field colorId is unset!')
        if self.activeHeroMarkerPrefab is None:
            raise TProtocolException(message='Required field activeHeroMarkerPrefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SoundClip(object):
    """
    Attributes:
     - soundClipId
     - audioSourceId
     - loop
     - soundClipListId
     - path

    """


    def __init__(self, soundClipId=None, audioSourceId=None, loop=None, soundClipListId=None, path=None,):
        self.soundClipId = soundClipId
        self.audioSourceId = audioSourceId
        self.loop = loop
        self.soundClipListId = soundClipListId
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.soundClipId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.audioSourceId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.loop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.soundClipListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SoundClip')
        if self.soundClipId is not None:
            oprot.writeFieldBegin('soundClipId', TType.STRING, 1)
            oprot.writeString(self.soundClipId.encode('utf-8') if sys.version_info[0] == 2 else self.soundClipId)
            oprot.writeFieldEnd()
        if self.audioSourceId is not None:
            oprot.writeFieldBegin('audioSourceId', TType.STRING, 2)
            oprot.writeString(self.audioSourceId.encode('utf-8') if sys.version_info[0] == 2 else self.audioSourceId)
            oprot.writeFieldEnd()
        if self.loop is not None:
            oprot.writeFieldBegin('loop', TType.BOOL, 3)
            oprot.writeBool(self.loop)
            oprot.writeFieldEnd()
        if self.soundClipListId is not None:
            oprot.writeFieldBegin('soundClipListId', TType.STRING, 10)
            oprot.writeString(self.soundClipListId.encode('utf-8') if sys.version_info[0] == 2 else self.soundClipListId)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 20)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.soundClipId is None:
            raise TProtocolException(message='Required field soundClipId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SoundClipList(object):
    """
    Attributes:
     - soundClipListId
     - soundClipIds

    """


    def __init__(self, soundClipListId=None, soundClipIds=None,):
        self.soundClipListId = soundClipListId
        self.soundClipIds = soundClipIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.soundClipListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.soundClipIds = []
                    (_etype474, _size471) = iprot.readListBegin()
                    for _i475 in range(_size471):
                        _elem476 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.soundClipIds.append(_elem476)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SoundClipList')
        if self.soundClipListId is not None:
            oprot.writeFieldBegin('soundClipListId', TType.STRING, 1)
            oprot.writeString(self.soundClipListId.encode('utf-8') if sys.version_info[0] == 2 else self.soundClipListId)
            oprot.writeFieldEnd()
        if self.soundClipIds is not None:
            oprot.writeFieldBegin('soundClipIds', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.soundClipIds))
            for iter477 in self.soundClipIds:
                oprot.writeString(iter477.encode('utf-8') if sys.version_info[0] == 2 else iter477)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.soundClipListId is None:
            raise TProtocolException(message='Required field soundClipListId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShopSection(object):
    """
    Attributes:
     - shopSectionId
     - priority
     - display
     - numItemsPerRow
     - sectionGroupId
     - sectionHeadingTemplate
     - rowHeightHint
     - isDebug

    """


    def __init__(self, shopSectionId=None, priority=None, display=None, numItemsPerRow=None, sectionGroupId=None, sectionHeadingTemplate=None, rowHeightHint=None, isDebug=None,):
        self.shopSectionId = shopSectionId
        self.priority = priority
        self.display = display
        self.numItemsPerRow = numItemsPerRow
        self.sectionGroupId = sectionGroupId
        self.sectionHeadingTemplate = sectionHeadingTemplate
        self.rowHeightHint = rowHeightHint
        self.isDebug = isDebug

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.shopSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numItemsPerRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sectionGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sectionHeadingTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rowHeightHint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isDebug = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShopSection')
        if self.shopSectionId is not None:
            oprot.writeFieldBegin('shopSectionId', TType.STRING, 1)
            oprot.writeString(self.shopSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.shopSectionId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.numItemsPerRow is not None:
            oprot.writeFieldBegin('numItemsPerRow', TType.I32, 5)
            oprot.writeI32(self.numItemsPerRow)
            oprot.writeFieldEnd()
        if self.sectionGroupId is not None:
            oprot.writeFieldBegin('sectionGroupId', TType.STRING, 6)
            oprot.writeString(self.sectionGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionGroupId)
            oprot.writeFieldEnd()
        if self.sectionHeadingTemplate is not None:
            oprot.writeFieldBegin('sectionHeadingTemplate', TType.STRING, 7)
            oprot.writeString(self.sectionHeadingTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingTemplate)
            oprot.writeFieldEnd()
        if self.rowHeightHint is not None:
            oprot.writeFieldBegin('rowHeightHint', TType.I32, 8)
            oprot.writeI32(self.rowHeightHint)
            oprot.writeFieldEnd()
        if self.isDebug is not None:
            oprot.writeFieldBegin('isDebug', TType.BOOL, 9)
            oprot.writeBool(self.isDebug)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.shopSectionId is None:
            raise TProtocolException(message='Required field shopSectionId is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventSection(object):
    """
    Attributes:
     - eventSectionId
     - priority
     - display
     - numItemsPerRow
     - sectionGroupId
     - sectionHeadingTemplate
     - rowHeightHint
     - isDebug

    """


    def __init__(self, eventSectionId=None, priority=None, display=None, numItemsPerRow=None, sectionGroupId=None, sectionHeadingTemplate=None, rowHeightHint=None, isDebug=None,):
        self.eventSectionId = eventSectionId
        self.priority = priority
        self.display = display
        self.numItemsPerRow = numItemsPerRow
        self.sectionGroupId = sectionGroupId
        self.sectionHeadingTemplate = sectionHeadingTemplate
        self.rowHeightHint = rowHeightHint
        self.isDebug = isDebug

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eventSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numItemsPerRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sectionGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sectionHeadingTemplate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rowHeightHint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isDebug = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventSection')
        if self.eventSectionId is not None:
            oprot.writeFieldBegin('eventSectionId', TType.STRING, 1)
            oprot.writeString(self.eventSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.eventSectionId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.numItemsPerRow is not None:
            oprot.writeFieldBegin('numItemsPerRow', TType.I32, 5)
            oprot.writeI32(self.numItemsPerRow)
            oprot.writeFieldEnd()
        if self.sectionGroupId is not None:
            oprot.writeFieldBegin('sectionGroupId', TType.STRING, 6)
            oprot.writeString(self.sectionGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionGroupId)
            oprot.writeFieldEnd()
        if self.sectionHeadingTemplate is not None:
            oprot.writeFieldBegin('sectionHeadingTemplate', TType.STRING, 7)
            oprot.writeString(self.sectionHeadingTemplate.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingTemplate)
            oprot.writeFieldEnd()
        if self.rowHeightHint is not None:
            oprot.writeFieldBegin('rowHeightHint', TType.I32, 8)
            oprot.writeI32(self.rowHeightHint)
            oprot.writeFieldEnd()
        if self.isDebug is not None:
            oprot.writeFieldBegin('isDebug', TType.BOOL, 9)
            oprot.writeBool(self.isDebug)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.eventSectionId is None:
            raise TProtocolException(message='Required field eventSectionId is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PurchaseOffer(object):
    """
    Attributes:
     - purchaseOfferId
     - shopSectionId
     - shopItemPrefab
     - rankMin
     - rankMax
     - priority
     - multiPackId
     - danger
     - mainMenuIconPrefab
     - vipLevelMin
     - vipLevelMax
     - productCurrencyId
     - productCurrencyCount
     - tokenCurrencyId
     - guildRankMin
     - guildRankMax
     - productTitle
     - costCurrencyId
     - currencyCost
     - maxPurchases
     - purchaseOfferResetTypeId
     - purchaseResetSeconds
     - unlockPurchaseOfferId
     - vipPointsAwarded
     - bannerImage
     - bannerText
     - itemImage
     - itemDescription
     - inboxPreviewImage
     - inboxBannerImage
     - inboxRibbonImage
     - inboxRibbonTitle
     - inboxPriority
     - borderImage
     - eventIds
     - eventPhaseIds
     - previewEventIds
     - previewEventPhaseIds

    """


    def __init__(self, purchaseOfferId=None, shopSectionId=None, shopItemPrefab=None, rankMin=None, rankMax=None, priority=None, multiPackId=None, danger=None, mainMenuIconPrefab=None, vipLevelMin=None, vipLevelMax=None, productCurrencyId=None, productCurrencyCount=None, tokenCurrencyId=None, guildRankMin=None, guildRankMax=None, productTitle=None, costCurrencyId=None, currencyCost=None, maxPurchases=None, purchaseOfferResetTypeId=None, purchaseResetSeconds=None, unlockPurchaseOfferId=None, vipPointsAwarded=None, bannerImage=None, bannerText=None, itemImage=None, itemDescription=None, inboxPreviewImage=None, inboxBannerImage=None, inboxRibbonImage=None, inboxRibbonTitle=None, inboxPriority=None, borderImage=None, eventIds=None, eventPhaseIds=None, previewEventIds=None, previewEventPhaseIds=None,):
        self.purchaseOfferId = purchaseOfferId
        self.shopSectionId = shopSectionId
        self.shopItemPrefab = shopItemPrefab
        self.rankMin = rankMin
        self.rankMax = rankMax
        self.priority = priority
        self.multiPackId = multiPackId
        self.danger = danger
        self.mainMenuIconPrefab = mainMenuIconPrefab
        self.vipLevelMin = vipLevelMin
        self.vipLevelMax = vipLevelMax
        self.productCurrencyId = productCurrencyId
        self.productCurrencyCount = productCurrencyCount
        self.tokenCurrencyId = tokenCurrencyId
        self.guildRankMin = guildRankMin
        self.guildRankMax = guildRankMax
        self.productTitle = productTitle
        self.costCurrencyId = costCurrencyId
        self.currencyCost = currencyCost
        self.maxPurchases = maxPurchases
        self.purchaseOfferResetTypeId = purchaseOfferResetTypeId
        self.purchaseResetSeconds = purchaseResetSeconds
        self.unlockPurchaseOfferId = unlockPurchaseOfferId
        self.vipPointsAwarded = vipPointsAwarded
        self.bannerImage = bannerImage
        self.bannerText = bannerText
        self.itemImage = itemImage
        self.itemDescription = itemDescription
        self.inboxPreviewImage = inboxPreviewImage
        self.inboxBannerImage = inboxBannerImage
        self.inboxRibbonImage = inboxRibbonImage
        self.inboxRibbonTitle = inboxRibbonTitle
        self.inboxPriority = inboxPriority
        self.borderImage = borderImage
        self.eventIds = eventIds
        self.eventPhaseIds = eventPhaseIds
        self.previewEventIds = previewEventIds
        self.previewEventPhaseIds = previewEventPhaseIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.purchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shopSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.shopItemPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rankMin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rankMax = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.multiPackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.danger = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mainMenuIconPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.vipLevelMin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.vipLevelMax = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.productCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.productCurrencyCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.tokenCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.guildRankMin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.guildRankMax = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.productTitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.costCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.currencyCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.maxPurchases = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.purchaseOfferResetTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.purchaseResetSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.unlockPurchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.vipPointsAwarded = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.bannerImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.bannerText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.itemImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.itemDescription = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.inboxPreviewImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.inboxBannerImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.inboxRibbonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.inboxRibbonTitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.I32:
                    self.inboxPriority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.borderImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.eventIds = []
                    (_etype481, _size478) = iprot.readListBegin()
                    for _i482 in range(_size478):
                        _elem483 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.eventIds.append(_elem483)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.LIST:
                    self.eventPhaseIds = []
                    (_etype487, _size484) = iprot.readListBegin()
                    for _i488 in range(_size484):
                        _elem489 = iprot.readI32()
                        self.eventPhaseIds.append(_elem489)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.LIST:
                    self.previewEventIds = []
                    (_etype493, _size490) = iprot.readListBegin()
                    for _i494 in range(_size490):
                        _elem495 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.previewEventIds.append(_elem495)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.LIST:
                    self.previewEventPhaseIds = []
                    (_etype499, _size496) = iprot.readListBegin()
                    for _i500 in range(_size496):
                        _elem501 = iprot.readI32()
                        self.previewEventPhaseIds.append(_elem501)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PurchaseOffer')
        if self.purchaseOfferId is not None:
            oprot.writeFieldBegin('purchaseOfferId', TType.STRING, 1)
            oprot.writeString(self.purchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseOfferId)
            oprot.writeFieldEnd()
        if self.shopSectionId is not None:
            oprot.writeFieldBegin('shopSectionId', TType.STRING, 2)
            oprot.writeString(self.shopSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.shopSectionId)
            oprot.writeFieldEnd()
        if self.shopItemPrefab is not None:
            oprot.writeFieldBegin('shopItemPrefab', TType.STRING, 3)
            oprot.writeString(self.shopItemPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.shopItemPrefab)
            oprot.writeFieldEnd()
        if self.rankMin is not None:
            oprot.writeFieldBegin('rankMin', TType.I32, 4)
            oprot.writeI32(self.rankMin)
            oprot.writeFieldEnd()
        if self.rankMax is not None:
            oprot.writeFieldBegin('rankMax', TType.I32, 5)
            oprot.writeI32(self.rankMax)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 6)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.multiPackId is not None:
            oprot.writeFieldBegin('multiPackId', TType.STRING, 7)
            oprot.writeString(self.multiPackId.encode('utf-8') if sys.version_info[0] == 2 else self.multiPackId)
            oprot.writeFieldEnd()
        if self.danger is not None:
            oprot.writeFieldBegin('danger', TType.BOOL, 8)
            oprot.writeBool(self.danger)
            oprot.writeFieldEnd()
        if self.mainMenuIconPrefab is not None:
            oprot.writeFieldBegin('mainMenuIconPrefab', TType.STRING, 9)
            oprot.writeString(self.mainMenuIconPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.mainMenuIconPrefab)
            oprot.writeFieldEnd()
        if self.vipLevelMin is not None:
            oprot.writeFieldBegin('vipLevelMin', TType.I32, 10)
            oprot.writeI32(self.vipLevelMin)
            oprot.writeFieldEnd()
        if self.vipLevelMax is not None:
            oprot.writeFieldBegin('vipLevelMax', TType.I32, 11)
            oprot.writeI32(self.vipLevelMax)
            oprot.writeFieldEnd()
        if self.productCurrencyId is not None:
            oprot.writeFieldBegin('productCurrencyId', TType.STRING, 12)
            oprot.writeString(self.productCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.productCurrencyId)
            oprot.writeFieldEnd()
        if self.productCurrencyCount is not None:
            oprot.writeFieldBegin('productCurrencyCount', TType.I32, 13)
            oprot.writeI32(self.productCurrencyCount)
            oprot.writeFieldEnd()
        if self.tokenCurrencyId is not None:
            oprot.writeFieldBegin('tokenCurrencyId', TType.STRING, 14)
            oprot.writeString(self.tokenCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.tokenCurrencyId)
            oprot.writeFieldEnd()
        if self.guildRankMin is not None:
            oprot.writeFieldBegin('guildRankMin', TType.I32, 17)
            oprot.writeI32(self.guildRankMin)
            oprot.writeFieldEnd()
        if self.guildRankMax is not None:
            oprot.writeFieldBegin('guildRankMax', TType.I32, 18)
            oprot.writeI32(self.guildRankMax)
            oprot.writeFieldEnd()
        if self.productTitle is not None:
            oprot.writeFieldBegin('productTitle', TType.STRING, 19)
            oprot.writeString(self.productTitle.encode('utf-8') if sys.version_info[0] == 2 else self.productTitle)
            oprot.writeFieldEnd()
        if self.costCurrencyId is not None:
            oprot.writeFieldBegin('costCurrencyId', TType.STRING, 20)
            oprot.writeString(self.costCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.costCurrencyId)
            oprot.writeFieldEnd()
        if self.currencyCost is not None:
            oprot.writeFieldBegin('currencyCost', TType.I32, 21)
            oprot.writeI32(self.currencyCost)
            oprot.writeFieldEnd()
        if self.maxPurchases is not None:
            oprot.writeFieldBegin('maxPurchases', TType.I32, 22)
            oprot.writeI32(self.maxPurchases)
            oprot.writeFieldEnd()
        if self.purchaseOfferResetTypeId is not None:
            oprot.writeFieldBegin('purchaseOfferResetTypeId', TType.I32, 23)
            oprot.writeI32(self.purchaseOfferResetTypeId)
            oprot.writeFieldEnd()
        if self.purchaseResetSeconds is not None:
            oprot.writeFieldBegin('purchaseResetSeconds', TType.I32, 24)
            oprot.writeI32(self.purchaseResetSeconds)
            oprot.writeFieldEnd()
        if self.unlockPurchaseOfferId is not None:
            oprot.writeFieldBegin('unlockPurchaseOfferId', TType.STRING, 25)
            oprot.writeString(self.unlockPurchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.unlockPurchaseOfferId)
            oprot.writeFieldEnd()
        if self.vipPointsAwarded is not None:
            oprot.writeFieldBegin('vipPointsAwarded', TType.I32, 26)
            oprot.writeI32(self.vipPointsAwarded)
            oprot.writeFieldEnd()
        if self.bannerImage is not None:
            oprot.writeFieldBegin('bannerImage', TType.STRING, 27)
            oprot.writeString(self.bannerImage.encode('utf-8') if sys.version_info[0] == 2 else self.bannerImage)
            oprot.writeFieldEnd()
        if self.bannerText is not None:
            oprot.writeFieldBegin('bannerText', TType.STRING, 28)
            oprot.writeString(self.bannerText.encode('utf-8') if sys.version_info[0] == 2 else self.bannerText)
            oprot.writeFieldEnd()
        if self.itemImage is not None:
            oprot.writeFieldBegin('itemImage', TType.STRING, 29)
            oprot.writeString(self.itemImage.encode('utf-8') if sys.version_info[0] == 2 else self.itemImage)
            oprot.writeFieldEnd()
        if self.itemDescription is not None:
            oprot.writeFieldBegin('itemDescription', TType.STRING, 30)
            oprot.writeString(self.itemDescription.encode('utf-8') if sys.version_info[0] == 2 else self.itemDescription)
            oprot.writeFieldEnd()
        if self.inboxPreviewImage is not None:
            oprot.writeFieldBegin('inboxPreviewImage', TType.STRING, 31)
            oprot.writeString(self.inboxPreviewImage.encode('utf-8') if sys.version_info[0] == 2 else self.inboxPreviewImage)
            oprot.writeFieldEnd()
        if self.inboxBannerImage is not None:
            oprot.writeFieldBegin('inboxBannerImage', TType.STRING, 32)
            oprot.writeString(self.inboxBannerImage.encode('utf-8') if sys.version_info[0] == 2 else self.inboxBannerImage)
            oprot.writeFieldEnd()
        if self.inboxRibbonImage is not None:
            oprot.writeFieldBegin('inboxRibbonImage', TType.STRING, 33)
            oprot.writeString(self.inboxRibbonImage.encode('utf-8') if sys.version_info[0] == 2 else self.inboxRibbonImage)
            oprot.writeFieldEnd()
        if self.inboxRibbonTitle is not None:
            oprot.writeFieldBegin('inboxRibbonTitle', TType.STRING, 34)
            oprot.writeString(self.inboxRibbonTitle.encode('utf-8') if sys.version_info[0] == 2 else self.inboxRibbonTitle)
            oprot.writeFieldEnd()
        if self.inboxPriority is not None:
            oprot.writeFieldBegin('inboxPriority', TType.I32, 35)
            oprot.writeI32(self.inboxPriority)
            oprot.writeFieldEnd()
        if self.borderImage is not None:
            oprot.writeFieldBegin('borderImage', TType.STRING, 36)
            oprot.writeString(self.borderImage.encode('utf-8') if sys.version_info[0] == 2 else self.borderImage)
            oprot.writeFieldEnd()
        if self.eventIds is not None:
            oprot.writeFieldBegin('eventIds', TType.LIST, 40)
            oprot.writeListBegin(TType.STRING, len(self.eventIds))
            for iter502 in self.eventIds:
                oprot.writeString(iter502.encode('utf-8') if sys.version_info[0] == 2 else iter502)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.eventPhaseIds is not None:
            oprot.writeFieldBegin('eventPhaseIds', TType.LIST, 41)
            oprot.writeListBegin(TType.I32, len(self.eventPhaseIds))
            for iter503 in self.eventPhaseIds:
                oprot.writeI32(iter503)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.previewEventIds is not None:
            oprot.writeFieldBegin('previewEventIds', TType.LIST, 42)
            oprot.writeListBegin(TType.STRING, len(self.previewEventIds))
            for iter504 in self.previewEventIds:
                oprot.writeString(iter504.encode('utf-8') if sys.version_info[0] == 2 else iter504)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.previewEventPhaseIds is not None:
            oprot.writeFieldBegin('previewEventPhaseIds', TType.LIST, 43)
            oprot.writeListBegin(TType.I32, len(self.previewEventPhaseIds))
            for iter505 in self.previewEventPhaseIds:
                oprot.writeI32(iter505)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.purchaseOfferId is None:
            raise TProtocolException(message='Required field purchaseOfferId is unset!')
        if self.costCurrencyId is None:
            raise TProtocolException(message='Required field costCurrencyId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GemPass(object):
    """
    Attributes:
     - purchaseOfferId
     - description
     - welcomeGiftMessageId
     - durationDays
     - numGemsPerDay
     - iOSProductId
     - googleProductId
     - iOSSubscriptionProductId
     - googleSubscriptionProductId
     - welcomeGenericDialogId
     - subscriptionBonusMessageId

    """


    def __init__(self, purchaseOfferId=None, description=None, welcomeGiftMessageId=None, durationDays=None, numGemsPerDay=None, iOSProductId=None, googleProductId=None, iOSSubscriptionProductId=None, googleSubscriptionProductId=None, welcomeGenericDialogId=None, subscriptionBonusMessageId=None,):
        self.purchaseOfferId = purchaseOfferId
        self.description = description
        self.welcomeGiftMessageId = welcomeGiftMessageId
        self.durationDays = durationDays
        self.numGemsPerDay = numGemsPerDay
        self.iOSProductId = iOSProductId
        self.googleProductId = googleProductId
        self.iOSSubscriptionProductId = iOSSubscriptionProductId
        self.googleSubscriptionProductId = googleSubscriptionProductId
        self.welcomeGenericDialogId = welcomeGenericDialogId
        self.subscriptionBonusMessageId = subscriptionBonusMessageId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.purchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.welcomeGiftMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.durationDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.numGemsPerDay = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.iOSProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.googleProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.iOSSubscriptionProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.googleSubscriptionProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.welcomeGenericDialogId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.subscriptionBonusMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GemPass')
        if self.purchaseOfferId is not None:
            oprot.writeFieldBegin('purchaseOfferId', TType.STRING, 1)
            oprot.writeString(self.purchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseOfferId)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.welcomeGiftMessageId is not None:
            oprot.writeFieldBegin('welcomeGiftMessageId', TType.STRING, 5)
            oprot.writeString(self.welcomeGiftMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.welcomeGiftMessageId)
            oprot.writeFieldEnd()
        if self.durationDays is not None:
            oprot.writeFieldBegin('durationDays', TType.I32, 6)
            oprot.writeI32(self.durationDays)
            oprot.writeFieldEnd()
        if self.numGemsPerDay is not None:
            oprot.writeFieldBegin('numGemsPerDay', TType.I32, 7)
            oprot.writeI32(self.numGemsPerDay)
            oprot.writeFieldEnd()
        if self.iOSProductId is not None:
            oprot.writeFieldBegin('iOSProductId', TType.STRING, 10)
            oprot.writeString(self.iOSProductId.encode('utf-8') if sys.version_info[0] == 2 else self.iOSProductId)
            oprot.writeFieldEnd()
        if self.googleProductId is not None:
            oprot.writeFieldBegin('googleProductId', TType.STRING, 11)
            oprot.writeString(self.googleProductId.encode('utf-8') if sys.version_info[0] == 2 else self.googleProductId)
            oprot.writeFieldEnd()
        if self.iOSSubscriptionProductId is not None:
            oprot.writeFieldBegin('iOSSubscriptionProductId', TType.STRING, 12)
            oprot.writeString(self.iOSSubscriptionProductId.encode('utf-8') if sys.version_info[0] == 2 else self.iOSSubscriptionProductId)
            oprot.writeFieldEnd()
        if self.googleSubscriptionProductId is not None:
            oprot.writeFieldBegin('googleSubscriptionProductId', TType.STRING, 13)
            oprot.writeString(self.googleSubscriptionProductId.encode('utf-8') if sys.version_info[0] == 2 else self.googleSubscriptionProductId)
            oprot.writeFieldEnd()
        if self.welcomeGenericDialogId is not None:
            oprot.writeFieldBegin('welcomeGenericDialogId', TType.STRING, 14)
            oprot.writeString(self.welcomeGenericDialogId.encode('utf-8') if sys.version_info[0] == 2 else self.welcomeGenericDialogId)
            oprot.writeFieldEnd()
        if self.subscriptionBonusMessageId is not None:
            oprot.writeFieldBegin('subscriptionBonusMessageId', TType.STRING, 15)
            oprot.writeString(self.subscriptionBonusMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.subscriptionBonusMessageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.purchaseOfferId is None:
            raise TProtocolException(message='Required field purchaseOfferId is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        if self.welcomeGiftMessageId is None:
            raise TProtocolException(message='Required field welcomeGiftMessageId is unset!')
        if self.durationDays is None:
            raise TProtocolException(message='Required field durationDays is unset!')
        if self.numGemsPerDay is None:
            raise TProtocolException(message='Required field numGemsPerDay is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SubscriptionPurchaseOffer(object):
    """
    Attributes:
     - subscriptionPurchaseOfferId
     - purchaseOfferId
     - subscriptionBonusGems

    """


    def __init__(self, subscriptionPurchaseOfferId=None, purchaseOfferId=None, subscriptionBonusGems=None,):
        self.subscriptionPurchaseOfferId = subscriptionPurchaseOfferId
        self.purchaseOfferId = purchaseOfferId
        self.subscriptionBonusGems = subscriptionBonusGems

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.subscriptionPurchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.purchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.subscriptionBonusGems = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SubscriptionPurchaseOffer')
        if self.subscriptionPurchaseOfferId is not None:
            oprot.writeFieldBegin('subscriptionPurchaseOfferId', TType.STRING, 1)
            oprot.writeString(self.subscriptionPurchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.subscriptionPurchaseOfferId)
            oprot.writeFieldEnd()
        if self.purchaseOfferId is not None:
            oprot.writeFieldBegin('purchaseOfferId', TType.STRING, 2)
            oprot.writeString(self.purchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseOfferId)
            oprot.writeFieldEnd()
        if self.subscriptionBonusGems is not None:
            oprot.writeFieldBegin('subscriptionBonusGems', TType.I32, 3)
            oprot.writeI32(self.subscriptionBonusGems)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.subscriptionPurchaseOfferId is None:
            raise TProtocolException(message='Required field subscriptionPurchaseOfferId is unset!')
        if self.purchaseOfferId is None:
            raise TProtocolException(message='Required field purchaseOfferId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GemPack(object):
    """
    Attributes:
     - purchaseOfferId
     - description
     - numGems
     - iOSProductId
     - googleProductId

    """


    def __init__(self, purchaseOfferId=None, description=None, numGems=None, iOSProductId=None, googleProductId=None,):
        self.purchaseOfferId = purchaseOfferId
        self.description = description
        self.numGems = numGems
        self.iOSProductId = iOSProductId
        self.googleProductId = googleProductId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.purchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.numGems = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.iOSProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.googleProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GemPack')
        if self.purchaseOfferId is not None:
            oprot.writeFieldBegin('purchaseOfferId', TType.STRING, 1)
            oprot.writeString(self.purchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseOfferId)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.numGems is not None:
            oprot.writeFieldBegin('numGems', TType.I32, 7)
            oprot.writeI32(self.numGems)
            oprot.writeFieldEnd()
        if self.iOSProductId is not None:
            oprot.writeFieldBegin('iOSProductId', TType.STRING, 10)
            oprot.writeString(self.iOSProductId.encode('utf-8') if sys.version_info[0] == 2 else self.iOSProductId)
            oprot.writeFieldEnd()
        if self.googleProductId is not None:
            oprot.writeFieldBegin('googleProductId', TType.STRING, 11)
            oprot.writeString(self.googleProductId.encode('utf-8') if sys.version_info[0] == 2 else self.googleProductId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.purchaseOfferId is None:
            raise TProtocolException(message='Required field purchaseOfferId is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        if self.numGems is None:
            raise TProtocolException(message='Required field numGems is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CashPurchaseInfo(object):
    """
    Attributes:
     - purchaseOfferId
     - iOSProductId
     - googleProductId
     - iOSProductIdUndiscounted
     - googleProductIdUndiscounted

    """


    def __init__(self, purchaseOfferId=None, iOSProductId=None, googleProductId=None, iOSProductIdUndiscounted=None, googleProductIdUndiscounted=None,):
        self.purchaseOfferId = purchaseOfferId
        self.iOSProductId = iOSProductId
        self.googleProductId = googleProductId
        self.iOSProductIdUndiscounted = iOSProductIdUndiscounted
        self.googleProductIdUndiscounted = googleProductIdUndiscounted

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.purchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.iOSProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.googleProductId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.iOSProductIdUndiscounted = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.googleProductIdUndiscounted = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CashPurchaseInfo')
        if self.purchaseOfferId is not None:
            oprot.writeFieldBegin('purchaseOfferId', TType.STRING, 1)
            oprot.writeString(self.purchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseOfferId)
            oprot.writeFieldEnd()
        if self.iOSProductId is not None:
            oprot.writeFieldBegin('iOSProductId', TType.STRING, 10)
            oprot.writeString(self.iOSProductId.encode('utf-8') if sys.version_info[0] == 2 else self.iOSProductId)
            oprot.writeFieldEnd()
        if self.googleProductId is not None:
            oprot.writeFieldBegin('googleProductId', TType.STRING, 11)
            oprot.writeString(self.googleProductId.encode('utf-8') if sys.version_info[0] == 2 else self.googleProductId)
            oprot.writeFieldEnd()
        if self.iOSProductIdUndiscounted is not None:
            oprot.writeFieldBegin('iOSProductIdUndiscounted', TType.STRING, 12)
            oprot.writeString(self.iOSProductIdUndiscounted.encode('utf-8') if sys.version_info[0] == 2 else self.iOSProductIdUndiscounted)
            oprot.writeFieldEnd()
        if self.googleProductIdUndiscounted is not None:
            oprot.writeFieldBegin('googleProductIdUndiscounted', TType.STRING, 13)
            oprot.writeString(self.googleProductIdUndiscounted.encode('utf-8') if sys.version_info[0] == 2 else self.googleProductIdUndiscounted)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.purchaseOfferId is None:
            raise TProtocolException(message='Required field purchaseOfferId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Currency(object):
    """
    Attributes:
     - currencyId
     - pluralName
     - singularName
     - maxByRank
     - currencyTargetId
     - startBalance
     - currencyTypeId
     - textColorRgba
     - iconImagePath
     - cardImagePath
     - inboxIconImagePath
     - goldExchangeValue
     - value
     - hudElementPrefabPath
     - hudSlotNum
     - purchaseMenuId
     - cardImagePathDisabled
     - hideInRewards

    """


    def __init__(self, currencyId=None, pluralName=None, singularName=None, maxByRank=None, currencyTargetId=None, startBalance=None, currencyTypeId=None, textColorRgba=None, iconImagePath=None, cardImagePath=None, inboxIconImagePath=None, goldExchangeValue=None, value=None, hudElementPrefabPath=None, hudSlotNum=None, purchaseMenuId=None, cardImagePathDisabled=None, hideInRewards=None,):
        self.currencyId = currencyId
        self.pluralName = pluralName
        self.singularName = singularName
        self.maxByRank = maxByRank
        self.currencyTargetId = currencyTargetId
        self.startBalance = startBalance
        self.currencyTypeId = currencyTypeId
        self.textColorRgba = textColorRgba
        self.iconImagePath = iconImagePath
        self.cardImagePath = cardImagePath
        self.inboxIconImagePath = inboxIconImagePath
        self.goldExchangeValue = goldExchangeValue
        self.value = value
        self.hudElementPrefabPath = hudElementPrefabPath
        self.hudSlotNum = hudSlotNum
        self.purchaseMenuId = purchaseMenuId
        self.cardImagePathDisabled = cardImagePathDisabled
        self.hideInRewards = hideInRewards

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pluralName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.singularName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.maxByRank = []
                    (_etype509, _size506) = iprot.readListBegin()
                    for _i510 in range(_size506):
                        _elem511 = iprot.readI32()
                        self.maxByRank.append(_elem511)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.currencyTargetId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.startBalance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.currencyTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.textColorRgba = []
                    (_etype515, _size512) = iprot.readListBegin()
                    for _i516 in range(_size512):
                        _elem517 = iprot.readI32()
                        self.textColorRgba.append(_elem517)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.iconImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.cardImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.inboxIconImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.goldExchangeValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.hudElementPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.hudSlotNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.purchaseMenuId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.cardImagePathDisabled = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.hideInRewards = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Currency')
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 1)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.pluralName is not None:
            oprot.writeFieldBegin('pluralName', TType.STRING, 2)
            oprot.writeString(self.pluralName.encode('utf-8') if sys.version_info[0] == 2 else self.pluralName)
            oprot.writeFieldEnd()
        if self.singularName is not None:
            oprot.writeFieldBegin('singularName', TType.STRING, 3)
            oprot.writeString(self.singularName.encode('utf-8') if sys.version_info[0] == 2 else self.singularName)
            oprot.writeFieldEnd()
        if self.maxByRank is not None:
            oprot.writeFieldBegin('maxByRank', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.maxByRank))
            for iter518 in self.maxByRank:
                oprot.writeI32(iter518)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.currencyTargetId is not None:
            oprot.writeFieldBegin('currencyTargetId', TType.I32, 5)
            oprot.writeI32(self.currencyTargetId)
            oprot.writeFieldEnd()
        if self.startBalance is not None:
            oprot.writeFieldBegin('startBalance', TType.I32, 6)
            oprot.writeI32(self.startBalance)
            oprot.writeFieldEnd()
        if self.currencyTypeId is not None:
            oprot.writeFieldBegin('currencyTypeId', TType.I32, 7)
            oprot.writeI32(self.currencyTypeId)
            oprot.writeFieldEnd()
        if self.textColorRgba is not None:
            oprot.writeFieldBegin('textColorRgba', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.textColorRgba))
            for iter519 in self.textColorRgba:
                oprot.writeI32(iter519)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iconImagePath is not None:
            oprot.writeFieldBegin('iconImagePath', TType.STRING, 9)
            oprot.writeString(self.iconImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.iconImagePath)
            oprot.writeFieldEnd()
        if self.cardImagePath is not None:
            oprot.writeFieldBegin('cardImagePath', TType.STRING, 10)
            oprot.writeString(self.cardImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.cardImagePath)
            oprot.writeFieldEnd()
        if self.inboxIconImagePath is not None:
            oprot.writeFieldBegin('inboxIconImagePath', TType.STRING, 11)
            oprot.writeString(self.inboxIconImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.inboxIconImagePath)
            oprot.writeFieldEnd()
        if self.goldExchangeValue is not None:
            oprot.writeFieldBegin('goldExchangeValue', TType.I32, 12)
            oprot.writeI32(self.goldExchangeValue)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 13)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        if self.hudElementPrefabPath is not None:
            oprot.writeFieldBegin('hudElementPrefabPath', TType.STRING, 14)
            oprot.writeString(self.hudElementPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.hudElementPrefabPath)
            oprot.writeFieldEnd()
        if self.hudSlotNum is not None:
            oprot.writeFieldBegin('hudSlotNum', TType.I32, 15)
            oprot.writeI32(self.hudSlotNum)
            oprot.writeFieldEnd()
        if self.purchaseMenuId is not None:
            oprot.writeFieldBegin('purchaseMenuId', TType.STRING, 16)
            oprot.writeString(self.purchaseMenuId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseMenuId)
            oprot.writeFieldEnd()
        if self.cardImagePathDisabled is not None:
            oprot.writeFieldBegin('cardImagePathDisabled', TType.STRING, 17)
            oprot.writeString(self.cardImagePathDisabled.encode('utf-8') if sys.version_info[0] == 2 else self.cardImagePathDisabled)
            oprot.writeFieldEnd()
        if self.hideInRewards is not None:
            oprot.writeFieldBegin('hideInRewards', TType.BOOL, 18)
            oprot.writeBool(self.hideInRewards)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CurrencyRecharge(object):
    """
    Attributes:
     - currencyId
     - defaultRechargeSeconds

    """


    def __init__(self, currencyId=None, defaultRechargeSeconds=None,):
        self.currencyId = currencyId
        self.defaultRechargeSeconds = defaultRechargeSeconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.defaultRechargeSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CurrencyRecharge')
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 1)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.defaultRechargeSeconds is not None:
            oprot.writeFieldBegin('defaultRechargeSeconds', TType.I32, 2)
            oprot.writeI32(self.defaultRechargeSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.defaultRechargeSeconds is None:
            raise TProtocolException(message='Required field defaultRechargeSeconds is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CurrencyRankMaxEntry(object):
    """
    Attributes:
     - currencyId
     - rankId
     - max

    """


    def __init__(self, currencyId=None, rankId=None, max=None,):
        self.currencyId = currencyId
        self.rankId = rankId
        self.max = max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rankId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CurrencyRankMaxEntry')
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 1)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.rankId is not None:
            oprot.writeFieldBegin('rankId', TType.I32, 2)
            oprot.writeI32(self.rankId)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I32, 3)
            oprot.writeI32(self.max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.rankId is None:
            raise TProtocolException(message='Required field rankId is unset!')
        if self.max is None:
            raise TProtocolException(message='Required field max is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Rank(object):
    """
    Attributes:
     - rankId
     - xp
     - maxStamina
     - maxHeroes
     - maxRecruits
     - rewardChestId
     - rewardCurrencies
     - rewardCurrencyCounts

    """


    def __init__(self, rankId=None, xp=None, maxStamina=None, maxHeroes=None, maxRecruits=None, rewardChestId=None, rewardCurrencies=None, rewardCurrencyCounts=None,):
        self.rankId = rankId
        self.xp = xp
        self.maxStamina = maxStamina
        self.maxHeroes = maxHeroes
        self.maxRecruits = maxRecruits
        self.rewardChestId = rewardChestId
        self.rewardCurrencies = rewardCurrencies
        self.rewardCurrencyCounts = rewardCurrencyCounts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.rankId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.xp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.maxStamina = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.maxHeroes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.maxRecruits = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.rewardChestId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.rewardCurrencies = []
                    (_etype523, _size520) = iprot.readListBegin()
                    for _i524 in range(_size520):
                        _elem525 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.rewardCurrencies.append(_elem525)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.rewardCurrencyCounts = []
                    (_etype529, _size526) = iprot.readListBegin()
                    for _i530 in range(_size526):
                        _elem531 = iprot.readI32()
                        self.rewardCurrencyCounts.append(_elem531)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Rank')
        if self.rankId is not None:
            oprot.writeFieldBegin('rankId', TType.I32, 1)
            oprot.writeI32(self.rankId)
            oprot.writeFieldEnd()
        if self.xp is not None:
            oprot.writeFieldBegin('xp', TType.I32, 2)
            oprot.writeI32(self.xp)
            oprot.writeFieldEnd()
        if self.maxStamina is not None:
            oprot.writeFieldBegin('maxStamina', TType.I32, 3)
            oprot.writeI32(self.maxStamina)
            oprot.writeFieldEnd()
        if self.maxHeroes is not None:
            oprot.writeFieldBegin('maxHeroes', TType.I32, 4)
            oprot.writeI32(self.maxHeroes)
            oprot.writeFieldEnd()
        if self.maxRecruits is not None:
            oprot.writeFieldBegin('maxRecruits', TType.I32, 5)
            oprot.writeI32(self.maxRecruits)
            oprot.writeFieldEnd()
        if self.rewardChestId is not None:
            oprot.writeFieldBegin('rewardChestId', TType.STRING, 6)
            oprot.writeString(self.rewardChestId.encode('utf-8') if sys.version_info[0] == 2 else self.rewardChestId)
            oprot.writeFieldEnd()
        if self.rewardCurrencies is not None:
            oprot.writeFieldBegin('rewardCurrencies', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.rewardCurrencies))
            for iter532 in self.rewardCurrencies:
                oprot.writeString(iter532.encode('utf-8') if sys.version_info[0] == 2 else iter532)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rewardCurrencyCounts is not None:
            oprot.writeFieldBegin('rewardCurrencyCounts', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.rewardCurrencyCounts))
            for iter533 in self.rewardCurrencyCounts:
                oprot.writeI32(iter533)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.rankId is None:
            raise TProtocolException(message='Required field rankId is unset!')
        if self.xp is None:
            raise TProtocolException(message='Required field xp is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VipLevel(object):
    """
    Attributes:
     - vipLevelId
     - vipPoints
     - percentPurchaseGemsBonus
     - numFreeDailyLootTickets
     - maxDailyStaminaPurchases
     - numDailyLootTickets
     - benefitsDesc

    """


    def __init__(self, vipLevelId=None, vipPoints=None, percentPurchaseGemsBonus=None, numFreeDailyLootTickets=None, maxDailyStaminaPurchases=None, numDailyLootTickets=None, benefitsDesc=None,):
        self.vipLevelId = vipLevelId
        self.vipPoints = vipPoints
        self.percentPurchaseGemsBonus = percentPurchaseGemsBonus
        self.numFreeDailyLootTickets = numFreeDailyLootTickets
        self.maxDailyStaminaPurchases = maxDailyStaminaPurchases
        self.numDailyLootTickets = numDailyLootTickets
        self.benefitsDesc = benefitsDesc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vipLevelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vipPoints = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.percentPurchaseGemsBonus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.numFreeDailyLootTickets = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.maxDailyStaminaPurchases = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.numDailyLootTickets = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.benefitsDesc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VipLevel')
        if self.vipLevelId is not None:
            oprot.writeFieldBegin('vipLevelId', TType.I32, 1)
            oprot.writeI32(self.vipLevelId)
            oprot.writeFieldEnd()
        if self.vipPoints is not None:
            oprot.writeFieldBegin('vipPoints', TType.I32, 2)
            oprot.writeI32(self.vipPoints)
            oprot.writeFieldEnd()
        if self.percentPurchaseGemsBonus is not None:
            oprot.writeFieldBegin('percentPurchaseGemsBonus', TType.I32, 3)
            oprot.writeI32(self.percentPurchaseGemsBonus)
            oprot.writeFieldEnd()
        if self.numFreeDailyLootTickets is not None:
            oprot.writeFieldBegin('numFreeDailyLootTickets', TType.I32, 4)
            oprot.writeI32(self.numFreeDailyLootTickets)
            oprot.writeFieldEnd()
        if self.maxDailyStaminaPurchases is not None:
            oprot.writeFieldBegin('maxDailyStaminaPurchases', TType.I32, 5)
            oprot.writeI32(self.maxDailyStaminaPurchases)
            oprot.writeFieldEnd()
        if self.numDailyLootTickets is not None:
            oprot.writeFieldBegin('numDailyLootTickets', TType.I32, 6)
            oprot.writeI32(self.numDailyLootTickets)
            oprot.writeFieldEnd()
        if self.benefitsDesc is not None:
            oprot.writeFieldBegin('benefitsDesc', TType.STRING, 7)
            oprot.writeString(self.benefitsDesc.encode('utf-8') if sys.version_info[0] == 2 else self.benefitsDesc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.vipLevelId is None:
            raise TProtocolException(message='Required field vipLevelId is unset!')
        if self.vipPoints is None:
            raise TProtocolException(message='Required field vipPoints is unset!')
        if self.percentPurchaseGemsBonus is None:
            raise TProtocolException(message='Required field percentPurchaseGemsBonus is unset!')
        if self.numFreeDailyLootTickets is None:
            raise TProtocolException(message='Required field numFreeDailyLootTickets is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Location(object):
    """
    Attributes:
     - locationId
     - countryCode
     - isoNumericId
     - displayOrder
     - hide
     - flagImage
     - countryDisplay
     - shortDisplay
     - capital
     - continent
     - country

    """


    def __init__(self, locationId=None, countryCode=None, isoNumericId=None, displayOrder=None, hide=None, flagImage=None, countryDisplay=None, shortDisplay=None, capital=None, continent=None, country=None,):
        self.locationId = locationId
        self.countryCode = countryCode
        self.isoNumericId = isoNumericId
        self.displayOrder = displayOrder
        self.hide = hide
        self.flagImage = flagImage
        self.countryDisplay = countryDisplay
        self.shortDisplay = shortDisplay
        self.capital = capital
        self.continent = continent
        self.country = country

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.locationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.isoNumericId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.hide = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.flagImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.countryDisplay = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.shortDisplay = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.capital = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.continent = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Location')
        if self.locationId is not None:
            oprot.writeFieldBegin('locationId', TType.STRING, 1)
            oprot.writeString(self.locationId.encode('utf-8') if sys.version_info[0] == 2 else self.locationId)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 2)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        if self.isoNumericId is not None:
            oprot.writeFieldBegin('isoNumericId', TType.I32, 3)
            oprot.writeI32(self.isoNumericId)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 4)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.hide is not None:
            oprot.writeFieldBegin('hide', TType.BOOL, 5)
            oprot.writeBool(self.hide)
            oprot.writeFieldEnd()
        if self.flagImage is not None:
            oprot.writeFieldBegin('flagImage', TType.STRING, 10)
            oprot.writeString(self.flagImage.encode('utf-8') if sys.version_info[0] == 2 else self.flagImage)
            oprot.writeFieldEnd()
        if self.countryDisplay is not None:
            oprot.writeFieldBegin('countryDisplay', TType.STRING, 12)
            oprot.writeString(self.countryDisplay.encode('utf-8') if sys.version_info[0] == 2 else self.countryDisplay)
            oprot.writeFieldEnd()
        if self.shortDisplay is not None:
            oprot.writeFieldBegin('shortDisplay', TType.STRING, 16)
            oprot.writeString(self.shortDisplay.encode('utf-8') if sys.version_info[0] == 2 else self.shortDisplay)
            oprot.writeFieldEnd()
        if self.capital is not None:
            oprot.writeFieldBegin('capital', TType.STRING, 20)
            oprot.writeString(self.capital.encode('utf-8') if sys.version_info[0] == 2 else self.capital)
            oprot.writeFieldEnd()
        if self.continent is not None:
            oprot.writeFieldBegin('continent', TType.STRING, 21)
            oprot.writeString(self.continent.encode('utf-8') if sys.version_info[0] == 2 else self.continent)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 22)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.locationId is None:
            raise TProtocolException(message='Required field locationId is unset!')
        if self.countryDisplay is None:
            raise TProtocolException(message='Required field countryDisplay is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TutorialStep(object):
    """
    Attributes:
     - tutorialStepId
     - tutorialId
     - order
     - preDelaySeconds
     - postDelaySeconds
     - xOffset
     - yOffset
     - darkener
     - soundId
     - isCheckpoint
     - blockMouse
     - titleText
     - bodyText
     - imagePath
     - panelPrefabPath
     - animationName
     - arrowScale
     - arrowDirection
     - arrowTarget
     - arrowOffsetX
     - arrowOffsetY
     - openCheckpoints
     - blockerCheckpoints
     - passCheckpoints
     - cancelCheckpoints
     - allowCheckpoints
     - okayButtonActionId
     - openActionId
     - okayButtonText
     - highlightTarget
     - highlightOffsetX
     - highlightOffsetY
     - highlightScaleX
     - highlightScaleY
     - highlightOpacity
     - highlightFadeInSeconds
     - highlightFadeOutSeconds
     - highlightImage
     - highlightZoomInSeconds
     - highlightZoomOutSeconds

    """


    def __init__(self, tutorialStepId=None, tutorialId=None, order=None, preDelaySeconds=None, postDelaySeconds=None, xOffset=None, yOffset=None, darkener=None, soundId=None, isCheckpoint=None, blockMouse=None, titleText=None, bodyText=None, imagePath=None, panelPrefabPath=None, animationName=None, arrowScale=None, arrowDirection=None, arrowTarget=None, arrowOffsetX=None, arrowOffsetY=None, openCheckpoints=None, blockerCheckpoints=None, passCheckpoints=None, cancelCheckpoints=None, allowCheckpoints=None, okayButtonActionId=None, openActionId=None, okayButtonText=None, highlightTarget=None, highlightOffsetX=None, highlightOffsetY=None, highlightScaleX=None, highlightScaleY=None, highlightOpacity=None, highlightFadeInSeconds=None, highlightFadeOutSeconds=None, highlightImage=None, highlightZoomInSeconds=None, highlightZoomOutSeconds=None,):
        self.tutorialStepId = tutorialStepId
        self.tutorialId = tutorialId
        self.order = order
        self.preDelaySeconds = preDelaySeconds
        self.postDelaySeconds = postDelaySeconds
        self.xOffset = xOffset
        self.yOffset = yOffset
        self.darkener = darkener
        self.soundId = soundId
        self.isCheckpoint = isCheckpoint
        self.blockMouse = blockMouse
        self.titleText = titleText
        self.bodyText = bodyText
        self.imagePath = imagePath
        self.panelPrefabPath = panelPrefabPath
        self.animationName = animationName
        self.arrowScale = arrowScale
        self.arrowDirection = arrowDirection
        self.arrowTarget = arrowTarget
        self.arrowOffsetX = arrowOffsetX
        self.arrowOffsetY = arrowOffsetY
        self.openCheckpoints = openCheckpoints
        self.blockerCheckpoints = blockerCheckpoints
        self.passCheckpoints = passCheckpoints
        self.cancelCheckpoints = cancelCheckpoints
        self.allowCheckpoints = allowCheckpoints
        self.okayButtonActionId = okayButtonActionId
        self.openActionId = openActionId
        self.okayButtonText = okayButtonText
        self.highlightTarget = highlightTarget
        self.highlightOffsetX = highlightOffsetX
        self.highlightOffsetY = highlightOffsetY
        self.highlightScaleX = highlightScaleX
        self.highlightScaleY = highlightScaleY
        self.highlightOpacity = highlightOpacity
        self.highlightFadeInSeconds = highlightFadeInSeconds
        self.highlightFadeOutSeconds = highlightFadeOutSeconds
        self.highlightImage = highlightImage
        self.highlightZoomInSeconds = highlightZoomInSeconds
        self.highlightZoomOutSeconds = highlightZoomOutSeconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tutorialStepId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tutorialId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.preDelaySeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.postDelaySeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.xOffset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.yOffset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.darkener = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.soundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.isCheckpoint = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.blockMouse = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.titleText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.bodyText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.imagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.panelPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.animationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.arrowScale = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.arrowDirection = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.arrowTarget = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.arrowOffsetX = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I32:
                    self.arrowOffsetY = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.openCheckpoints = []
                    (_etype537, _size534) = iprot.readListBegin()
                    for _i538 in range(_size534):
                        _elem539 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.openCheckpoints.append(_elem539)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.LIST:
                    self.blockerCheckpoints = []
                    (_etype543, _size540) = iprot.readListBegin()
                    for _i544 in range(_size540):
                        _elem545 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.blockerCheckpoints.append(_elem545)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.LIST:
                    self.passCheckpoints = []
                    (_etype549, _size546) = iprot.readListBegin()
                    for _i550 in range(_size546):
                        _elem551 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.passCheckpoints.append(_elem551)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.LIST:
                    self.cancelCheckpoints = []
                    (_etype555, _size552) = iprot.readListBegin()
                    for _i556 in range(_size552):
                        _elem557 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.cancelCheckpoints.append(_elem557)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.LIST:
                    self.allowCheckpoints = []
                    (_etype561, _size558) = iprot.readListBegin()
                    for _i562 in range(_size558):
                        _elem563 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.allowCheckpoints.append(_elem563)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.I32:
                    self.okayButtonActionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.I32:
                    self.openActionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRING:
                    self.okayButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.STRING:
                    self.highlightTarget = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.DOUBLE:
                    self.highlightOffsetX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.DOUBLE:
                    self.highlightOffsetY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.DOUBLE:
                    self.highlightScaleX = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.DOUBLE:
                    self.highlightScaleY = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.DOUBLE:
                    self.highlightOpacity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.DOUBLE:
                    self.highlightFadeInSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.DOUBLE:
                    self.highlightFadeOutSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.STRING:
                    self.highlightImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.DOUBLE:
                    self.highlightZoomInSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.DOUBLE:
                    self.highlightZoomOutSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TutorialStep')
        if self.tutorialStepId is not None:
            oprot.writeFieldBegin('tutorialStepId', TType.STRING, 1)
            oprot.writeString(self.tutorialStepId.encode('utf-8') if sys.version_info[0] == 2 else self.tutorialStepId)
            oprot.writeFieldEnd()
        if self.tutorialId is not None:
            oprot.writeFieldBegin('tutorialId', TType.STRING, 2)
            oprot.writeString(self.tutorialId.encode('utf-8') if sys.version_info[0] == 2 else self.tutorialId)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 3)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.preDelaySeconds is not None:
            oprot.writeFieldBegin('preDelaySeconds', TType.DOUBLE, 4)
            oprot.writeDouble(self.preDelaySeconds)
            oprot.writeFieldEnd()
        if self.postDelaySeconds is not None:
            oprot.writeFieldBegin('postDelaySeconds', TType.DOUBLE, 5)
            oprot.writeDouble(self.postDelaySeconds)
            oprot.writeFieldEnd()
        if self.xOffset is not None:
            oprot.writeFieldBegin('xOffset', TType.I32, 6)
            oprot.writeI32(self.xOffset)
            oprot.writeFieldEnd()
        if self.yOffset is not None:
            oprot.writeFieldBegin('yOffset', TType.I32, 7)
            oprot.writeI32(self.yOffset)
            oprot.writeFieldEnd()
        if self.darkener is not None:
            oprot.writeFieldBegin('darkener', TType.BOOL, 8)
            oprot.writeBool(self.darkener)
            oprot.writeFieldEnd()
        if self.soundId is not None:
            oprot.writeFieldBegin('soundId', TType.STRING, 9)
            oprot.writeString(self.soundId.encode('utf-8') if sys.version_info[0] == 2 else self.soundId)
            oprot.writeFieldEnd()
        if self.isCheckpoint is not None:
            oprot.writeFieldBegin('isCheckpoint', TType.BOOL, 10)
            oprot.writeBool(self.isCheckpoint)
            oprot.writeFieldEnd()
        if self.blockMouse is not None:
            oprot.writeFieldBegin('blockMouse', TType.BOOL, 11)
            oprot.writeBool(self.blockMouse)
            oprot.writeFieldEnd()
        if self.titleText is not None:
            oprot.writeFieldBegin('titleText', TType.STRING, 19)
            oprot.writeString(self.titleText.encode('utf-8') if sys.version_info[0] == 2 else self.titleText)
            oprot.writeFieldEnd()
        if self.bodyText is not None:
            oprot.writeFieldBegin('bodyText', TType.STRING, 20)
            oprot.writeString(self.bodyText.encode('utf-8') if sys.version_info[0] == 2 else self.bodyText)
            oprot.writeFieldEnd()
        if self.imagePath is not None:
            oprot.writeFieldBegin('imagePath', TType.STRING, 21)
            oprot.writeString(self.imagePath.encode('utf-8') if sys.version_info[0] == 2 else self.imagePath)
            oprot.writeFieldEnd()
        if self.panelPrefabPath is not None:
            oprot.writeFieldBegin('panelPrefabPath', TType.STRING, 22)
            oprot.writeString(self.panelPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.panelPrefabPath)
            oprot.writeFieldEnd()
        if self.animationName is not None:
            oprot.writeFieldBegin('animationName', TType.STRING, 23)
            oprot.writeString(self.animationName.encode('utf-8') if sys.version_info[0] == 2 else self.animationName)
            oprot.writeFieldEnd()
        if self.arrowScale is not None:
            oprot.writeFieldBegin('arrowScale', TType.DOUBLE, 30)
            oprot.writeDouble(self.arrowScale)
            oprot.writeFieldEnd()
        if self.arrowDirection is not None:
            oprot.writeFieldBegin('arrowDirection', TType.I32, 31)
            oprot.writeI32(self.arrowDirection)
            oprot.writeFieldEnd()
        if self.arrowTarget is not None:
            oprot.writeFieldBegin('arrowTarget', TType.STRING, 32)
            oprot.writeString(self.arrowTarget.encode('utf-8') if sys.version_info[0] == 2 else self.arrowTarget)
            oprot.writeFieldEnd()
        if self.arrowOffsetX is not None:
            oprot.writeFieldBegin('arrowOffsetX', TType.I32, 33)
            oprot.writeI32(self.arrowOffsetX)
            oprot.writeFieldEnd()
        if self.arrowOffsetY is not None:
            oprot.writeFieldBegin('arrowOffsetY', TType.I32, 34)
            oprot.writeI32(self.arrowOffsetY)
            oprot.writeFieldEnd()
        if self.openCheckpoints is not None:
            oprot.writeFieldBegin('openCheckpoints', TType.LIST, 40)
            oprot.writeListBegin(TType.STRING, len(self.openCheckpoints))
            for iter564 in self.openCheckpoints:
                oprot.writeString(iter564.encode('utf-8') if sys.version_info[0] == 2 else iter564)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.blockerCheckpoints is not None:
            oprot.writeFieldBegin('blockerCheckpoints', TType.LIST, 41)
            oprot.writeListBegin(TType.STRING, len(self.blockerCheckpoints))
            for iter565 in self.blockerCheckpoints:
                oprot.writeString(iter565.encode('utf-8') if sys.version_info[0] == 2 else iter565)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.passCheckpoints is not None:
            oprot.writeFieldBegin('passCheckpoints', TType.LIST, 42)
            oprot.writeListBegin(TType.STRING, len(self.passCheckpoints))
            for iter566 in self.passCheckpoints:
                oprot.writeString(iter566.encode('utf-8') if sys.version_info[0] == 2 else iter566)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cancelCheckpoints is not None:
            oprot.writeFieldBegin('cancelCheckpoints', TType.LIST, 48)
            oprot.writeListBegin(TType.STRING, len(self.cancelCheckpoints))
            for iter567 in self.cancelCheckpoints:
                oprot.writeString(iter567.encode('utf-8') if sys.version_info[0] == 2 else iter567)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.allowCheckpoints is not None:
            oprot.writeFieldBegin('allowCheckpoints', TType.LIST, 49)
            oprot.writeListBegin(TType.STRING, len(self.allowCheckpoints))
            for iter568 in self.allowCheckpoints:
                oprot.writeString(iter568.encode('utf-8') if sys.version_info[0] == 2 else iter568)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.okayButtonActionId is not None:
            oprot.writeFieldBegin('okayButtonActionId', TType.I32, 51)
            oprot.writeI32(self.okayButtonActionId)
            oprot.writeFieldEnd()
        if self.openActionId is not None:
            oprot.writeFieldBegin('openActionId', TType.I32, 52)
            oprot.writeI32(self.openActionId)
            oprot.writeFieldEnd()
        if self.okayButtonText is not None:
            oprot.writeFieldBegin('okayButtonText', TType.STRING, 53)
            oprot.writeString(self.okayButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.okayButtonText)
            oprot.writeFieldEnd()
        if self.highlightTarget is not None:
            oprot.writeFieldBegin('highlightTarget', TType.STRING, 60)
            oprot.writeString(self.highlightTarget.encode('utf-8') if sys.version_info[0] == 2 else self.highlightTarget)
            oprot.writeFieldEnd()
        if self.highlightOffsetX is not None:
            oprot.writeFieldBegin('highlightOffsetX', TType.DOUBLE, 61)
            oprot.writeDouble(self.highlightOffsetX)
            oprot.writeFieldEnd()
        if self.highlightOffsetY is not None:
            oprot.writeFieldBegin('highlightOffsetY', TType.DOUBLE, 62)
            oprot.writeDouble(self.highlightOffsetY)
            oprot.writeFieldEnd()
        if self.highlightScaleX is not None:
            oprot.writeFieldBegin('highlightScaleX', TType.DOUBLE, 63)
            oprot.writeDouble(self.highlightScaleX)
            oprot.writeFieldEnd()
        if self.highlightScaleY is not None:
            oprot.writeFieldBegin('highlightScaleY', TType.DOUBLE, 64)
            oprot.writeDouble(self.highlightScaleY)
            oprot.writeFieldEnd()
        if self.highlightOpacity is not None:
            oprot.writeFieldBegin('highlightOpacity', TType.DOUBLE, 65)
            oprot.writeDouble(self.highlightOpacity)
            oprot.writeFieldEnd()
        if self.highlightFadeInSeconds is not None:
            oprot.writeFieldBegin('highlightFadeInSeconds', TType.DOUBLE, 66)
            oprot.writeDouble(self.highlightFadeInSeconds)
            oprot.writeFieldEnd()
        if self.highlightFadeOutSeconds is not None:
            oprot.writeFieldBegin('highlightFadeOutSeconds', TType.DOUBLE, 67)
            oprot.writeDouble(self.highlightFadeOutSeconds)
            oprot.writeFieldEnd()
        if self.highlightImage is not None:
            oprot.writeFieldBegin('highlightImage', TType.STRING, 68)
            oprot.writeString(self.highlightImage.encode('utf-8') if sys.version_info[0] == 2 else self.highlightImage)
            oprot.writeFieldEnd()
        if self.highlightZoomInSeconds is not None:
            oprot.writeFieldBegin('highlightZoomInSeconds', TType.DOUBLE, 69)
            oprot.writeDouble(self.highlightZoomInSeconds)
            oprot.writeFieldEnd()
        if self.highlightZoomOutSeconds is not None:
            oprot.writeFieldBegin('highlightZoomOutSeconds', TType.DOUBLE, 70)
            oprot.writeDouble(self.highlightZoomOutSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.tutorialStepId is None:
            raise TProtocolException(message='Required field tutorialStepId is unset!')
        if self.tutorialId is None:
            raise TProtocolException(message='Required field tutorialId is unset!')
        if self.order is None:
            raise TProtocolException(message='Required field order is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tutorial(object):
    """
    Attributes:
     - tutorialId
     - autoCancel
     - minRank
     - dontCancelPoints
     - specialFlags
     - tutorialSteps
     - completionFlag
     - enableFlags

    """


    def __init__(self, tutorialId=None, autoCancel=None, minRank=None, dontCancelPoints=None, specialFlags=None, tutorialSteps=None, completionFlag=None, enableFlags=None,):
        self.tutorialId = tutorialId
        self.autoCancel = autoCancel
        self.minRank = minRank
        self.dontCancelPoints = dontCancelPoints
        self.specialFlags = specialFlags
        self.tutorialSteps = tutorialSteps
        self.completionFlag = completionFlag
        self.enableFlags = enableFlags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tutorialId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoCancel = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.minRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.dontCancelPoints = []
                    (_etype572, _size569) = iprot.readListBegin()
                    for _i573 in range(_size569):
                        _elem574 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.dontCancelPoints.append(_elem574)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.specialFlags = []
                    (_etype578, _size575) = iprot.readListBegin()
                    for _i579 in range(_size575):
                        _elem580 = iprot.readI32()
                        self.specialFlags.append(_elem580)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.tutorialSteps = []
                    (_etype584, _size581) = iprot.readListBegin()
                    for _i585 in range(_size581):
                        _elem586 = TutorialStep()
                        _elem586.read(iprot)
                        self.tutorialSteps.append(_elem586)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.completionFlag = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.enableFlags = []
                    (_etype590, _size587) = iprot.readListBegin()
                    for _i591 in range(_size587):
                        _elem592 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.enableFlags.append(_elem592)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tutorial')
        if self.tutorialId is not None:
            oprot.writeFieldBegin('tutorialId', TType.STRING, 1)
            oprot.writeString(self.tutorialId.encode('utf-8') if sys.version_info[0] == 2 else self.tutorialId)
            oprot.writeFieldEnd()
        if self.autoCancel is not None:
            oprot.writeFieldBegin('autoCancel', TType.BOOL, 3)
            oprot.writeBool(self.autoCancel)
            oprot.writeFieldEnd()
        if self.minRank is not None:
            oprot.writeFieldBegin('minRank', TType.I32, 4)
            oprot.writeI32(self.minRank)
            oprot.writeFieldEnd()
        if self.dontCancelPoints is not None:
            oprot.writeFieldBegin('dontCancelPoints', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.dontCancelPoints))
            for iter593 in self.dontCancelPoints:
                oprot.writeString(iter593.encode('utf-8') if sys.version_info[0] == 2 else iter593)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.specialFlags is not None:
            oprot.writeFieldBegin('specialFlags', TType.LIST, 6)
            oprot.writeListBegin(TType.I32, len(self.specialFlags))
            for iter594 in self.specialFlags:
                oprot.writeI32(iter594)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tutorialSteps is not None:
            oprot.writeFieldBegin('tutorialSteps', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.tutorialSteps))
            for iter595 in self.tutorialSteps:
                iter595.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.completionFlag is not None:
            oprot.writeFieldBegin('completionFlag', TType.STRING, 20)
            oprot.writeString(self.completionFlag.encode('utf-8') if sys.version_info[0] == 2 else self.completionFlag)
            oprot.writeFieldEnd()
        if self.enableFlags is not None:
            oprot.writeFieldBegin('enableFlags', TType.LIST, 31)
            oprot.writeListBegin(TType.STRING, len(self.enableFlags))
            for iter596 in self.enableFlags:
                oprot.writeString(iter596.encode('utf-8') if sys.version_info[0] == 2 else iter596)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.tutorialId is None:
            raise TProtocolException(message='Required field tutorialId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Chest(object):
    """
    Attributes:
     - chestId
     - offerCost
     - autoPlace
     - duration
     - display
     - numCommon
     - numRare
     - numEpic
     - numLegendary
     - numCommonGuaranteed
     - numRareGuaranteed
     - numEpicGuaranteed
     - numUncommon
     - numUncommonGuaranteed
     - minGold
     - maxGold
     - minGems
     - maxGems
     - maxHeroes
     - matchUserAffinity
     - setUserAffinity
     - imageSprite
     - awardChestClip
     - openChestClip
     - goToMinigame
     - guaranteedHeroes
     - chestPrefab
     - guaranteedCurrencies

    """


    def __init__(self, chestId=None, offerCost=None, autoPlace=None, duration=None, display=None, numCommon=None, numRare=None, numEpic=None, numLegendary=None, numCommonGuaranteed=None, numRareGuaranteed=None, numEpicGuaranteed=None, numUncommon=None, numUncommonGuaranteed=None, minGold=None, maxGold=None, minGems=None, maxGems=None, maxHeroes=None, matchUserAffinity=None, setUserAffinity=None, imageSprite=None, awardChestClip=None, openChestClip=None, goToMinigame=None, guaranteedHeroes=None, chestPrefab=None, guaranteedCurrencies=None,):
        self.chestId = chestId
        self.offerCost = offerCost
        self.autoPlace = autoPlace
        self.duration = duration
        self.display = display
        self.numCommon = numCommon
        self.numRare = numRare
        self.numEpic = numEpic
        self.numLegendary = numLegendary
        self.numCommonGuaranteed = numCommonGuaranteed
        self.numRareGuaranteed = numRareGuaranteed
        self.numEpicGuaranteed = numEpicGuaranteed
        self.numUncommon = numUncommon
        self.numUncommonGuaranteed = numUncommonGuaranteed
        self.minGold = minGold
        self.maxGold = maxGold
        self.minGems = minGems
        self.maxGems = maxGems
        self.maxHeroes = maxHeroes
        self.matchUserAffinity = matchUserAffinity
        self.setUserAffinity = setUserAffinity
        self.imageSprite = imageSprite
        self.awardChestClip = awardChestClip
        self.openChestClip = openChestClip
        self.goToMinigame = goToMinigame
        self.guaranteedHeroes = guaranteedHeroes
        self.chestPrefab = chestPrefab
        self.guaranteedCurrencies = guaranteedCurrencies

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chestId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.offerCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoPlace = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.numCommon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.numRare = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.numEpic = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.numLegendary = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.numCommonGuaranteed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.numRareGuaranteed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.numEpicGuaranteed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.numUncommon = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.numUncommonGuaranteed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.minGold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.maxGold = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.I32:
                    self.minGems = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.maxGems = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I32:
                    self.maxHeroes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.BOOL:
                    self.matchUserAffinity = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I32:
                    self.setUserAffinity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.imageSprite = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.awardChestClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRING:
                    self.openChestClip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.BOOL:
                    self.goToMinigame = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.LIST:
                    self.guaranteedHeroes = []
                    (_etype600, _size597) = iprot.readListBegin()
                    for _i601 in range(_size597):
                        _elem602 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.guaranteedHeroes.append(_elem602)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.STRING:
                    self.chestPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.LIST:
                    self.guaranteedCurrencies = []
                    (_etype606, _size603) = iprot.readListBegin()
                    for _i607 in range(_size603):
                        _elem608 = GuaranteedCurrency()
                        _elem608.read(iprot)
                        self.guaranteedCurrencies.append(_elem608)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Chest')
        if self.chestId is not None:
            oprot.writeFieldBegin('chestId', TType.STRING, 1)
            oprot.writeString(self.chestId.encode('utf-8') if sys.version_info[0] == 2 else self.chestId)
            oprot.writeFieldEnd()
        if self.offerCost is not None:
            oprot.writeFieldBegin('offerCost', TType.I32, 2)
            oprot.writeI32(self.offerCost)
            oprot.writeFieldEnd()
        if self.autoPlace is not None:
            oprot.writeFieldBegin('autoPlace', TType.BOOL, 3)
            oprot.writeBool(self.autoPlace)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I32, 10)
            oprot.writeI32(self.duration)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 11)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.numCommon is not None:
            oprot.writeFieldBegin('numCommon', TType.I32, 20)
            oprot.writeI32(self.numCommon)
            oprot.writeFieldEnd()
        if self.numRare is not None:
            oprot.writeFieldBegin('numRare', TType.I32, 21)
            oprot.writeI32(self.numRare)
            oprot.writeFieldEnd()
        if self.numEpic is not None:
            oprot.writeFieldBegin('numEpic', TType.I32, 22)
            oprot.writeI32(self.numEpic)
            oprot.writeFieldEnd()
        if self.numLegendary is not None:
            oprot.writeFieldBegin('numLegendary', TType.I32, 23)
            oprot.writeI32(self.numLegendary)
            oprot.writeFieldEnd()
        if self.numCommonGuaranteed is not None:
            oprot.writeFieldBegin('numCommonGuaranteed', TType.I32, 24)
            oprot.writeI32(self.numCommonGuaranteed)
            oprot.writeFieldEnd()
        if self.numRareGuaranteed is not None:
            oprot.writeFieldBegin('numRareGuaranteed', TType.I32, 25)
            oprot.writeI32(self.numRareGuaranteed)
            oprot.writeFieldEnd()
        if self.numEpicGuaranteed is not None:
            oprot.writeFieldBegin('numEpicGuaranteed', TType.I32, 26)
            oprot.writeI32(self.numEpicGuaranteed)
            oprot.writeFieldEnd()
        if self.numUncommon is not None:
            oprot.writeFieldBegin('numUncommon', TType.I32, 27)
            oprot.writeI32(self.numUncommon)
            oprot.writeFieldEnd()
        if self.numUncommonGuaranteed is not None:
            oprot.writeFieldBegin('numUncommonGuaranteed', TType.I32, 28)
            oprot.writeI32(self.numUncommonGuaranteed)
            oprot.writeFieldEnd()
        if self.minGold is not None:
            oprot.writeFieldBegin('minGold', TType.I32, 30)
            oprot.writeI32(self.minGold)
            oprot.writeFieldEnd()
        if self.maxGold is not None:
            oprot.writeFieldBegin('maxGold', TType.I32, 31)
            oprot.writeI32(self.maxGold)
            oprot.writeFieldEnd()
        if self.minGems is not None:
            oprot.writeFieldBegin('minGems', TType.I32, 32)
            oprot.writeI32(self.minGems)
            oprot.writeFieldEnd()
        if self.maxGems is not None:
            oprot.writeFieldBegin('maxGems', TType.I32, 33)
            oprot.writeI32(self.maxGems)
            oprot.writeFieldEnd()
        if self.maxHeroes is not None:
            oprot.writeFieldBegin('maxHeroes', TType.I32, 34)
            oprot.writeI32(self.maxHeroes)
            oprot.writeFieldEnd()
        if self.matchUserAffinity is not None:
            oprot.writeFieldBegin('matchUserAffinity', TType.BOOL, 40)
            oprot.writeBool(self.matchUserAffinity)
            oprot.writeFieldEnd()
        if self.setUserAffinity is not None:
            oprot.writeFieldBegin('setUserAffinity', TType.I32, 41)
            oprot.writeI32(self.setUserAffinity)
            oprot.writeFieldEnd()
        if self.imageSprite is not None:
            oprot.writeFieldBegin('imageSprite', TType.STRING, 50)
            oprot.writeString(self.imageSprite.encode('utf-8') if sys.version_info[0] == 2 else self.imageSprite)
            oprot.writeFieldEnd()
        if self.awardChestClip is not None:
            oprot.writeFieldBegin('awardChestClip', TType.STRING, 51)
            oprot.writeString(self.awardChestClip.encode('utf-8') if sys.version_info[0] == 2 else self.awardChestClip)
            oprot.writeFieldEnd()
        if self.openChestClip is not None:
            oprot.writeFieldBegin('openChestClip', TType.STRING, 52)
            oprot.writeString(self.openChestClip.encode('utf-8') if sys.version_info[0] == 2 else self.openChestClip)
            oprot.writeFieldEnd()
        if self.goToMinigame is not None:
            oprot.writeFieldBegin('goToMinigame', TType.BOOL, 60)
            oprot.writeBool(self.goToMinigame)
            oprot.writeFieldEnd()
        if self.guaranteedHeroes is not None:
            oprot.writeFieldBegin('guaranteedHeroes', TType.LIST, 70)
            oprot.writeListBegin(TType.STRING, len(self.guaranteedHeroes))
            for iter609 in self.guaranteedHeroes:
                oprot.writeString(iter609.encode('utf-8') if sys.version_info[0] == 2 else iter609)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.chestPrefab is not None:
            oprot.writeFieldBegin('chestPrefab', TType.STRING, 71)
            oprot.writeString(self.chestPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.chestPrefab)
            oprot.writeFieldEnd()
        if self.guaranteedCurrencies is not None:
            oprot.writeFieldBegin('guaranteedCurrencies', TType.LIST, 72)
            oprot.writeListBegin(TType.STRUCT, len(self.guaranteedCurrencies))
            for iter610 in self.guaranteedCurrencies:
                iter610.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.chestId is None:
            raise TProtocolException(message='Required field chestId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuaranteedHero(object):
    """
    Attributes:
     - chestId
     - heroId

    """


    def __init__(self, chestId=None, heroId=None,):
        self.chestId = chestId
        self.heroId = heroId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chestId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.heroId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuaranteedHero')
        if self.chestId is not None:
            oprot.writeFieldBegin('chestId', TType.STRING, 1)
            oprot.writeString(self.chestId.encode('utf-8') if sys.version_info[0] == 2 else self.chestId)
            oprot.writeFieldEnd()
        if self.heroId is not None:
            oprot.writeFieldBegin('heroId', TType.STRING, 2)
            oprot.writeString(self.heroId.encode('utf-8') if sys.version_info[0] == 2 else self.heroId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.chestId is None:
            raise TProtocolException(message='Required field chestId is unset!')
        if self.heroId is None:
            raise TProtocolException(message='Required field heroId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuaranteedCurrency(object):
    """
    Attributes:
     - chestId
     - currencyId
     - count
     - rewardGroupId

    """


    def __init__(self, chestId=None, currencyId=None, count=None, rewardGroupId=None,):
        self.chestId = chestId
        self.currencyId = currencyId
        self.count = count
        self.rewardGroupId = rewardGroupId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chestId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.rewardGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuaranteedCurrency')
        if self.chestId is not None:
            oprot.writeFieldBegin('chestId', TType.STRING, 1)
            oprot.writeString(self.chestId.encode('utf-8') if sys.version_info[0] == 2 else self.chestId)
            oprot.writeFieldEnd()
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 2)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.rewardGroupId is not None:
            oprot.writeFieldBegin('rewardGroupId', TType.STRING, 4)
            oprot.writeString(self.rewardGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.rewardGroupId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.chestId is None:
            raise TProtocolException(message='Required field chestId is unset!')
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.count is None:
            raise TProtocolException(message='Required field count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RuntimePlatform(object):
    """
    Attributes:
     - runtimePlatformId

    """


    def __init__(self, runtimePlatformId=None,):
        self.runtimePlatformId = runtimePlatformId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.runtimePlatformId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RuntimePlatform')
        if self.runtimePlatformId is not None:
            oprot.writeFieldBegin('runtimePlatformId', TType.STRING, 1)
            oprot.writeString(self.runtimePlatformId.encode('utf-8') if sys.version_info[0] == 2 else self.runtimePlatformId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.runtimePlatformId is None:
            raise TProtocolException(message='Required field runtimePlatformId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Header(object):
    """
    Attributes:
     - schemaVersion
     - configVersion

    """


    def __init__(self, schemaVersion=None, configVersion=None,):
        self.schemaVersion = schemaVersion
        self.configVersion = configVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.schemaVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.configVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Header')
        if self.schemaVersion is not None:
            oprot.writeFieldBegin('schemaVersion', TType.I32, 1)
            oprot.writeI32(self.schemaVersion)
            oprot.writeFieldEnd()
        if self.configVersion is not None:
            oprot.writeFieldBegin('configVersion', TType.I32, 2)
            oprot.writeI32(self.configVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.schemaVersion is None:
            raise TProtocolException(message='Required field schemaVersion is unset!')
        if self.configVersion is None:
            raise TProtocolException(message='Required field configVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroLevelXp(object):
    """
    Attributes:
     - heroLevel
     - commonXpEvo1
     - commonXpEvo2
     - commonXpEvo3
     - uncommonXpEvo1
     - uncommonXpEvo2
     - uncommonXpEvo3
     - rareXpEvo1
     - rareXpEvo2
     - rareXpEvo3
     - rareXpEvo4
     - epicXpEvo1
     - epicXpEvo2
     - epicXpEvo3
     - epicXpEvo4
     - xpByEvoByRarity

    """


    def __init__(self, heroLevel=None, commonXpEvo1=None, commonXpEvo2=None, commonXpEvo3=None, uncommonXpEvo1=None, uncommonXpEvo2=None, uncommonXpEvo3=None, rareXpEvo1=None, rareXpEvo2=None, rareXpEvo3=None, rareXpEvo4=None, epicXpEvo1=None, epicXpEvo2=None, epicXpEvo3=None, epicXpEvo4=None, xpByEvoByRarity=None,):
        self.heroLevel = heroLevel
        self.commonXpEvo1 = commonXpEvo1
        self.commonXpEvo2 = commonXpEvo2
        self.commonXpEvo3 = commonXpEvo3
        self.uncommonXpEvo1 = uncommonXpEvo1
        self.uncommonXpEvo2 = uncommonXpEvo2
        self.uncommonXpEvo3 = uncommonXpEvo3
        self.rareXpEvo1 = rareXpEvo1
        self.rareXpEvo2 = rareXpEvo2
        self.rareXpEvo3 = rareXpEvo3
        self.rareXpEvo4 = rareXpEvo4
        self.epicXpEvo1 = epicXpEvo1
        self.epicXpEvo2 = epicXpEvo2
        self.epicXpEvo3 = epicXpEvo3
        self.epicXpEvo4 = epicXpEvo4
        self.xpByEvoByRarity = xpByEvoByRarity

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.heroLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.commonXpEvo1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.commonXpEvo2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.commonXpEvo3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.uncommonXpEvo1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.uncommonXpEvo2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.uncommonXpEvo3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.rareXpEvo1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.rareXpEvo2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.rareXpEvo3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.rareXpEvo4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.epicXpEvo1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.epicXpEvo2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.epicXpEvo3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.epicXpEvo4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.LIST:
                    self.xpByEvoByRarity = []
                    (_etype614, _size611) = iprot.readListBegin()
                    for _i615 in range(_size611):
                        _elem616 = []
                        (_etype620, _size617) = iprot.readListBegin()
                        for _i621 in range(_size617):
                            _elem622 = iprot.readI32()
                            _elem616.append(_elem622)
                        iprot.readListEnd()
                        self.xpByEvoByRarity.append(_elem616)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroLevelXp')
        if self.heroLevel is not None:
            oprot.writeFieldBegin('heroLevel', TType.I32, 1)
            oprot.writeI32(self.heroLevel)
            oprot.writeFieldEnd()
        if self.commonXpEvo1 is not None:
            oprot.writeFieldBegin('commonXpEvo1', TType.I32, 2)
            oprot.writeI32(self.commonXpEvo1)
            oprot.writeFieldEnd()
        if self.commonXpEvo2 is not None:
            oprot.writeFieldBegin('commonXpEvo2', TType.I32, 3)
            oprot.writeI32(self.commonXpEvo2)
            oprot.writeFieldEnd()
        if self.commonXpEvo3 is not None:
            oprot.writeFieldBegin('commonXpEvo3', TType.I32, 4)
            oprot.writeI32(self.commonXpEvo3)
            oprot.writeFieldEnd()
        if self.uncommonXpEvo1 is not None:
            oprot.writeFieldBegin('uncommonXpEvo1', TType.I32, 5)
            oprot.writeI32(self.uncommonXpEvo1)
            oprot.writeFieldEnd()
        if self.uncommonXpEvo2 is not None:
            oprot.writeFieldBegin('uncommonXpEvo2', TType.I32, 6)
            oprot.writeI32(self.uncommonXpEvo2)
            oprot.writeFieldEnd()
        if self.uncommonXpEvo3 is not None:
            oprot.writeFieldBegin('uncommonXpEvo3', TType.I32, 7)
            oprot.writeI32(self.uncommonXpEvo3)
            oprot.writeFieldEnd()
        if self.rareXpEvo1 is not None:
            oprot.writeFieldBegin('rareXpEvo1', TType.I32, 10)
            oprot.writeI32(self.rareXpEvo1)
            oprot.writeFieldEnd()
        if self.rareXpEvo2 is not None:
            oprot.writeFieldBegin('rareXpEvo2', TType.I32, 11)
            oprot.writeI32(self.rareXpEvo2)
            oprot.writeFieldEnd()
        if self.rareXpEvo3 is not None:
            oprot.writeFieldBegin('rareXpEvo3', TType.I32, 12)
            oprot.writeI32(self.rareXpEvo3)
            oprot.writeFieldEnd()
        if self.rareXpEvo4 is not None:
            oprot.writeFieldBegin('rareXpEvo4', TType.I32, 13)
            oprot.writeI32(self.rareXpEvo4)
            oprot.writeFieldEnd()
        if self.epicXpEvo1 is not None:
            oprot.writeFieldBegin('epicXpEvo1', TType.I32, 14)
            oprot.writeI32(self.epicXpEvo1)
            oprot.writeFieldEnd()
        if self.epicXpEvo2 is not None:
            oprot.writeFieldBegin('epicXpEvo2', TType.I32, 20)
            oprot.writeI32(self.epicXpEvo2)
            oprot.writeFieldEnd()
        if self.epicXpEvo3 is not None:
            oprot.writeFieldBegin('epicXpEvo3', TType.I32, 21)
            oprot.writeI32(self.epicXpEvo3)
            oprot.writeFieldEnd()
        if self.epicXpEvo4 is not None:
            oprot.writeFieldBegin('epicXpEvo4', TType.I32, 22)
            oprot.writeI32(self.epicXpEvo4)
            oprot.writeFieldEnd()
        if self.xpByEvoByRarity is not None:
            oprot.writeFieldBegin('xpByEvoByRarity', TType.LIST, 35)
            oprot.writeListBegin(TType.LIST, len(self.xpByEvoByRarity))
            for iter623 in self.xpByEvoByRarity:
                oprot.writeListBegin(TType.I32, len(iter623))
                for iter624 in iter623:
                    oprot.writeI32(iter624)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroLevel is None:
            raise TProtocolException(message='Required field heroLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroUpgradeGoldCost(object):
    """
    Attributes:
     - heroLevel
     - commonUpgradeCost
     - rareUpgradeCost
     - epicUpgradeCost
     - legendaryUpgradeCost
     - uncommonUpgradeCost

    """


    def __init__(self, heroLevel=None, commonUpgradeCost=None, rareUpgradeCost=None, epicUpgradeCost=None, legendaryUpgradeCost=None, uncommonUpgradeCost=None,):
        self.heroLevel = heroLevel
        self.commonUpgradeCost = commonUpgradeCost
        self.rareUpgradeCost = rareUpgradeCost
        self.epicUpgradeCost = epicUpgradeCost
        self.legendaryUpgradeCost = legendaryUpgradeCost
        self.uncommonUpgradeCost = uncommonUpgradeCost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.heroLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.commonUpgradeCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rareUpgradeCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.epicUpgradeCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.legendaryUpgradeCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.uncommonUpgradeCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroUpgradeGoldCost')
        if self.heroLevel is not None:
            oprot.writeFieldBegin('heroLevel', TType.I32, 1)
            oprot.writeI32(self.heroLevel)
            oprot.writeFieldEnd()
        if self.commonUpgradeCost is not None:
            oprot.writeFieldBegin('commonUpgradeCost', TType.I32, 2)
            oprot.writeI32(self.commonUpgradeCost)
            oprot.writeFieldEnd()
        if self.rareUpgradeCost is not None:
            oprot.writeFieldBegin('rareUpgradeCost', TType.I32, 3)
            oprot.writeI32(self.rareUpgradeCost)
            oprot.writeFieldEnd()
        if self.epicUpgradeCost is not None:
            oprot.writeFieldBegin('epicUpgradeCost', TType.I32, 4)
            oprot.writeI32(self.epicUpgradeCost)
            oprot.writeFieldEnd()
        if self.legendaryUpgradeCost is not None:
            oprot.writeFieldBegin('legendaryUpgradeCost', TType.I32, 5)
            oprot.writeI32(self.legendaryUpgradeCost)
            oprot.writeFieldEnd()
        if self.uncommonUpgradeCost is not None:
            oprot.writeFieldBegin('uncommonUpgradeCost', TType.I32, 6)
            oprot.writeI32(self.uncommonUpgradeCost)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroLevel is None:
            raise TProtocolException(message='Required field heroLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SectionHeadingTemplate(object):
    """
    Attributes:
     - sectionHeadingTemplateId
     - prefab
     - backgroundImage

    """


    def __init__(self, sectionHeadingTemplateId=None, prefab=None, backgroundImage=None,):
        self.sectionHeadingTemplateId = sectionHeadingTemplateId
        self.prefab = prefab
        self.backgroundImage = backgroundImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sectionHeadingTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SectionHeadingTemplate')
        if self.sectionHeadingTemplateId is not None:
            oprot.writeFieldBegin('sectionHeadingTemplateId', TType.STRING, 1)
            oprot.writeString(self.sectionHeadingTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sectionHeadingTemplateId is None:
            raise TProtocolException(message='Required field sectionHeadingTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SectionHeading(object):
    """
    Attributes:
     - sectionHeadingId
     - sectionHeadingTemplateId
     - display

    """


    def __init__(self, sectionHeadingId=None, sectionHeadingTemplateId=None, display=None,):
        self.sectionHeadingId = sectionHeadingId
        self.sectionHeadingTemplateId = sectionHeadingTemplateId
        self.display = display

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sectionHeadingId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sectionHeadingTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SectionHeading')
        if self.sectionHeadingId is not None:
            oprot.writeFieldBegin('sectionHeadingId', TType.STRING, 1)
            oprot.writeString(self.sectionHeadingId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingId)
            oprot.writeFieldEnd()
        if self.sectionHeadingTemplateId is not None:
            oprot.writeFieldBegin('sectionHeadingTemplateId', TType.STRING, 2)
            oprot.writeString(self.sectionHeadingTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingTemplateId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sectionHeadingId is None:
            raise TProtocolException(message='Required field sectionHeadingId is unset!')
        if self.sectionHeadingTemplateId is None:
            raise TProtocolException(message='Required field sectionHeadingTemplateId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SectionTopperTemplate(object):
    """
    Attributes:
     - sectionTopperTemplateId
     - prefab
     - backgroundImage

    """


    def __init__(self, sectionTopperTemplateId=None, prefab=None, backgroundImage=None,):
        self.sectionTopperTemplateId = sectionTopperTemplateId
        self.prefab = prefab
        self.backgroundImage = backgroundImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sectionTopperTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SectionTopperTemplate')
        if self.sectionTopperTemplateId is not None:
            oprot.writeFieldBegin('sectionTopperTemplateId', TType.STRING, 1)
            oprot.writeString(self.sectionTopperTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionTopperTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sectionTopperTemplateId is None:
            raise TProtocolException(message='Required field sectionTopperTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SectionTopper(object):
    """
    Attributes:
     - sectionTopperId
     - sectionTopperTemplateId

    """


    def __init__(self, sectionTopperId=None, sectionTopperTemplateId=None,):
        self.sectionTopperId = sectionTopperId
        self.sectionTopperTemplateId = sectionTopperTemplateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sectionTopperId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sectionTopperTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SectionTopper')
        if self.sectionTopperId is not None:
            oprot.writeFieldBegin('sectionTopperId', TType.STRING, 1)
            oprot.writeString(self.sectionTopperId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionTopperId)
            oprot.writeFieldEnd()
        if self.sectionTopperTemplateId is not None:
            oprot.writeFieldBegin('sectionTopperTemplateId', TType.STRING, 2)
            oprot.writeString(self.sectionTopperTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionTopperTemplateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sectionTopperId is None:
            raise TProtocolException(message='Required field sectionTopperId is unset!')
        if self.sectionTopperTemplateId is None:
            raise TProtocolException(message='Required field sectionTopperTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SectionBottomTemplate(object):
    """
    Attributes:
     - sectionBottomTemplateId
     - prefab
     - backgroundImage

    """


    def __init__(self, sectionBottomTemplateId=None, prefab=None, backgroundImage=None,):
        self.sectionBottomTemplateId = sectionBottomTemplateId
        self.prefab = prefab
        self.backgroundImage = backgroundImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sectionBottomTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SectionBottomTemplate')
        if self.sectionBottomTemplateId is not None:
            oprot.writeFieldBegin('sectionBottomTemplateId', TType.STRING, 1)
            oprot.writeString(self.sectionBottomTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionBottomTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sectionBottomTemplateId is None:
            raise TProtocolException(message='Required field sectionBottomTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SectionBottom(object):
    """
    Attributes:
     - sectionBottomId
     - sectionBottomTemplateId
     - display
     - buttonText

    """


    def __init__(self, sectionBottomId=None, sectionBottomTemplateId=None, display=None, buttonText=None,):
        self.sectionBottomId = sectionBottomId
        self.sectionBottomTemplateId = sectionBottomTemplateId
        self.display = display
        self.buttonText = buttonText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sectionBottomId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sectionBottomTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.buttonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SectionBottom')
        if self.sectionBottomId is not None:
            oprot.writeFieldBegin('sectionBottomId', TType.STRING, 1)
            oprot.writeString(self.sectionBottomId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionBottomId)
            oprot.writeFieldEnd()
        if self.sectionBottomTemplateId is not None:
            oprot.writeFieldBegin('sectionBottomTemplateId', TType.STRING, 2)
            oprot.writeString(self.sectionBottomTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionBottomTemplateId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.buttonText is not None:
            oprot.writeFieldBegin('buttonText', TType.STRING, 4)
            oprot.writeString(self.buttonText.encode('utf-8') if sys.version_info[0] == 2 else self.buttonText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sectionBottomId is None:
            raise TProtocolException(message='Required field sectionBottomId is unset!')
        if self.sectionBottomTemplateId is None:
            raise TProtocolException(message='Required field sectionBottomTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildSectionItemTemplate(object):
    """
    Attributes:
     - guildSectionItemTemplateId
     - prefab
     - backgroundImage

    """


    def __init__(self, guildSectionItemTemplateId=None, prefab=None, backgroundImage=None,):
        self.guildSectionItemTemplateId = guildSectionItemTemplateId
        self.prefab = prefab
        self.backgroundImage = backgroundImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildSectionItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildSectionItemTemplate')
        if self.guildSectionItemTemplateId is not None:
            oprot.writeFieldBegin('guildSectionItemTemplateId', TType.STRING, 1)
            oprot.writeString(self.guildSectionItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSectionItemTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildSectionItem(object):
    """
    Attributes:
     - guildSectionItemId
     - guildSectionItemTemplateId

    """


    def __init__(self, guildSectionItemId=None, guildSectionItemTemplateId=None,):
        self.guildSectionItemId = guildSectionItemId
        self.guildSectionItemTemplateId = guildSectionItemTemplateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildSectionItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.guildSectionItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildSectionItem')
        if self.guildSectionItemId is not None:
            oprot.writeFieldBegin('guildSectionItemId', TType.STRING, 1)
            oprot.writeString(self.guildSectionItemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSectionItemId)
            oprot.writeFieldEnd()
        if self.guildSectionItemTemplateId is not None:
            oprot.writeFieldBegin('guildSectionItemTemplateId', TType.STRING, 2)
            oprot.writeString(self.guildSectionItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSectionItemTemplateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildMemberListItemTemplate(object):
    """
    Attributes:
     - guildMemberListItemTemplateId
     - prefab
     - backgroundImage

    """


    def __init__(self, guildMemberListItemTemplateId=None, prefab=None, backgroundImage=None,):
        self.guildMemberListItemTemplateId = guildMemberListItemTemplateId
        self.prefab = prefab
        self.backgroundImage = backgroundImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildMemberListItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildMemberListItemTemplate')
        if self.guildMemberListItemTemplateId is not None:
            oprot.writeFieldBegin('guildMemberListItemTemplateId', TType.STRING, 1)
            oprot.writeString(self.guildMemberListItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.guildMemberListItemTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildMemberListItemTemplateId is None:
            raise TProtocolException(message='Required field guildMemberListItemTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildMemberListItem(object):
    """
    Attributes:
     - guildMemberListItemId
     - guildMemberListItemTemplateId
     - display

    """


    def __init__(self, guildMemberListItemId=None, guildMemberListItemTemplateId=None, display=None,):
        self.guildMemberListItemId = guildMemberListItemId
        self.guildMemberListItemTemplateId = guildMemberListItemTemplateId
        self.display = display

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildMemberListItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.guildMemberListItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildMemberListItem')
        if self.guildMemberListItemId is not None:
            oprot.writeFieldBegin('guildMemberListItemId', TType.STRING, 1)
            oprot.writeString(self.guildMemberListItemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildMemberListItemId)
            oprot.writeFieldEnd()
        if self.guildMemberListItemTemplateId is not None:
            oprot.writeFieldBegin('guildMemberListItemTemplateId', TType.STRING, 2)
            oprot.writeString(self.guildMemberListItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.guildMemberListItemTemplateId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildMemberListItemId is None:
            raise TProtocolException(message='Required field guildMemberListItemId is unset!')
        if self.guildMemberListItemTemplateId is None:
            raise TProtocolException(message='Required field guildMemberListItemTemplateId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InboxSection(object):
    """
    Attributes:
     - inboxSectionId
     - priority
     - sectionHeadingId
     - sectionTopperId
     - sectionBottomId

    """


    def __init__(self, inboxSectionId=None, priority=None, sectionHeadingId=None, sectionTopperId=None, sectionBottomId=None,):
        self.inboxSectionId = inboxSectionId
        self.priority = priority
        self.sectionHeadingId = sectionHeadingId
        self.sectionTopperId = sectionTopperId
        self.sectionBottomId = sectionBottomId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.inboxSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.sectionHeadingId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.sectionTopperId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sectionBottomId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InboxSection')
        if self.inboxSectionId is not None:
            oprot.writeFieldBegin('inboxSectionId', TType.STRING, 1)
            oprot.writeString(self.inboxSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.inboxSectionId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.sectionHeadingId is not None:
            oprot.writeFieldBegin('sectionHeadingId', TType.STRING, 10)
            oprot.writeString(self.sectionHeadingId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingId)
            oprot.writeFieldEnd()
        if self.sectionTopperId is not None:
            oprot.writeFieldBegin('sectionTopperId', TType.STRING, 11)
            oprot.writeString(self.sectionTopperId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionTopperId)
            oprot.writeFieldEnd()
        if self.sectionBottomId is not None:
            oprot.writeFieldBegin('sectionBottomId', TType.STRING, 13)
            oprot.writeString(self.sectionBottomId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionBottomId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.inboxSectionId is None:
            raise TProtocolException(message='Required field inboxSectionId is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.sectionHeadingId is None:
            raise TProtocolException(message='Required field sectionHeadingId is unset!')
        if self.sectionTopperId is None:
            raise TProtocolException(message='Required field sectionTopperId is unset!')
        if self.sectionBottomId is None:
            raise TProtocolException(message='Required field sectionBottomId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildMemberListSection(object):
    """
    Attributes:
     - guildMemberListSectionId
     - priority
     - sectionHeadingId
     - sectionTopperId
     - sectionBottomId
     - guildSectionItemId

    """


    def __init__(self, guildMemberListSectionId=None, priority=None, sectionHeadingId=None, sectionTopperId=None, sectionBottomId=None, guildSectionItemId=None,):
        self.guildMemberListSectionId = guildMemberListSectionId
        self.priority = priority
        self.sectionHeadingId = sectionHeadingId
        self.sectionTopperId = sectionTopperId
        self.sectionBottomId = sectionBottomId
        self.guildSectionItemId = guildSectionItemId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildMemberListSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.sectionHeadingId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.sectionTopperId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sectionBottomId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.guildSectionItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildMemberListSection')
        if self.guildMemberListSectionId is not None:
            oprot.writeFieldBegin('guildMemberListSectionId', TType.STRING, 1)
            oprot.writeString(self.guildMemberListSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildMemberListSectionId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.sectionHeadingId is not None:
            oprot.writeFieldBegin('sectionHeadingId', TType.STRING, 10)
            oprot.writeString(self.sectionHeadingId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingId)
            oprot.writeFieldEnd()
        if self.sectionTopperId is not None:
            oprot.writeFieldBegin('sectionTopperId', TType.STRING, 11)
            oprot.writeString(self.sectionTopperId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionTopperId)
            oprot.writeFieldEnd()
        if self.sectionBottomId is not None:
            oprot.writeFieldBegin('sectionBottomId', TType.STRING, 13)
            oprot.writeString(self.sectionBottomId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionBottomId)
            oprot.writeFieldEnd()
        if self.guildSectionItemId is not None:
            oprot.writeFieldBegin('guildSectionItemId', TType.STRING, 14)
            oprot.writeString(self.guildSectionItemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSectionItemId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildMemberListSectionId is None:
            raise TProtocolException(message='Required field guildMemberListSectionId is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.sectionHeadingId is None:
            raise TProtocolException(message='Required field sectionHeadingId is unset!')
        if self.sectionTopperId is None:
            raise TProtocolException(message='Required field sectionTopperId is unset!')
        if self.sectionBottomId is None:
            raise TProtocolException(message='Required field sectionBottomId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildListSection(object):
    """
    Attributes:
     - guildListSectionId
     - priority
     - sectionHeadingId
     - sectionTopperId
     - sectionBottomId
     - guildSectionItemId

    """


    def __init__(self, guildListSectionId=None, priority=None, sectionHeadingId=None, sectionTopperId=None, sectionBottomId=None, guildSectionItemId=None,):
        self.guildListSectionId = guildListSectionId
        self.priority = priority
        self.sectionHeadingId = sectionHeadingId
        self.sectionTopperId = sectionTopperId
        self.sectionBottomId = sectionBottomId
        self.guildSectionItemId = guildSectionItemId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildListSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.sectionHeadingId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.sectionTopperId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sectionBottomId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.guildSectionItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildListSection')
        if self.guildListSectionId is not None:
            oprot.writeFieldBegin('guildListSectionId', TType.STRING, 1)
            oprot.writeString(self.guildListSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.guildListSectionId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.sectionHeadingId is not None:
            oprot.writeFieldBegin('sectionHeadingId', TType.STRING, 10)
            oprot.writeString(self.sectionHeadingId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionHeadingId)
            oprot.writeFieldEnd()
        if self.sectionTopperId is not None:
            oprot.writeFieldBegin('sectionTopperId', TType.STRING, 11)
            oprot.writeString(self.sectionTopperId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionTopperId)
            oprot.writeFieldEnd()
        if self.sectionBottomId is not None:
            oprot.writeFieldBegin('sectionBottomId', TType.STRING, 13)
            oprot.writeString(self.sectionBottomId.encode('utf-8') if sys.version_info[0] == 2 else self.sectionBottomId)
            oprot.writeFieldEnd()
        if self.guildSectionItemId is not None:
            oprot.writeFieldBegin('guildSectionItemId', TType.STRING, 14)
            oprot.writeString(self.guildSectionItemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildSectionItemId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildListSectionId is None:
            raise TProtocolException(message='Required field guildListSectionId is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.sectionHeadingId is None:
            raise TProtocolException(message='Required field sectionHeadingId is unset!')
        if self.sectionTopperId is None:
            raise TProtocolException(message='Required field sectionTopperId is unset!')
        if self.sectionBottomId is None:
            raise TProtocolException(message='Required field sectionBottomId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildListItemTemplate(object):
    """
    Attributes:
     - guildListItemTemplateId
     - prefab

    """


    def __init__(self, guildListItemTemplateId=None, prefab=None,):
        self.guildListItemTemplateId = guildListItemTemplateId
        self.prefab = prefab

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildListItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildListItemTemplate')
        if self.guildListItemTemplateId is not None:
            oprot.writeFieldBegin('guildListItemTemplateId', TType.STRING, 1)
            oprot.writeString(self.guildListItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.guildListItemTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildListItemTemplateId is None:
            raise TProtocolException(message='Required field guildListItemTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GuildListItem(object):
    """
    Attributes:
     - guildListItemId
     - guildListItemTemplateId

    """


    def __init__(self, guildListItemId=None, guildListItemTemplateId=None,):
        self.guildListItemId = guildListItemId
        self.guildListItemTemplateId = guildListItemTemplateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.guildListItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.guildListItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GuildListItem')
        if self.guildListItemId is not None:
            oprot.writeFieldBegin('guildListItemId', TType.STRING, 1)
            oprot.writeString(self.guildListItemId.encode('utf-8') if sys.version_info[0] == 2 else self.guildListItemId)
            oprot.writeFieldEnd()
        if self.guildListItemTemplateId is not None:
            oprot.writeFieldBegin('guildListItemTemplateId', TType.STRING, 2)
            oprot.writeString(self.guildListItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.guildListItemTemplateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.guildListItemId is None:
            raise TProtocolException(message='Required field guildListItemId is unset!')
        if self.guildListItemTemplateId is None:
            raise TProtocolException(message='Required field guildListItemTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatMessageTemplate(object):
    """
    Attributes:
     - chatMessageTemplateId
     - itemPrefab
     - topperPrefab
     - bottomPrefab
     - bottomPrefabLeader

    """


    def __init__(self, chatMessageTemplateId=None, itemPrefab=None, topperPrefab=None, bottomPrefab=None, bottomPrefabLeader=None,):
        self.chatMessageTemplateId = chatMessageTemplateId
        self.itemPrefab = itemPrefab
        self.topperPrefab = topperPrefab
        self.bottomPrefab = bottomPrefab
        self.bottomPrefabLeader = bottomPrefabLeader

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMessageTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.itemPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.topperPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.bottomPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.bottomPrefabLeader = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatMessageTemplate')
        if self.chatMessageTemplateId is not None:
            oprot.writeFieldBegin('chatMessageTemplateId', TType.STRING, 1)
            oprot.writeString(self.chatMessageTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.chatMessageTemplateId)
            oprot.writeFieldEnd()
        if self.itemPrefab is not None:
            oprot.writeFieldBegin('itemPrefab', TType.STRING, 10)
            oprot.writeString(self.itemPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.itemPrefab)
            oprot.writeFieldEnd()
        if self.topperPrefab is not None:
            oprot.writeFieldBegin('topperPrefab', TType.STRING, 11)
            oprot.writeString(self.topperPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.topperPrefab)
            oprot.writeFieldEnd()
        if self.bottomPrefab is not None:
            oprot.writeFieldBegin('bottomPrefab', TType.STRING, 12)
            oprot.writeString(self.bottomPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.bottomPrefab)
            oprot.writeFieldEnd()
        if self.bottomPrefabLeader is not None:
            oprot.writeFieldBegin('bottomPrefabLeader', TType.STRING, 13)
            oprot.writeString(self.bottomPrefabLeader.encode('utf-8') if sys.version_info[0] == 2 else self.bottomPrefabLeader)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.chatMessageTemplateId is None:
            raise TProtocolException(message='Required field chatMessageTemplateId is unset!')
        if self.itemPrefab is None:
            raise TProtocolException(message='Required field itemPrefab is unset!')
        if self.topperPrefab is None:
            raise TProtocolException(message='Required field topperPrefab is unset!')
        if self.bottomPrefab is None:
            raise TProtocolException(message='Required field bottomPrefab is unset!')
        if self.bottomPrefabLeader is None:
            raise TProtocolException(message='Required field bottomPrefabLeader is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatMessage(object):
    """
    Attributes:
     - chatMessageId
     - chatMessageTemplateId
     - body
     - itemImage
     - topperImage
     - bottomImage

    """


    def __init__(self, chatMessageId=None, chatMessageTemplateId=None, body=None, itemImage=None, topperImage=None, bottomImage=None,):
        self.chatMessageId = chatMessageId
        self.chatMessageTemplateId = chatMessageTemplateId
        self.body = body
        self.itemImage = itemImage
        self.topperImage = topperImage
        self.bottomImage = bottomImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMessageTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.itemImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.topperImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.bottomImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatMessage')
        if self.chatMessageId is not None:
            oprot.writeFieldBegin('chatMessageId', TType.STRING, 1)
            oprot.writeString(self.chatMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.chatMessageId)
            oprot.writeFieldEnd()
        if self.chatMessageTemplateId is not None:
            oprot.writeFieldBegin('chatMessageTemplateId', TType.STRING, 2)
            oprot.writeString(self.chatMessageTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.chatMessageTemplateId)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 3)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.itemImage is not None:
            oprot.writeFieldBegin('itemImage', TType.STRING, 10)
            oprot.writeString(self.itemImage.encode('utf-8') if sys.version_info[0] == 2 else self.itemImage)
            oprot.writeFieldEnd()
        if self.topperImage is not None:
            oprot.writeFieldBegin('topperImage', TType.STRING, 11)
            oprot.writeString(self.topperImage.encode('utf-8') if sys.version_info[0] == 2 else self.topperImage)
            oprot.writeFieldEnd()
        if self.bottomImage is not None:
            oprot.writeFieldBegin('bottomImage', TType.STRING, 12)
            oprot.writeString(self.bottomImage.encode('utf-8') if sys.version_info[0] == 2 else self.bottomImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.chatMessageId is None:
            raise TProtocolException(message='Required field chatMessageId is unset!')
        if self.itemImage is None:
            raise TProtocolException(message='Required field itemImage is unset!')
        if self.topperImage is None:
            raise TProtocolException(message='Required field topperImage is unset!')
        if self.bottomImage is None:
            raise TProtocolException(message='Required field bottomImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CurrencyItem(object):
    """
    Attributes:
     - currencyId
     - count

    """


    def __init__(self, currencyId=None, count=None,):
        self.currencyId = currencyId
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CurrencyItem')
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 1)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.count is None:
            raise TProtocolException(message='Required field count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GiftMessageCurrencyItem(object):
    """
    Attributes:
     - giftMessageId
     - currencyId
     - count

    """


    def __init__(self, giftMessageId=None, currencyId=None, count=None,):
        self.giftMessageId = giftMessageId
        self.currencyId = currencyId
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.giftMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GiftMessageCurrencyItem')
        if self.giftMessageId is not None:
            oprot.writeFieldBegin('giftMessageId', TType.STRING, 1)
            oprot.writeString(self.giftMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessageId)
            oprot.writeFieldEnd()
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 2)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.giftMessageId is None:
            raise TProtocolException(message='Required field giftMessageId is unset!')
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.count is None:
            raise TProtocolException(message='Required field count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimplePopupTemplate(object):
    """
    Attributes:
     - simplePopupTemplateId
     - prefab

    """


    def __init__(self, simplePopupTemplateId=None, prefab=None,):
        self.simplePopupTemplateId = simplePopupTemplateId
        self.prefab = prefab

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.simplePopupTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SimplePopupTemplate')
        if self.simplePopupTemplateId is not None:
            oprot.writeFieldBegin('simplePopupTemplateId', TType.STRING, 1)
            oprot.writeString(self.simplePopupTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.simplePopupTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 10)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.simplePopupTemplateId is None:
            raise TProtocolException(message='Required field simplePopupTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimplePopup(object):
    """
    Attributes:
     - simplePopupId
     - simplePopupTemplateId
     - backgroundImage
     - buttonImage
     - title
     - body
     - buttonText

    """


    def __init__(self, simplePopupId=None, simplePopupTemplateId=None, backgroundImage=None, buttonImage=None, title=None, body=None, buttonText=None,):
        self.simplePopupId = simplePopupId
        self.simplePopupTemplateId = simplePopupTemplateId
        self.backgroundImage = backgroundImage
        self.buttonImage = buttonImage
        self.title = title
        self.body = body
        self.buttonText = buttonText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.simplePopupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.simplePopupTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.buttonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.buttonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SimplePopup')
        if self.simplePopupId is not None:
            oprot.writeFieldBegin('simplePopupId', TType.STRING, 1)
            oprot.writeString(self.simplePopupId.encode('utf-8') if sys.version_info[0] == 2 else self.simplePopupId)
            oprot.writeFieldEnd()
        if self.simplePopupTemplateId is not None:
            oprot.writeFieldBegin('simplePopupTemplateId', TType.STRING, 2)
            oprot.writeString(self.simplePopupTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.simplePopupTemplateId)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 11)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.buttonImage is not None:
            oprot.writeFieldBegin('buttonImage', TType.STRING, 12)
            oprot.writeString(self.buttonImage.encode('utf-8') if sys.version_info[0] == 2 else self.buttonImage)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 20)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 21)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.buttonText is not None:
            oprot.writeFieldBegin('buttonText', TType.STRING, 22)
            oprot.writeString(self.buttonText.encode('utf-8') if sys.version_info[0] == 2 else self.buttonText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.simplePopupId is None:
            raise TProtocolException(message='Required field simplePopupId is unset!')
        if self.simplePopupTemplateId is None:
            raise TProtocolException(message='Required field simplePopupTemplateId is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GiftMessageTemplate(object):
    """
    Attributes:
     - giftMessageTemplateId
     - prefab
     - backgroundImage
     - buttonImage

    """


    def __init__(self, giftMessageTemplateId=None, prefab=None, backgroundImage=None, buttonImage=None,):
        self.giftMessageTemplateId = giftMessageTemplateId
        self.prefab = prefab
        self.backgroundImage = backgroundImage
        self.buttonImage = buttonImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.giftMessageTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.buttonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GiftMessageTemplate')
        if self.giftMessageTemplateId is not None:
            oprot.writeFieldBegin('giftMessageTemplateId', TType.STRING, 1)
            oprot.writeString(self.giftMessageTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessageTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 10)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 11)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.buttonImage is not None:
            oprot.writeFieldBegin('buttonImage', TType.STRING, 12)
            oprot.writeString(self.buttonImage.encode('utf-8') if sys.version_info[0] == 2 else self.buttonImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.giftMessageTemplateId is None:
            raise TProtocolException(message='Required field giftMessageTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        if self.buttonImage is None:
            raise TProtocolException(message='Required field buttonImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GiftMessage(object):
    """
    Attributes:
     - giftMessageId
     - giftMessageTemplateId
     - inboxSectionId
     - canClaimAll
     - giftMessagePopupId
     - topIcon
     - messageLimitId
     - title
     - subtitle
     - body
     - okayButtonText
     - cancelButtonText
     - currencyItems

    """


    def __init__(self, giftMessageId=None, giftMessageTemplateId=None, inboxSectionId=None, canClaimAll=None, giftMessagePopupId=None, topIcon=None, messageLimitId=None, title=None, subtitle=None, body=None, okayButtonText=None, cancelButtonText=None, currencyItems=None,):
        self.giftMessageId = giftMessageId
        self.giftMessageTemplateId = giftMessageTemplateId
        self.inboxSectionId = inboxSectionId
        self.canClaimAll = canClaimAll
        self.giftMessagePopupId = giftMessagePopupId
        self.topIcon = topIcon
        self.messageLimitId = messageLimitId
        self.title = title
        self.subtitle = subtitle
        self.body = body
        self.okayButtonText = okayButtonText
        self.cancelButtonText = cancelButtonText
        self.currencyItems = currencyItems

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.giftMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.giftMessageTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.inboxSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.canClaimAll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.giftMessagePopupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.topIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.messageLimitId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.subtitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.okayButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.cancelButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.currencyItems = []
                    (_etype628, _size625) = iprot.readListBegin()
                    for _i629 in range(_size625):
                        _elem630 = GiftMessageCurrencyItem()
                        _elem630.read(iprot)
                        self.currencyItems.append(_elem630)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GiftMessage')
        if self.giftMessageId is not None:
            oprot.writeFieldBegin('giftMessageId', TType.STRING, 1)
            oprot.writeString(self.giftMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessageId)
            oprot.writeFieldEnd()
        if self.giftMessageTemplateId is not None:
            oprot.writeFieldBegin('giftMessageTemplateId', TType.STRING, 2)
            oprot.writeString(self.giftMessageTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessageTemplateId)
            oprot.writeFieldEnd()
        if self.inboxSectionId is not None:
            oprot.writeFieldBegin('inboxSectionId', TType.STRING, 3)
            oprot.writeString(self.inboxSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.inboxSectionId)
            oprot.writeFieldEnd()
        if self.canClaimAll is not None:
            oprot.writeFieldBegin('canClaimAll', TType.BOOL, 5)
            oprot.writeBool(self.canClaimAll)
            oprot.writeFieldEnd()
        if self.giftMessagePopupId is not None:
            oprot.writeFieldBegin('giftMessagePopupId', TType.STRING, 6)
            oprot.writeString(self.giftMessagePopupId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessagePopupId)
            oprot.writeFieldEnd()
        if self.topIcon is not None:
            oprot.writeFieldBegin('topIcon', TType.STRING, 7)
            oprot.writeString(self.topIcon.encode('utf-8') if sys.version_info[0] == 2 else self.topIcon)
            oprot.writeFieldEnd()
        if self.messageLimitId is not None:
            oprot.writeFieldBegin('messageLimitId', TType.STRING, 8)
            oprot.writeString(self.messageLimitId.encode('utf-8') if sys.version_info[0] == 2 else self.messageLimitId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 10)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.subtitle is not None:
            oprot.writeFieldBegin('subtitle', TType.STRING, 11)
            oprot.writeString(self.subtitle.encode('utf-8') if sys.version_info[0] == 2 else self.subtitle)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 12)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.okayButtonText is not None:
            oprot.writeFieldBegin('okayButtonText', TType.STRING, 13)
            oprot.writeString(self.okayButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.okayButtonText)
            oprot.writeFieldEnd()
        if self.cancelButtonText is not None:
            oprot.writeFieldBegin('cancelButtonText', TType.STRING, 14)
            oprot.writeString(self.cancelButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.cancelButtonText)
            oprot.writeFieldEnd()
        if self.currencyItems is not None:
            oprot.writeFieldBegin('currencyItems', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.currencyItems))
            for iter631 in self.currencyItems:
                iter631.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.giftMessageId is None:
            raise TProtocolException(message='Required field giftMessageId is unset!')
        if self.giftMessageTemplateId is None:
            raise TProtocolException(message='Required field giftMessageTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GiftMessagePopupTempate(object):
    """
    Attributes:
     - giftMessagePopupTempateId
     - prefab

    """


    def __init__(self, giftMessagePopupTempateId=None, prefab=None,):
        self.giftMessagePopupTempateId = giftMessagePopupTempateId
        self.prefab = prefab

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.giftMessagePopupTempateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GiftMessagePopupTempate')
        if self.giftMessagePopupTempateId is not None:
            oprot.writeFieldBegin('giftMessagePopupTempateId', TType.STRING, 1)
            oprot.writeString(self.giftMessagePopupTempateId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessagePopupTempateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 10)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.giftMessagePopupTempateId is None:
            raise TProtocolException(message='Required field giftMessagePopupTempateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GiftMessagePopup(object):
    """
    Attributes:
     - giftMessagePopupId
     - giftMessagePopupTempateId
     - background
     - centerIcon
     - topIcon

    """


    def __init__(self, giftMessagePopupId=None, giftMessagePopupTempateId=None, background=None, centerIcon=None, topIcon=None,):
        self.giftMessagePopupId = giftMessagePopupId
        self.giftMessagePopupTempateId = giftMessagePopupTempateId
        self.background = background
        self.centerIcon = centerIcon
        self.topIcon = topIcon

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.giftMessagePopupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.giftMessagePopupTempateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.background = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.centerIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.topIcon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GiftMessagePopup')
        if self.giftMessagePopupId is not None:
            oprot.writeFieldBegin('giftMessagePopupId', TType.STRING, 1)
            oprot.writeString(self.giftMessagePopupId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessagePopupId)
            oprot.writeFieldEnd()
        if self.giftMessagePopupTempateId is not None:
            oprot.writeFieldBegin('giftMessagePopupTempateId', TType.STRING, 2)
            oprot.writeString(self.giftMessagePopupTempateId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessagePopupTempateId)
            oprot.writeFieldEnd()
        if self.background is not None:
            oprot.writeFieldBegin('background', TType.STRING, 10)
            oprot.writeString(self.background.encode('utf-8') if sys.version_info[0] == 2 else self.background)
            oprot.writeFieldEnd()
        if self.centerIcon is not None:
            oprot.writeFieldBegin('centerIcon', TType.STRING, 11)
            oprot.writeString(self.centerIcon.encode('utf-8') if sys.version_info[0] == 2 else self.centerIcon)
            oprot.writeFieldEnd()
        if self.topIcon is not None:
            oprot.writeFieldBegin('topIcon', TType.STRING, 12)
            oprot.writeString(self.topIcon.encode('utf-8') if sys.version_info[0] == 2 else self.topIcon)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.giftMessagePopupId is None:
            raise TProtocolException(message='Required field giftMessagePopupId is unset!')
        if self.giftMessagePopupTempateId is None:
            raise TProtocolException(message='Required field giftMessagePopupTempateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ScheduledGiftMessage(object):
    """
    Attributes:
     - giftMessageId
     - startTime
     - repeatPeriodMinutes
     - repeatDurationMinutes
     - numNotificationDays
     - notificationCooldownSeconds

    """


    def __init__(self, giftMessageId=None, startTime=None, repeatPeriodMinutes=None, repeatDurationMinutes=None, numNotificationDays=None, notificationCooldownSeconds=None,):
        self.giftMessageId = giftMessageId
        self.startTime = startTime
        self.repeatPeriodMinutes = repeatPeriodMinutes
        self.repeatDurationMinutes = repeatDurationMinutes
        self.numNotificationDays = numNotificationDays
        self.notificationCooldownSeconds = notificationCooldownSeconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.giftMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.startTime = DateTimeUTC()
                    self.startTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.repeatPeriodMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.repeatDurationMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numNotificationDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.notificationCooldownSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ScheduledGiftMessage')
        if self.giftMessageId is not None:
            oprot.writeFieldBegin('giftMessageId', TType.STRING, 1)
            oprot.writeString(self.giftMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.giftMessageId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRUCT, 2)
            self.startTime.write(oprot)
            oprot.writeFieldEnd()
        if self.repeatPeriodMinutes is not None:
            oprot.writeFieldBegin('repeatPeriodMinutes', TType.I32, 3)
            oprot.writeI32(self.repeatPeriodMinutes)
            oprot.writeFieldEnd()
        if self.repeatDurationMinutes is not None:
            oprot.writeFieldBegin('repeatDurationMinutes', TType.I32, 4)
            oprot.writeI32(self.repeatDurationMinutes)
            oprot.writeFieldEnd()
        if self.numNotificationDays is not None:
            oprot.writeFieldBegin('numNotificationDays', TType.I32, 5)
            oprot.writeI32(self.numNotificationDays)
            oprot.writeFieldEnd()
        if self.notificationCooldownSeconds is not None:
            oprot.writeFieldBegin('notificationCooldownSeconds', TType.I32, 6)
            oprot.writeI32(self.notificationCooldownSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.giftMessageId is None:
            raise TProtocolException(message='Required field giftMessageId is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        if self.repeatPeriodMinutes is None:
            raise TProtocolException(message='Required field repeatPeriodMinutes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfferPackShopItemTemplate(object):
    """
    Attributes:
     - offerPackShopItemTemplateId
     - prefab
     - buyButtonImage
     - discountStickerImage
     - discountCrossoutImage
     - timerBgImage
     - timerClockImage
     - clockHandImage

    """


    def __init__(self, offerPackShopItemTemplateId=None, prefab=None, buyButtonImage=None, discountStickerImage=None, discountCrossoutImage=None, timerBgImage=None, timerClockImage=None, clockHandImage=None,):
        self.offerPackShopItemTemplateId = offerPackShopItemTemplateId
        self.prefab = prefab
        self.buyButtonImage = buyButtonImage
        self.discountStickerImage = discountStickerImage
        self.discountCrossoutImage = discountCrossoutImage
        self.timerBgImage = timerBgImage
        self.timerClockImage = timerClockImage
        self.clockHandImage = clockHandImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.offerPackShopItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.buyButtonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.discountStickerImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.discountCrossoutImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.timerBgImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.timerClockImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.clockHandImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfferPackShopItemTemplate')
        if self.offerPackShopItemTemplateId is not None:
            oprot.writeFieldBegin('offerPackShopItemTemplateId', TType.STRING, 1)
            oprot.writeString(self.offerPackShopItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.offerPackShopItemTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.buyButtonImage is not None:
            oprot.writeFieldBegin('buyButtonImage', TType.STRING, 3)
            oprot.writeString(self.buyButtonImage.encode('utf-8') if sys.version_info[0] == 2 else self.buyButtonImage)
            oprot.writeFieldEnd()
        if self.discountStickerImage is not None:
            oprot.writeFieldBegin('discountStickerImage', TType.STRING, 4)
            oprot.writeString(self.discountStickerImage.encode('utf-8') if sys.version_info[0] == 2 else self.discountStickerImage)
            oprot.writeFieldEnd()
        if self.discountCrossoutImage is not None:
            oprot.writeFieldBegin('discountCrossoutImage', TType.STRING, 5)
            oprot.writeString(self.discountCrossoutImage.encode('utf-8') if sys.version_info[0] == 2 else self.discountCrossoutImage)
            oprot.writeFieldEnd()
        if self.timerBgImage is not None:
            oprot.writeFieldBegin('timerBgImage', TType.STRING, 6)
            oprot.writeString(self.timerBgImage.encode('utf-8') if sys.version_info[0] == 2 else self.timerBgImage)
            oprot.writeFieldEnd()
        if self.timerClockImage is not None:
            oprot.writeFieldBegin('timerClockImage', TType.STRING, 7)
            oprot.writeString(self.timerClockImage.encode('utf-8') if sys.version_info[0] == 2 else self.timerClockImage)
            oprot.writeFieldEnd()
        if self.clockHandImage is not None:
            oprot.writeFieldBegin('clockHandImage', TType.STRING, 8)
            oprot.writeString(self.clockHandImage.encode('utf-8') if sys.version_info[0] == 2 else self.clockHandImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.offerPackShopItemTemplateId is None:
            raise TProtocolException(message='Required field offerPackShopItemTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfferPackShopItem(object):
    """
    Attributes:
     - offerPackShopItemId
     - offerPackShopItemTemplateId
     - backgroundImage
     - title
     - text1
     - text2
     - text3
     - buyButtonText
     - discountText
     - undiscountedText

    """


    def __init__(self, offerPackShopItemId=None, offerPackShopItemTemplateId=None, backgroundImage=None, title=None, text1=None, text2=None, text3=None, buyButtonText=None, discountText=None, undiscountedText=None,):
        self.offerPackShopItemId = offerPackShopItemId
        self.offerPackShopItemTemplateId = offerPackShopItemTemplateId
        self.backgroundImage = backgroundImage
        self.title = title
        self.text1 = text1
        self.text2 = text2
        self.text3 = text3
        self.buyButtonText = buyButtonText
        self.discountText = discountText
        self.undiscountedText = undiscountedText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.offerPackShopItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.offerPackShopItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.text1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.text2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.text3 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.buyButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.discountText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.undiscountedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfferPackShopItem')
        if self.offerPackShopItemId is not None:
            oprot.writeFieldBegin('offerPackShopItemId', TType.STRING, 1)
            oprot.writeString(self.offerPackShopItemId.encode('utf-8') if sys.version_info[0] == 2 else self.offerPackShopItemId)
            oprot.writeFieldEnd()
        if self.offerPackShopItemTemplateId is not None:
            oprot.writeFieldBegin('offerPackShopItemTemplateId', TType.STRING, 2)
            oprot.writeString(self.offerPackShopItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.offerPackShopItemTemplateId)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 4)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.text1 is not None:
            oprot.writeFieldBegin('text1', TType.STRING, 5)
            oprot.writeString(self.text1.encode('utf-8') if sys.version_info[0] == 2 else self.text1)
            oprot.writeFieldEnd()
        if self.text2 is not None:
            oprot.writeFieldBegin('text2', TType.STRING, 6)
            oprot.writeString(self.text2.encode('utf-8') if sys.version_info[0] == 2 else self.text2)
            oprot.writeFieldEnd()
        if self.text3 is not None:
            oprot.writeFieldBegin('text3', TType.STRING, 7)
            oprot.writeString(self.text3.encode('utf-8') if sys.version_info[0] == 2 else self.text3)
            oprot.writeFieldEnd()
        if self.buyButtonText is not None:
            oprot.writeFieldBegin('buyButtonText', TType.STRING, 10)
            oprot.writeString(self.buyButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.buyButtonText)
            oprot.writeFieldEnd()
        if self.discountText is not None:
            oprot.writeFieldBegin('discountText', TType.STRING, 11)
            oprot.writeString(self.discountText.encode('utf-8') if sys.version_info[0] == 2 else self.discountText)
            oprot.writeFieldEnd()
        if self.undiscountedText is not None:
            oprot.writeFieldBegin('undiscountedText', TType.STRING, 12)
            oprot.writeString(self.undiscountedText.encode('utf-8') if sys.version_info[0] == 2 else self.undiscountedText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.offerPackShopItemId is None:
            raise TProtocolException(message='Required field offerPackShopItemId is unset!')
        if self.offerPackShopItemTemplateId is None:
            raise TProtocolException(message='Required field offerPackShopItemTemplateId is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfferPackZoomItemTemplate(object):
    """
    Attributes:
     - offerPackZoomItemTemplateId
     - prefab
     - buyButtonImage
     - discountStickerImage
     - discountCrossoutImage
     - timerBgImage
     - timerClockImage
     - timerHandImage

    """


    def __init__(self, offerPackZoomItemTemplateId=None, prefab=None, buyButtonImage=None, discountStickerImage=None, discountCrossoutImage=None, timerBgImage=None, timerClockImage=None, timerHandImage=None,):
        self.offerPackZoomItemTemplateId = offerPackZoomItemTemplateId
        self.prefab = prefab
        self.buyButtonImage = buyButtonImage
        self.discountStickerImage = discountStickerImage
        self.discountCrossoutImage = discountCrossoutImage
        self.timerBgImage = timerBgImage
        self.timerClockImage = timerClockImage
        self.timerHandImage = timerHandImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.offerPackZoomItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.buyButtonImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.discountStickerImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.discountCrossoutImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.timerBgImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.timerClockImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.timerHandImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfferPackZoomItemTemplate')
        if self.offerPackZoomItemTemplateId is not None:
            oprot.writeFieldBegin('offerPackZoomItemTemplateId', TType.STRING, 1)
            oprot.writeString(self.offerPackZoomItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.offerPackZoomItemTemplateId)
            oprot.writeFieldEnd()
        if self.prefab is not None:
            oprot.writeFieldBegin('prefab', TType.STRING, 2)
            oprot.writeString(self.prefab.encode('utf-8') if sys.version_info[0] == 2 else self.prefab)
            oprot.writeFieldEnd()
        if self.buyButtonImage is not None:
            oprot.writeFieldBegin('buyButtonImage', TType.STRING, 3)
            oprot.writeString(self.buyButtonImage.encode('utf-8') if sys.version_info[0] == 2 else self.buyButtonImage)
            oprot.writeFieldEnd()
        if self.discountStickerImage is not None:
            oprot.writeFieldBegin('discountStickerImage', TType.STRING, 4)
            oprot.writeString(self.discountStickerImage.encode('utf-8') if sys.version_info[0] == 2 else self.discountStickerImage)
            oprot.writeFieldEnd()
        if self.discountCrossoutImage is not None:
            oprot.writeFieldBegin('discountCrossoutImage', TType.STRING, 5)
            oprot.writeString(self.discountCrossoutImage.encode('utf-8') if sys.version_info[0] == 2 else self.discountCrossoutImage)
            oprot.writeFieldEnd()
        if self.timerBgImage is not None:
            oprot.writeFieldBegin('timerBgImage', TType.STRING, 6)
            oprot.writeString(self.timerBgImage.encode('utf-8') if sys.version_info[0] == 2 else self.timerBgImage)
            oprot.writeFieldEnd()
        if self.timerClockImage is not None:
            oprot.writeFieldBegin('timerClockImage', TType.STRING, 7)
            oprot.writeString(self.timerClockImage.encode('utf-8') if sys.version_info[0] == 2 else self.timerClockImage)
            oprot.writeFieldEnd()
        if self.timerHandImage is not None:
            oprot.writeFieldBegin('timerHandImage', TType.STRING, 8)
            oprot.writeString(self.timerHandImage.encode('utf-8') if sys.version_info[0] == 2 else self.timerHandImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.offerPackZoomItemTemplateId is None:
            raise TProtocolException(message='Required field offerPackZoomItemTemplateId is unset!')
        if self.prefab is None:
            raise TProtocolException(message='Required field prefab is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfferPackZoomItem(object):
    """
    Attributes:
     - offerPackZoomItemId
     - offerPackZoomItemTemplateId
     - backgroundImage
     - titleText
     - subtitleText
     - stickerText
     - text1
     - text2
     - text3
     - buyButtonText
     - discountText
     - undiscountedText

    """


    def __init__(self, offerPackZoomItemId=None, offerPackZoomItemTemplateId=None, backgroundImage=None, titleText=None, subtitleText=None, stickerText=None, text1=None, text2=None, text3=None, buyButtonText=None, discountText=None, undiscountedText=None,):
        self.offerPackZoomItemId = offerPackZoomItemId
        self.offerPackZoomItemTemplateId = offerPackZoomItemTemplateId
        self.backgroundImage = backgroundImage
        self.titleText = titleText
        self.subtitleText = subtitleText
        self.stickerText = stickerText
        self.text1 = text1
        self.text2 = text2
        self.text3 = text3
        self.buyButtonText = buyButtonText
        self.discountText = discountText
        self.undiscountedText = undiscountedText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.offerPackZoomItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.offerPackZoomItemTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.titleText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.subtitleText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.stickerText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.text1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.text2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.text3 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.buyButtonText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.discountText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.undiscountedText = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfferPackZoomItem')
        if self.offerPackZoomItemId is not None:
            oprot.writeFieldBegin('offerPackZoomItemId', TType.STRING, 1)
            oprot.writeString(self.offerPackZoomItemId.encode('utf-8') if sys.version_info[0] == 2 else self.offerPackZoomItemId)
            oprot.writeFieldEnd()
        if self.offerPackZoomItemTemplateId is not None:
            oprot.writeFieldBegin('offerPackZoomItemTemplateId', TType.STRING, 2)
            oprot.writeString(self.offerPackZoomItemTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.offerPackZoomItemTemplateId)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.titleText is not None:
            oprot.writeFieldBegin('titleText', TType.STRING, 4)
            oprot.writeString(self.titleText.encode('utf-8') if sys.version_info[0] == 2 else self.titleText)
            oprot.writeFieldEnd()
        if self.subtitleText is not None:
            oprot.writeFieldBegin('subtitleText', TType.STRING, 5)
            oprot.writeString(self.subtitleText.encode('utf-8') if sys.version_info[0] == 2 else self.subtitleText)
            oprot.writeFieldEnd()
        if self.stickerText is not None:
            oprot.writeFieldBegin('stickerText', TType.STRING, 6)
            oprot.writeString(self.stickerText.encode('utf-8') if sys.version_info[0] == 2 else self.stickerText)
            oprot.writeFieldEnd()
        if self.text1 is not None:
            oprot.writeFieldBegin('text1', TType.STRING, 10)
            oprot.writeString(self.text1.encode('utf-8') if sys.version_info[0] == 2 else self.text1)
            oprot.writeFieldEnd()
        if self.text2 is not None:
            oprot.writeFieldBegin('text2', TType.STRING, 11)
            oprot.writeString(self.text2.encode('utf-8') if sys.version_info[0] == 2 else self.text2)
            oprot.writeFieldEnd()
        if self.text3 is not None:
            oprot.writeFieldBegin('text3', TType.STRING, 12)
            oprot.writeString(self.text3.encode('utf-8') if sys.version_info[0] == 2 else self.text3)
            oprot.writeFieldEnd()
        if self.buyButtonText is not None:
            oprot.writeFieldBegin('buyButtonText', TType.STRING, 13)
            oprot.writeString(self.buyButtonText.encode('utf-8') if sys.version_info[0] == 2 else self.buyButtonText)
            oprot.writeFieldEnd()
        if self.discountText is not None:
            oprot.writeFieldBegin('discountText', TType.STRING, 14)
            oprot.writeString(self.discountText.encode('utf-8') if sys.version_info[0] == 2 else self.discountText)
            oprot.writeFieldEnd()
        if self.undiscountedText is not None:
            oprot.writeFieldBegin('undiscountedText', TType.STRING, 15)
            oprot.writeString(self.undiscountedText.encode('utf-8') if sys.version_info[0] == 2 else self.undiscountedText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.offerPackZoomItemId is None:
            raise TProtocolException(message='Required field offerPackZoomItemId is unset!')
        if self.offerPackZoomItemTemplateId is None:
            raise TProtocolException(message='Required field offerPackZoomItemTemplateId is unset!')
        if self.backgroundImage is None:
            raise TProtocolException(message='Required field backgroundImage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Event(object):
    """
    Attributes:
     - eventId
     - previewStartTime
     - mainStartTime
     - mainEndTime
     - recapEndTime
     - repeatSeconds

    """


    def __init__(self, eventId=None, previewStartTime=None, mainStartTime=None, mainEndTime=None, recapEndTime=None, repeatSeconds=None,):
        self.eventId = eventId
        self.previewStartTime = previewStartTime
        self.mainStartTime = mainStartTime
        self.mainEndTime = mainEndTime
        self.recapEndTime = recapEndTime
        self.repeatSeconds = repeatSeconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eventId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.previewStartTime = DateTimeUTC()
                    self.previewStartTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.mainStartTime = DateTimeUTC()
                    self.mainStartTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.mainEndTime = DateTimeUTC()
                    self.mainEndTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.recapEndTime = DateTimeUTC()
                    self.recapEndTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.repeatSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Event')
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.STRING, 1)
            oprot.writeString(self.eventId.encode('utf-8') if sys.version_info[0] == 2 else self.eventId)
            oprot.writeFieldEnd()
        if self.previewStartTime is not None:
            oprot.writeFieldBegin('previewStartTime', TType.STRUCT, 10)
            self.previewStartTime.write(oprot)
            oprot.writeFieldEnd()
        if self.mainStartTime is not None:
            oprot.writeFieldBegin('mainStartTime', TType.STRUCT, 11)
            self.mainStartTime.write(oprot)
            oprot.writeFieldEnd()
        if self.mainEndTime is not None:
            oprot.writeFieldBegin('mainEndTime', TType.STRUCT, 12)
            self.mainEndTime.write(oprot)
            oprot.writeFieldEnd()
        if self.recapEndTime is not None:
            oprot.writeFieldBegin('recapEndTime', TType.STRUCT, 13)
            self.recapEndTime.write(oprot)
            oprot.writeFieldEnd()
        if self.repeatSeconds is not None:
            oprot.writeFieldBegin('repeatSeconds', TType.I32, 20)
            oprot.writeI32(self.repeatSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.eventId is None:
            raise TProtocolException(message='Required field eventId is unset!')
        if self.previewStartTime is None:
            raise TProtocolException(message='Required field previewStartTime is unset!')
        if self.mainStartTime is None:
            raise TProtocolException(message='Required field mainStartTime is unset!')
        if self.mainEndTime is None:
            raise TProtocolException(message='Required field mainEndTime is unset!')
        if self.recapEndTime is None:
            raise TProtocolException(message='Required field recapEndTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventActivity(object):
    """
    Attributes:
     - eventActivityId
     - eventId
     - eventListMainItemPrefab
     - eventListMainSectionId
     - eventListOfferItemPrefab
     - eventListOfferSectionId
     - display
     - eventListMainItemImage

    """


    def __init__(self, eventActivityId=None, eventId=None, eventListMainItemPrefab=None, eventListMainSectionId=None, eventListOfferItemPrefab=None, eventListOfferSectionId=None, display=None, eventListMainItemImage=None,):
        self.eventActivityId = eventActivityId
        self.eventId = eventId
        self.eventListMainItemPrefab = eventListMainItemPrefab
        self.eventListMainSectionId = eventListMainSectionId
        self.eventListOfferItemPrefab = eventListOfferItemPrefab
        self.eventListOfferSectionId = eventListOfferSectionId
        self.display = display
        self.eventListMainItemImage = eventListMainItemImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eventActivityId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.eventId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.eventListMainItemPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.eventListMainSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.eventListOfferItemPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.eventListOfferSectionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.eventListMainItemImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventActivity')
        if self.eventActivityId is not None:
            oprot.writeFieldBegin('eventActivityId', TType.STRING, 1)
            oprot.writeString(self.eventActivityId.encode('utf-8') if sys.version_info[0] == 2 else self.eventActivityId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.STRING, 2)
            oprot.writeString(self.eventId.encode('utf-8') if sys.version_info[0] == 2 else self.eventId)
            oprot.writeFieldEnd()
        if self.eventListMainItemPrefab is not None:
            oprot.writeFieldBegin('eventListMainItemPrefab', TType.STRING, 3)
            oprot.writeString(self.eventListMainItemPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.eventListMainItemPrefab)
            oprot.writeFieldEnd()
        if self.eventListMainSectionId is not None:
            oprot.writeFieldBegin('eventListMainSectionId', TType.STRING, 4)
            oprot.writeString(self.eventListMainSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.eventListMainSectionId)
            oprot.writeFieldEnd()
        if self.eventListOfferItemPrefab is not None:
            oprot.writeFieldBegin('eventListOfferItemPrefab', TType.STRING, 5)
            oprot.writeString(self.eventListOfferItemPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.eventListOfferItemPrefab)
            oprot.writeFieldEnd()
        if self.eventListOfferSectionId is not None:
            oprot.writeFieldBegin('eventListOfferSectionId', TType.STRING, 6)
            oprot.writeString(self.eventListOfferSectionId.encode('utf-8') if sys.version_info[0] == 2 else self.eventListOfferSectionId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 7)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.eventListMainItemImage is not None:
            oprot.writeFieldBegin('eventListMainItemImage', TType.STRING, 8)
            oprot.writeString(self.eventListMainItemImage.encode('utf-8') if sys.version_info[0] == 2 else self.eventListMainItemImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.eventActivityId is None:
            raise TProtocolException(message='Required field eventActivityId is unset!')
        if self.eventId is None:
            raise TProtocolException(message='Required field eventId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EventPhase(object):
    """
    Attributes:
     - eventId
     - eventPhaseId

    """


    def __init__(self, eventId=None, eventPhaseId=None,):
        self.eventId = eventId
        self.eventPhaseId = eventPhaseId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eventId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.eventPhaseId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EventPhase')
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.STRING, 1)
            oprot.writeString(self.eventId.encode('utf-8') if sys.version_info[0] == 2 else self.eventId)
            oprot.writeFieldEnd()
        if self.eventPhaseId is not None:
            oprot.writeFieldBegin('eventPhaseId', TType.I32, 2)
            oprot.writeI32(self.eventPhaseId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.eventId is None:
            raise TProtocolException(message='Required field eventId is unset!')
        if self.eventPhaseId is None:
            raise TProtocolException(message='Required field eventPhaseId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Activity(object):
    """
    Attributes:
     - activityId
     - eventPhases
     - display
     - showRank
     - hideRank
     - bundleIds

    """


    def __init__(self, activityId=None, eventPhases=None, display=None, showRank=None, hideRank=None, bundleIds=None,):
        self.activityId = activityId
        self.eventPhases = eventPhases
        self.display = display
        self.showRank = showRank
        self.hideRank = hideRank
        self.bundleIds = bundleIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.activityId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.eventPhases = []
                    (_etype635, _size632) = iprot.readListBegin()
                    for _i636 in range(_size632):
                        _elem637 = EventPhase()
                        _elem637.read(iprot)
                        self.eventPhases.append(_elem637)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.showRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.hideRank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.LIST:
                    self.bundleIds = []
                    (_etype641, _size638) = iprot.readListBegin()
                    for _i642 in range(_size638):
                        _elem643 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.bundleIds.append(_elem643)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Activity')
        if self.activityId is not None:
            oprot.writeFieldBegin('activityId', TType.STRING, 1)
            oprot.writeString(self.activityId.encode('utf-8') if sys.version_info[0] == 2 else self.activityId)
            oprot.writeFieldEnd()
        if self.eventPhases is not None:
            oprot.writeFieldBegin('eventPhases', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.eventPhases))
            for iter644 in self.eventPhases:
                iter644.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 10)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.showRank is not None:
            oprot.writeFieldBegin('showRank', TType.I32, 20)
            oprot.writeI32(self.showRank)
            oprot.writeFieldEnd()
        if self.hideRank is not None:
            oprot.writeFieldBegin('hideRank', TType.I32, 21)
            oprot.writeI32(self.hideRank)
            oprot.writeFieldEnd()
        if self.bundleIds is not None:
            oprot.writeFieldBegin('bundleIds', TType.LIST, 30)
            oprot.writeListBegin(TType.STRING, len(self.bundleIds))
            for iter645 in self.bundleIds:
                oprot.writeString(iter645.encode('utf-8') if sys.version_info[0] == 2 else iter645)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.activityId is None:
            raise TProtocolException(message='Required field activityId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.showRank is None:
            raise TProtocolException(message='Required field showRank is unset!')
        if self.hideRank is None:
            raise TProtocolException(message='Required field hideRank is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Enchantment(object):
    """
    Attributes:
     - enchantmentId
     - enchantAudioPath
     - actionAudioPath
     - isPositive
     - effectPrefab
     - actionPrefab
     - groupId
     - triggerTypeId
     - skillStatProfileId
     - triggerParam
     - prefabPath
     - badgeImage

    """


    def __init__(self, enchantmentId=None, enchantAudioPath=None, actionAudioPath=None, isPositive=None, effectPrefab=None, actionPrefab=None, groupId=None, triggerTypeId=None, skillStatProfileId=None, triggerParam=None, prefabPath=None, badgeImage=None,):
        self.enchantmentId = enchantmentId
        self.enchantAudioPath = enchantAudioPath
        self.actionAudioPath = actionAudioPath
        self.isPositive = isPositive
        self.effectPrefab = effectPrefab
        self.actionPrefab = actionPrefab
        self.groupId = groupId
        self.triggerTypeId = triggerTypeId
        self.skillStatProfileId = skillStatProfileId
        self.triggerParam = triggerParam
        self.prefabPath = prefabPath
        self.badgeImage = badgeImage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.enchantmentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.enchantAudioPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.actionAudioPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isPositive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.effectPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.actionPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.triggerTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.triggerParam = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.badgeImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Enchantment')
        if self.enchantmentId is not None:
            oprot.writeFieldBegin('enchantmentId', TType.STRING, 1)
            oprot.writeString(self.enchantmentId.encode('utf-8') if sys.version_info[0] == 2 else self.enchantmentId)
            oprot.writeFieldEnd()
        if self.enchantAudioPath is not None:
            oprot.writeFieldBegin('enchantAudioPath', TType.STRING, 2)
            oprot.writeString(self.enchantAudioPath.encode('utf-8') if sys.version_info[0] == 2 else self.enchantAudioPath)
            oprot.writeFieldEnd()
        if self.actionAudioPath is not None:
            oprot.writeFieldBegin('actionAudioPath', TType.STRING, 3)
            oprot.writeString(self.actionAudioPath.encode('utf-8') if sys.version_info[0] == 2 else self.actionAudioPath)
            oprot.writeFieldEnd()
        if self.isPositive is not None:
            oprot.writeFieldBegin('isPositive', TType.BOOL, 5)
            oprot.writeBool(self.isPositive)
            oprot.writeFieldEnd()
        if self.effectPrefab is not None:
            oprot.writeFieldBegin('effectPrefab', TType.STRING, 6)
            oprot.writeString(self.effectPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.effectPrefab)
            oprot.writeFieldEnd()
        if self.actionPrefab is not None:
            oprot.writeFieldBegin('actionPrefab', TType.STRING, 8)
            oprot.writeString(self.actionPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.actionPrefab)
            oprot.writeFieldEnd()
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 9)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.triggerTypeId is not None:
            oprot.writeFieldBegin('triggerTypeId', TType.I32, 11)
            oprot.writeI32(self.triggerTypeId)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 12)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.triggerParam is not None:
            oprot.writeFieldBegin('triggerParam', TType.DOUBLE, 13)
            oprot.writeDouble(self.triggerParam)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 15)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.badgeImage is not None:
            oprot.writeFieldBegin('badgeImage', TType.STRING, 21)
            oprot.writeString(self.badgeImage.encode('utf-8') if sys.version_info[0] == 2 else self.badgeImage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.enchantmentId is None:
            raise TProtocolException(message='Required field enchantmentId is unset!')
        if self.isPositive is None:
            raise TProtocolException(message='Required field isPositive is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PassiveSkill(object):
    """
    Attributes:
     - skillId
     - isStat
     - isPositive
     - matchAffinity
     - matchGender
     - oppositeGender
     - affinityMatchId
     - genderMatchId
     - skillStatProfileId

    """


    def __init__(self, skillId=None, isStat=None, isPositive=None, matchAffinity=None, matchGender=None, oppositeGender=None, affinityMatchId=None, genderMatchId=None, skillStatProfileId=None,):
        self.skillId = skillId
        self.isStat = isStat
        self.isPositive = isPositive
        self.matchAffinity = matchAffinity
        self.matchGender = matchGender
        self.oppositeGender = oppositeGender
        self.affinityMatchId = affinityMatchId
        self.genderMatchId = genderMatchId
        self.skillStatProfileId = skillStatProfileId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.skillId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isStat = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isPositive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.matchAffinity = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.matchGender = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.oppositeGender = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.affinityMatchId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.genderMatchId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PassiveSkill')
        if self.skillId is not None:
            oprot.writeFieldBegin('skillId', TType.STRING, 1)
            oprot.writeString(self.skillId.encode('utf-8') if sys.version_info[0] == 2 else self.skillId)
            oprot.writeFieldEnd()
        if self.isStat is not None:
            oprot.writeFieldBegin('isStat', TType.BOOL, 2)
            oprot.writeBool(self.isStat)
            oprot.writeFieldEnd()
        if self.isPositive is not None:
            oprot.writeFieldBegin('isPositive', TType.BOOL, 3)
            oprot.writeBool(self.isPositive)
            oprot.writeFieldEnd()
        if self.matchAffinity is not None:
            oprot.writeFieldBegin('matchAffinity', TType.BOOL, 4)
            oprot.writeBool(self.matchAffinity)
            oprot.writeFieldEnd()
        if self.matchGender is not None:
            oprot.writeFieldBegin('matchGender', TType.BOOL, 5)
            oprot.writeBool(self.matchGender)
            oprot.writeFieldEnd()
        if self.oppositeGender is not None:
            oprot.writeFieldBegin('oppositeGender', TType.BOOL, 6)
            oprot.writeBool(self.oppositeGender)
            oprot.writeFieldEnd()
        if self.affinityMatchId is not None:
            oprot.writeFieldBegin('affinityMatchId', TType.I32, 7)
            oprot.writeI32(self.affinityMatchId)
            oprot.writeFieldEnd()
        if self.genderMatchId is not None:
            oprot.writeFieldBegin('genderMatchId', TType.I32, 8)
            oprot.writeI32(self.genderMatchId)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 9)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.skillId is None:
            raise TProtocolException(message='Required field skillId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StatBumper(object):
    """
    Attributes:
     - skillId
     - effectPrefabPath
     - skillStatProfileId

    """


    def __init__(self, skillId=None, effectPrefabPath=None, skillStatProfileId=None,):
        self.skillId = skillId
        self.effectPrefabPath = effectPrefabPath
        self.skillStatProfileId = skillStatProfileId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.skillId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.effectPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StatBumper')
        if self.skillId is not None:
            oprot.writeFieldBegin('skillId', TType.STRING, 1)
            oprot.writeString(self.skillId.encode('utf-8') if sys.version_info[0] == 2 else self.skillId)
            oprot.writeFieldEnd()
        if self.effectPrefabPath is not None:
            oprot.writeFieldBegin('effectPrefabPath', TType.STRING, 2)
            oprot.writeString(self.effectPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.effectPrefabPath)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 3)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.skillId is None:
            raise TProtocolException(message='Required field skillId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroStat(object):
    """
    Attributes:
     - heroStatId
     - display
     - icon
     - displayOrder
     - showInHeroInfo

    """


    def __init__(self, heroStatId=None, display=None, icon=None, displayOrder=None, showInHeroInfo=None,):
        self.heroStatId = heroStatId
        self.display = display
        self.icon = icon
        self.displayOrder = displayOrder
        self.showInHeroInfo = showInHeroInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.heroStatId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.showInHeroInfo = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroStat')
        if self.heroStatId is not None:
            oprot.writeFieldBegin('heroStatId', TType.I32, 1)
            oprot.writeI32(self.heroStatId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 3)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 4)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.showInHeroInfo is not None:
            oprot.writeFieldBegin('showInHeroInfo', TType.BOOL, 5)
            oprot.writeBool(self.showInHeroInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroStatId is None:
            raise TProtocolException(message='Required field heroStatId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HeroStatistic(object):
    """
    Attributes:
     - heroStatisticId
     - display
     - icon
     - displayOrder

    """


    def __init__(self, heroStatisticId=None, display=None, icon=None, displayOrder=None,):
        self.heroStatisticId = heroStatisticId
        self.display = display
        self.icon = icon
        self.displayOrder = displayOrder

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.heroStatisticId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeroStatistic')
        if self.heroStatisticId is not None:
            oprot.writeFieldBegin('heroStatisticId', TType.I32, 1)
            oprot.writeI32(self.heroStatisticId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 3)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 4)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.heroStatisticId is None:
            raise TProtocolException(message='Required field heroStatisticId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GearItem(object):
    """
    Attributes:
     - gearItemId
     - rarityId
     - display
     - requiresLevel
     - craftGoldCost
     - dropTypeId
     - orderDeprecated
     - valueCents
     - craftItemIds
     - craftItemCounts
     - progressionId
     - order
     - sellCurrencyId
     - sellCurrencyAmount
     - heroStatIds
     - heroStatAmounts

    """


    def __init__(self, gearItemId=None, rarityId=None, display=None, requiresLevel=None, craftGoldCost=None, dropTypeId=None, orderDeprecated=None, valueCents=None, craftItemIds=None, craftItemCounts=None, progressionId=None, order=None, sellCurrencyId=None, sellCurrencyAmount=None, heroStatIds=None, heroStatAmounts=None,):
        self.gearItemId = gearItemId
        self.rarityId = rarityId
        self.display = display
        self.requiresLevel = requiresLevel
        self.craftGoldCost = craftGoldCost
        self.dropTypeId = dropTypeId
        self.orderDeprecated = orderDeprecated
        self.valueCents = valueCents
        self.craftItemIds = craftItemIds
        self.craftItemCounts = craftItemCounts
        self.progressionId = progressionId
        self.order = order
        self.sellCurrencyId = sellCurrencyId
        self.sellCurrencyAmount = sellCurrencyAmount
        self.heroStatIds = heroStatIds
        self.heroStatAmounts = heroStatAmounts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.gearItemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rarityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.requiresLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.craftGoldCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.dropTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.orderDeprecated = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.valueCents = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.craftItemIds = []
                    (_etype649, _size646) = iprot.readListBegin()
                    for _i650 in range(_size646):
                        _elem651 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.craftItemIds.append(_elem651)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.craftItemCounts = []
                    (_etype655, _size652) = iprot.readListBegin()
                    for _i656 in range(_size652):
                        _elem657 = iprot.readI32()
                        self.craftItemCounts.append(_elem657)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.progressionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.order = []
                    (_etype661, _size658) = iprot.readListBegin()
                    for _i662 in range(_size658):
                        _elem663 = iprot.readI32()
                        self.order.append(_elem663)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.sellCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.sellCurrencyAmount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.LIST:
                    self.heroStatIds = []
                    (_etype667, _size664) = iprot.readListBegin()
                    for _i668 in range(_size664):
                        _elem669 = iprot.readI32()
                        self.heroStatIds.append(_elem669)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.LIST:
                    self.heroStatAmounts = []
                    (_etype673, _size670) = iprot.readListBegin()
                    for _i674 in range(_size670):
                        _elem675 = iprot.readDouble()
                        self.heroStatAmounts.append(_elem675)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GearItem')
        if self.gearItemId is not None:
            oprot.writeFieldBegin('gearItemId', TType.STRING, 1)
            oprot.writeString(self.gearItemId.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId)
            oprot.writeFieldEnd()
        if self.rarityId is not None:
            oprot.writeFieldBegin('rarityId', TType.I32, 2)
            oprot.writeI32(self.rarityId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.requiresLevel is not None:
            oprot.writeFieldBegin('requiresLevel', TType.I32, 5)
            oprot.writeI32(self.requiresLevel)
            oprot.writeFieldEnd()
        if self.craftGoldCost is not None:
            oprot.writeFieldBegin('craftGoldCost', TType.I32, 6)
            oprot.writeI32(self.craftGoldCost)
            oprot.writeFieldEnd()
        if self.dropTypeId is not None:
            oprot.writeFieldBegin('dropTypeId', TType.I32, 7)
            oprot.writeI32(self.dropTypeId)
            oprot.writeFieldEnd()
        if self.orderDeprecated is not None:
            oprot.writeFieldBegin('orderDeprecated', TType.I32, 8)
            oprot.writeI32(self.orderDeprecated)
            oprot.writeFieldEnd()
        if self.valueCents is not None:
            oprot.writeFieldBegin('valueCents', TType.I32, 9)
            oprot.writeI32(self.valueCents)
            oprot.writeFieldEnd()
        if self.craftItemIds is not None:
            oprot.writeFieldBegin('craftItemIds', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.craftItemIds))
            for iter676 in self.craftItemIds:
                oprot.writeString(iter676.encode('utf-8') if sys.version_info[0] == 2 else iter676)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.craftItemCounts is not None:
            oprot.writeFieldBegin('craftItemCounts', TType.LIST, 11)
            oprot.writeListBegin(TType.I32, len(self.craftItemCounts))
            for iter677 in self.craftItemCounts:
                oprot.writeI32(iter677)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.progressionId is not None:
            oprot.writeFieldBegin('progressionId', TType.I32, 13)
            oprot.writeI32(self.progressionId)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.LIST, 14)
            oprot.writeListBegin(TType.I32, len(self.order))
            for iter678 in self.order:
                oprot.writeI32(iter678)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sellCurrencyId is not None:
            oprot.writeFieldBegin('sellCurrencyId', TType.STRING, 22)
            oprot.writeString(self.sellCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.sellCurrencyId)
            oprot.writeFieldEnd()
        if self.sellCurrencyAmount is not None:
            oprot.writeFieldBegin('sellCurrencyAmount', TType.I32, 23)
            oprot.writeI32(self.sellCurrencyAmount)
            oprot.writeFieldEnd()
        if self.heroStatIds is not None:
            oprot.writeFieldBegin('heroStatIds', TType.LIST, 24)
            oprot.writeListBegin(TType.I32, len(self.heroStatIds))
            for iter679 in self.heroStatIds:
                oprot.writeI32(iter679)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroStatAmounts is not None:
            oprot.writeFieldBegin('heroStatAmounts', TType.LIST, 25)
            oprot.writeListBegin(TType.DOUBLE, len(self.heroStatAmounts))
            for iter680 in self.heroStatAmounts:
                oprot.writeDouble(iter680)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gearItemId is None:
            raise TProtocolException(message='Required field gearItemId is unset!')
        if self.rarityId is None:
            raise TProtocolException(message='Required field rarityId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EvolutionLevelProfile(object):
    """
    Attributes:
     - evolutionLevelProfileId
     - gearItemId0
     - gearItemId1
     - gearItemId2
     - gearItemId3
     - gearItemId4
     - gearItemId5
     - costCurrencyId
     - costCurrencyCount
     - gearItemIds
     - numGearSlots
     - valueCents

    """


    def __init__(self, evolutionLevelProfileId=None, gearItemId0=None, gearItemId1=None, gearItemId2=None, gearItemId3=None, gearItemId4=None, gearItemId5=None, costCurrencyId=None, costCurrencyCount=None, gearItemIds=None, numGearSlots=None, valueCents=None,):
        self.evolutionLevelProfileId = evolutionLevelProfileId
        self.gearItemId0 = gearItemId0
        self.gearItemId1 = gearItemId1
        self.gearItemId2 = gearItemId2
        self.gearItemId3 = gearItemId3
        self.gearItemId4 = gearItemId4
        self.gearItemId5 = gearItemId5
        self.costCurrencyId = costCurrencyId
        self.costCurrencyCount = costCurrencyCount
        self.gearItemIds = gearItemIds
        self.numGearSlots = numGearSlots
        self.valueCents = valueCents

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.evolutionLevelProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gearItemId0 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.gearItemId1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.gearItemId2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.gearItemId3 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.gearItemId4 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.gearItemId5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.costCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.costCurrencyCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.gearItemIds = []
                    (_etype684, _size681) = iprot.readListBegin()
                    for _i685 in range(_size681):
                        _elem686 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.gearItemIds.append(_elem686)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.numGearSlots = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.valueCents = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EvolutionLevelProfile')
        if self.evolutionLevelProfileId is not None:
            oprot.writeFieldBegin('evolutionLevelProfileId', TType.STRING, 1)
            oprot.writeString(self.evolutionLevelProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.evolutionLevelProfileId)
            oprot.writeFieldEnd()
        if self.gearItemId0 is not None:
            oprot.writeFieldBegin('gearItemId0', TType.STRING, 2)
            oprot.writeString(self.gearItemId0.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId0)
            oprot.writeFieldEnd()
        if self.gearItemId1 is not None:
            oprot.writeFieldBegin('gearItemId1', TType.STRING, 3)
            oprot.writeString(self.gearItemId1.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId1)
            oprot.writeFieldEnd()
        if self.gearItemId2 is not None:
            oprot.writeFieldBegin('gearItemId2', TType.STRING, 4)
            oprot.writeString(self.gearItemId2.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId2)
            oprot.writeFieldEnd()
        if self.gearItemId3 is not None:
            oprot.writeFieldBegin('gearItemId3', TType.STRING, 5)
            oprot.writeString(self.gearItemId3.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId3)
            oprot.writeFieldEnd()
        if self.gearItemId4 is not None:
            oprot.writeFieldBegin('gearItemId4', TType.STRING, 6)
            oprot.writeString(self.gearItemId4.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId4)
            oprot.writeFieldEnd()
        if self.gearItemId5 is not None:
            oprot.writeFieldBegin('gearItemId5', TType.STRING, 7)
            oprot.writeString(self.gearItemId5.encode('utf-8') if sys.version_info[0] == 2 else self.gearItemId5)
            oprot.writeFieldEnd()
        if self.costCurrencyId is not None:
            oprot.writeFieldBegin('costCurrencyId', TType.STRING, 8)
            oprot.writeString(self.costCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.costCurrencyId)
            oprot.writeFieldEnd()
        if self.costCurrencyCount is not None:
            oprot.writeFieldBegin('costCurrencyCount', TType.I32, 9)
            oprot.writeI32(self.costCurrencyCount)
            oprot.writeFieldEnd()
        if self.gearItemIds is not None:
            oprot.writeFieldBegin('gearItemIds', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.gearItemIds))
            for iter687 in self.gearItemIds:
                oprot.writeString(iter687.encode('utf-8') if sys.version_info[0] == 2 else iter687)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.numGearSlots is not None:
            oprot.writeFieldBegin('numGearSlots', TType.I32, 12)
            oprot.writeI32(self.numGearSlots)
            oprot.writeFieldEnd()
        if self.valueCents is not None:
            oprot.writeFieldBegin('valueCents', TType.I32, 13)
            oprot.writeI32(self.valueCents)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.evolutionLevelProfileId is None:
            raise TProtocolException(message='Required field evolutionLevelProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EvolutionProfile(object):
    """
    Attributes:
     - evolutionProfileId
     - evolutionLevelProfiles
     - baseEvolutionLevel

    """


    def __init__(self, evolutionProfileId=None, evolutionLevelProfiles=None, baseEvolutionLevel=None,):
        self.evolutionProfileId = evolutionProfileId
        self.evolutionLevelProfiles = evolutionLevelProfiles
        self.baseEvolutionLevel = baseEvolutionLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.evolutionProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.evolutionLevelProfiles = []
                    (_etype691, _size688) = iprot.readListBegin()
                    for _i692 in range(_size688):
                        _elem693 = EvolutionLevelProfile()
                        _elem693.read(iprot)
                        self.evolutionLevelProfiles.append(_elem693)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.baseEvolutionLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EvolutionProfile')
        if self.evolutionProfileId is not None:
            oprot.writeFieldBegin('evolutionProfileId', TType.STRING, 1)
            oprot.writeString(self.evolutionProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.evolutionProfileId)
            oprot.writeFieldEnd()
        if self.evolutionLevelProfiles is not None:
            oprot.writeFieldBegin('evolutionLevelProfiles', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.evolutionLevelProfiles))
            for iter694 in self.evolutionLevelProfiles:
                iter694.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.baseEvolutionLevel is not None:
            oprot.writeFieldBegin('baseEvolutionLevel', TType.I32, 10)
            oprot.writeI32(self.baseEvolutionLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.evolutionProfileId is None:
            raise TProtocolException(message='Required field evolutionProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EvolutionProfileLevelLink(object):
    """
    Attributes:
     - evolutionProfileId
     - evolutionLevelProfileId
     - evolutionLevelNum

    """


    def __init__(self, evolutionProfileId=None, evolutionLevelProfileId=None, evolutionLevelNum=None,):
        self.evolutionProfileId = evolutionProfileId
        self.evolutionLevelProfileId = evolutionLevelProfileId
        self.evolutionLevelNum = evolutionLevelNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.evolutionProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.evolutionLevelProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.evolutionLevelNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EvolutionProfileLevelLink')
        if self.evolutionProfileId is not None:
            oprot.writeFieldBegin('evolutionProfileId', TType.STRING, 1)
            oprot.writeString(self.evolutionProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.evolutionProfileId)
            oprot.writeFieldEnd()
        if self.evolutionLevelProfileId is not None:
            oprot.writeFieldBegin('evolutionLevelProfileId', TType.STRING, 2)
            oprot.writeString(self.evolutionLevelProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.evolutionLevelProfileId)
            oprot.writeFieldEnd()
        if self.evolutionLevelNum is not None:
            oprot.writeFieldBegin('evolutionLevelNum', TType.I32, 3)
            oprot.writeI32(self.evolutionLevelNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.evolutionProfileId is None:
            raise TProtocolException(message='Required field evolutionProfileId is unset!')
        if self.evolutionLevelProfileId is None:
            raise TProtocolException(message='Required field evolutionLevelProfileId is unset!')
        if self.evolutionLevelNum is None:
            raise TProtocolException(message='Required field evolutionLevelNum is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Menu(object):
    """
    Attributes:
     - menuId
     - prefabPath
     - backgroundImage
     - openSoundId
     - closeSoundId
     - hudProfileId

    """


    def __init__(self, menuId=None, prefabPath=None, backgroundImage=None, openSoundId=None, closeSoundId=None, hudProfileId=None,):
        self.menuId = menuId
        self.prefabPath = prefabPath
        self.backgroundImage = backgroundImage
        self.openSoundId = openSoundId
        self.closeSoundId = closeSoundId
        self.hudProfileId = hudProfileId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.menuId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.backgroundImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.openSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.closeSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.hudProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Menu')
        if self.menuId is not None:
            oprot.writeFieldBegin('menuId', TType.STRING, 1)
            oprot.writeString(self.menuId.encode('utf-8') if sys.version_info[0] == 2 else self.menuId)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 2)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.backgroundImage is not None:
            oprot.writeFieldBegin('backgroundImage', TType.STRING, 3)
            oprot.writeString(self.backgroundImage.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImage)
            oprot.writeFieldEnd()
        if self.openSoundId is not None:
            oprot.writeFieldBegin('openSoundId', TType.STRING, 4)
            oprot.writeString(self.openSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.openSoundId)
            oprot.writeFieldEnd()
        if self.closeSoundId is not None:
            oprot.writeFieldBegin('closeSoundId', TType.STRING, 5)
            oprot.writeString(self.closeSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.closeSoundId)
            oprot.writeFieldEnd()
        if self.hudProfileId is not None:
            oprot.writeFieldBegin('hudProfileId', TType.STRING, 6)
            oprot.writeString(self.hudProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.hudProfileId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.menuId is None:
            raise TProtocolException(message='Required field menuId is unset!')
        if self.prefabPath is None:
            raise TProtocolException(message='Required field prefabPath is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Prefab(object):
    """
    Attributes:
     - prefabId
     - prefabPath

    """


    def __init__(self, prefabId=None, prefabPath=None,):
        self.prefabId = prefabId
        self.prefabPath = prefabPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.prefabId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Prefab')
        if self.prefabId is not None:
            oprot.writeFieldBegin('prefabId', TType.STRING, 1)
            oprot.writeString(self.prefabId.encode('utf-8') if sys.version_info[0] == 2 else self.prefabId)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 2)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.prefabId is None:
            raise TProtocolException(message='Required field prefabId is unset!')
        if self.prefabPath is None:
            raise TProtocolException(message='Required field prefabPath is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Rarity(object):
    """
    Attributes:
     - rarityId
     - display
     - iconFramePath
     - heroMaxLevelByEvolutionLevel
     - gearIconFramePath
     - heroFusionXpBase
     - heroFusionXpEffectiveLevelMultiplier
     - itemValue
     - heroUpgradeGoldCosts
     - heroMaxEvolutionLevel

    """


    def __init__(self, rarityId=None, display=None, iconFramePath=None, heroMaxLevelByEvolutionLevel=None, gearIconFramePath=None, heroFusionXpBase=None, heroFusionXpEffectiveLevelMultiplier=None, itemValue=None, heroUpgradeGoldCosts=None, heroMaxEvolutionLevel=None,):
        self.rarityId = rarityId
        self.display = display
        self.iconFramePath = iconFramePath
        self.heroMaxLevelByEvolutionLevel = heroMaxLevelByEvolutionLevel
        self.gearIconFramePath = gearIconFramePath
        self.heroFusionXpBase = heroFusionXpBase
        self.heroFusionXpEffectiveLevelMultiplier = heroFusionXpEffectiveLevelMultiplier
        self.itemValue = itemValue
        self.heroUpgradeGoldCosts = heroUpgradeGoldCosts
        self.heroMaxEvolutionLevel = heroMaxEvolutionLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.rarityId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.iconFramePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.heroMaxLevelByEvolutionLevel = []
                    (_etype698, _size695) = iprot.readListBegin()
                    for _i699 in range(_size695):
                        _elem700 = iprot.readI32()
                        self.heroMaxLevelByEvolutionLevel.append(_elem700)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.gearIconFramePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.heroFusionXpBase = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.heroFusionXpEffectiveLevelMultiplier = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.itemValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.heroUpgradeGoldCosts = []
                    (_etype704, _size701) = iprot.readListBegin()
                    for _i705 in range(_size701):
                        _elem706 = iprot.readI32()
                        self.heroUpgradeGoldCosts.append(_elem706)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.heroMaxEvolutionLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Rarity')
        if self.rarityId is not None:
            oprot.writeFieldBegin('rarityId', TType.I32, 1)
            oprot.writeI32(self.rarityId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.iconFramePath is not None:
            oprot.writeFieldBegin('iconFramePath', TType.STRING, 3)
            oprot.writeString(self.iconFramePath.encode('utf-8') if sys.version_info[0] == 2 else self.iconFramePath)
            oprot.writeFieldEnd()
        if self.heroMaxLevelByEvolutionLevel is not None:
            oprot.writeFieldBegin('heroMaxLevelByEvolutionLevel', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.heroMaxLevelByEvolutionLevel))
            for iter707 in self.heroMaxLevelByEvolutionLevel:
                oprot.writeI32(iter707)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gearIconFramePath is not None:
            oprot.writeFieldBegin('gearIconFramePath', TType.STRING, 5)
            oprot.writeString(self.gearIconFramePath.encode('utf-8') if sys.version_info[0] == 2 else self.gearIconFramePath)
            oprot.writeFieldEnd()
        if self.heroFusionXpBase is not None:
            oprot.writeFieldBegin('heroFusionXpBase', TType.I32, 6)
            oprot.writeI32(self.heroFusionXpBase)
            oprot.writeFieldEnd()
        if self.heroFusionXpEffectiveLevelMultiplier is not None:
            oprot.writeFieldBegin('heroFusionXpEffectiveLevelMultiplier', TType.I32, 7)
            oprot.writeI32(self.heroFusionXpEffectiveLevelMultiplier)
            oprot.writeFieldEnd()
        if self.itemValue is not None:
            oprot.writeFieldBegin('itemValue', TType.I32, 8)
            oprot.writeI32(self.itemValue)
            oprot.writeFieldEnd()
        if self.heroUpgradeGoldCosts is not None:
            oprot.writeFieldBegin('heroUpgradeGoldCosts', TType.LIST, 9)
            oprot.writeListBegin(TType.I32, len(self.heroUpgradeGoldCosts))
            for iter708 in self.heroUpgradeGoldCosts:
                oprot.writeI32(iter708)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroMaxEvolutionLevel is not None:
            oprot.writeFieldBegin('heroMaxEvolutionLevel', TType.I32, 10)
            oprot.writeI32(self.heroMaxEvolutionLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.rarityId is None:
            raise TProtocolException(message='Required field rarityId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Achievement(object):
    """
    Attributes:
     - achievementId
     - eventCount
     - groupId
     - unlockAchievementId
     - isDaily
     - dailyChestNum
     - rankMin
     - rankMax
     - title
     - description
     - iconImage
     - rewardCurrencies
     - rewardCurrencyCounts
     - achievementEventIds
     - displayOrder
     - clientGroupId
     - goButtonTutorialId

    """


    def __init__(self, achievementId=None, eventCount=None, groupId=None, unlockAchievementId=None, isDaily=None, dailyChestNum=None, rankMin=None, rankMax=None, title=None, description=None, iconImage=None, rewardCurrencies=None, rewardCurrencyCounts=None, achievementEventIds=None, displayOrder=None, clientGroupId=None, goButtonTutorialId=None,):
        self.achievementId = achievementId
        self.eventCount = eventCount
        self.groupId = groupId
        self.unlockAchievementId = unlockAchievementId
        self.isDaily = isDaily
        self.dailyChestNum = dailyChestNum
        self.rankMin = rankMin
        self.rankMax = rankMax
        self.title = title
        self.description = description
        self.iconImage = iconImage
        self.rewardCurrencies = rewardCurrencies
        self.rewardCurrencyCounts = rewardCurrencyCounts
        self.achievementEventIds = achievementEventIds
        self.displayOrder = displayOrder
        self.clientGroupId = clientGroupId
        self.goButtonTutorialId = goButtonTutorialId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.achievementId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.eventCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.groupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.unlockAchievementId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isDaily = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.dailyChestNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rankMin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.rankMax = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.iconImage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.rewardCurrencies = []
                    (_etype712, _size709) = iprot.readListBegin()
                    for _i713 in range(_size709):
                        _elem714 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.rewardCurrencies.append(_elem714)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.rewardCurrencyCounts = []
                    (_etype718, _size715) = iprot.readListBegin()
                    for _i719 in range(_size715):
                        _elem720 = iprot.readI32()
                        self.rewardCurrencyCounts.append(_elem720)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.achievementEventIds = []
                    (_etype724, _size721) = iprot.readListBegin()
                    for _i725 in range(_size721):
                        _elem726 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.achievementEventIds.append(_elem726)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.displayOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.clientGroupId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.goButtonTutorialId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Achievement')
        if self.achievementId is not None:
            oprot.writeFieldBegin('achievementId', TType.STRING, 1)
            oprot.writeString(self.achievementId.encode('utf-8') if sys.version_info[0] == 2 else self.achievementId)
            oprot.writeFieldEnd()
        if self.eventCount is not None:
            oprot.writeFieldBegin('eventCount', TType.I32, 3)
            oprot.writeI32(self.eventCount)
            oprot.writeFieldEnd()
        if self.groupId is not None:
            oprot.writeFieldBegin('groupId', TType.STRING, 4)
            oprot.writeString(self.groupId.encode('utf-8') if sys.version_info[0] == 2 else self.groupId)
            oprot.writeFieldEnd()
        if self.unlockAchievementId is not None:
            oprot.writeFieldBegin('unlockAchievementId', TType.STRING, 5)
            oprot.writeString(self.unlockAchievementId.encode('utf-8') if sys.version_info[0] == 2 else self.unlockAchievementId)
            oprot.writeFieldEnd()
        if self.isDaily is not None:
            oprot.writeFieldBegin('isDaily', TType.BOOL, 6)
            oprot.writeBool(self.isDaily)
            oprot.writeFieldEnd()
        if self.dailyChestNum is not None:
            oprot.writeFieldBegin('dailyChestNum', TType.I32, 7)
            oprot.writeI32(self.dailyChestNum)
            oprot.writeFieldEnd()
        if self.rankMin is not None:
            oprot.writeFieldBegin('rankMin', TType.I32, 8)
            oprot.writeI32(self.rankMin)
            oprot.writeFieldEnd()
        if self.rankMax is not None:
            oprot.writeFieldBegin('rankMax', TType.I32, 9)
            oprot.writeI32(self.rankMax)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 10)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 11)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.iconImage is not None:
            oprot.writeFieldBegin('iconImage', TType.STRING, 12)
            oprot.writeString(self.iconImage.encode('utf-8') if sys.version_info[0] == 2 else self.iconImage)
            oprot.writeFieldEnd()
        if self.rewardCurrencies is not None:
            oprot.writeFieldBegin('rewardCurrencies', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.rewardCurrencies))
            for iter727 in self.rewardCurrencies:
                oprot.writeString(iter727.encode('utf-8') if sys.version_info[0] == 2 else iter727)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rewardCurrencyCounts is not None:
            oprot.writeFieldBegin('rewardCurrencyCounts', TType.LIST, 14)
            oprot.writeListBegin(TType.I32, len(self.rewardCurrencyCounts))
            for iter728 in self.rewardCurrencyCounts:
                oprot.writeI32(iter728)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.achievementEventIds is not None:
            oprot.writeFieldBegin('achievementEventIds', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.achievementEventIds))
            for iter729 in self.achievementEventIds:
                oprot.writeString(iter729.encode('utf-8') if sys.version_info[0] == 2 else iter729)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.displayOrder is not None:
            oprot.writeFieldBegin('displayOrder', TType.I32, 16)
            oprot.writeI32(self.displayOrder)
            oprot.writeFieldEnd()
        if self.clientGroupId is not None:
            oprot.writeFieldBegin('clientGroupId', TType.STRING, 17)
            oprot.writeString(self.clientGroupId.encode('utf-8') if sys.version_info[0] == 2 else self.clientGroupId)
            oprot.writeFieldEnd()
        if self.goButtonTutorialId is not None:
            oprot.writeFieldBegin('goButtonTutorialId', TType.STRING, 23)
            oprot.writeString(self.goButtonTutorialId.encode('utf-8') if sys.version_info[0] == 2 else self.goButtonTutorialId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.achievementId is None:
            raise TProtocolException(message='Required field achievementId is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PurchaseBonus(object):
    """
    Attributes:
     - purchaseBonusNumPurchases
     - inboxMessageId
     - rewardCurrencyIds
     - rewardCurrencyCounts

    """


    def __init__(self, purchaseBonusNumPurchases=None, inboxMessageId=None, rewardCurrencyIds=None, rewardCurrencyCounts=None,):
        self.purchaseBonusNumPurchases = purchaseBonusNumPurchases
        self.inboxMessageId = inboxMessageId
        self.rewardCurrencyIds = rewardCurrencyIds
        self.rewardCurrencyCounts = rewardCurrencyCounts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.purchaseBonusNumPurchases = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.inboxMessageId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.rewardCurrencyIds = []
                    (_etype733, _size730) = iprot.readListBegin()
                    for _i734 in range(_size730):
                        _elem735 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.rewardCurrencyIds.append(_elem735)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.rewardCurrencyCounts = []
                    (_etype739, _size736) = iprot.readListBegin()
                    for _i740 in range(_size736):
                        _elem741 = iprot.readI32()
                        self.rewardCurrencyCounts.append(_elem741)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PurchaseBonus')
        if self.purchaseBonusNumPurchases is not None:
            oprot.writeFieldBegin('purchaseBonusNumPurchases', TType.I32, 1)
            oprot.writeI32(self.purchaseBonusNumPurchases)
            oprot.writeFieldEnd()
        if self.inboxMessageId is not None:
            oprot.writeFieldBegin('inboxMessageId', TType.STRING, 3)
            oprot.writeString(self.inboxMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.inboxMessageId)
            oprot.writeFieldEnd()
        if self.rewardCurrencyIds is not None:
            oprot.writeFieldBegin('rewardCurrencyIds', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.rewardCurrencyIds))
            for iter742 in self.rewardCurrencyIds:
                oprot.writeString(iter742.encode('utf-8') if sys.version_info[0] == 2 else iter742)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rewardCurrencyCounts is not None:
            oprot.writeFieldBegin('rewardCurrencyCounts', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.rewardCurrencyCounts))
            for iter743 in self.rewardCurrencyCounts:
                oprot.writeI32(iter743)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.purchaseBonusNumPurchases is None:
            raise TProtocolException(message='Required field purchaseBonusNumPurchases is unset!')
        if self.inboxMessageId is None:
            raise TProtocolException(message='Required field inboxMessageId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PushNotification(object):
    """
    Attributes:
     - pushNotificationId
     - message

    """


    def __init__(self, pushNotificationId=None, message=None,):
        self.pushNotificationId = pushNotificationId
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pushNotificationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PushNotification')
        if self.pushNotificationId is not None:
            oprot.writeFieldBegin('pushNotificationId', TType.STRING, 1)
            oprot.writeString(self.pushNotificationId.encode('utf-8') if sys.version_info[0] == 2 else self.pushNotificationId)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.pushNotificationId is None:
            raise TProtocolException(message='Required field pushNotificationId is unset!')
        if self.message is None:
            raise TProtocolException(message='Required field message is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AndroidNotificationChannel(object):
    """
    Attributes:
     - channelId
     - name
     - description
     - importance
     - canBypassDnd
     - canShowBadge
     - enabled
     - enableLights
     - enableVibration
     - lockScreenVisibility
     - vibrationPattern

    """


    def __init__(self, channelId=None, name=None, description=None, importance=None, canBypassDnd=None, canShowBadge=None, enabled=None, enableLights=None, enableVibration=None, lockScreenVisibility=None, vibrationPattern=None,):
        self.channelId = channelId
        self.name = name
        self.description = description
        self.importance = importance
        self.canBypassDnd = canBypassDnd
        self.canShowBadge = canShowBadge
        self.enabled = enabled
        self.enableLights = enableLights
        self.enableVibration = enableVibration
        self.lockScreenVisibility = lockScreenVisibility
        self.vibrationPattern = vibrationPattern

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.importance = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.canBypassDnd = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.canShowBadge = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.enabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.enableLights = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.enableVibration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.lockScreenVisibility = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.vibrationPattern = []
                    (_etype747, _size744) = iprot.readListBegin()
                    for _i748 in range(_size744):
                        _elem749 = iprot.readI64()
                        self.vibrationPattern.append(_elem749)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AndroidNotificationChannel')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.importance is not None:
            oprot.writeFieldBegin('importance', TType.I32, 4)
            oprot.writeI32(self.importance)
            oprot.writeFieldEnd()
        if self.canBypassDnd is not None:
            oprot.writeFieldBegin('canBypassDnd', TType.BOOL, 5)
            oprot.writeBool(self.canBypassDnd)
            oprot.writeFieldEnd()
        if self.canShowBadge is not None:
            oprot.writeFieldBegin('canShowBadge', TType.BOOL, 6)
            oprot.writeBool(self.canShowBadge)
            oprot.writeFieldEnd()
        if self.enabled is not None:
            oprot.writeFieldBegin('enabled', TType.BOOL, 7)
            oprot.writeBool(self.enabled)
            oprot.writeFieldEnd()
        if self.enableLights is not None:
            oprot.writeFieldBegin('enableLights', TType.BOOL, 8)
            oprot.writeBool(self.enableLights)
            oprot.writeFieldEnd()
        if self.enableVibration is not None:
            oprot.writeFieldBegin('enableVibration', TType.BOOL, 9)
            oprot.writeBool(self.enableVibration)
            oprot.writeFieldEnd()
        if self.lockScreenVisibility is not None:
            oprot.writeFieldBegin('lockScreenVisibility', TType.I32, 10)
            oprot.writeI32(self.lockScreenVisibility)
            oprot.writeFieldEnd()
        if self.vibrationPattern is not None:
            oprot.writeFieldBegin('vibrationPattern', TType.LIST, 11)
            oprot.writeListBegin(TType.I64, len(self.vibrationPattern))
            for iter750 in self.vibrationPattern:
                oprot.writeI64(iter750)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.channelId is None:
            raise TProtocolException(message='Required field channelId is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        if self.importance is None:
            raise TProtocolException(message='Required field importance is unset!')
        if self.canBypassDnd is None:
            raise TProtocolException(message='Required field canBypassDnd is unset!')
        if self.canShowBadge is None:
            raise TProtocolException(message='Required field canShowBadge is unset!')
        if self.enabled is None:
            raise TProtocolException(message='Required field enabled is unset!')
        if self.enableLights is None:
            raise TProtocolException(message='Required field enableLights is unset!')
        if self.enableVibration is None:
            raise TProtocolException(message='Required field enableVibration is unset!')
        if self.lockScreenVisibility is None:
            raise TProtocolException(message='Required field lockScreenVisibility is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IosNotificationThread(object):
    """
    Attributes:
     - threadId

    """


    def __init__(self, threadId=None,):
        self.threadId = threadId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.threadId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IosNotificationThread')
        if self.threadId is not None:
            oprot.writeFieldBegin('threadId', TType.STRING, 1)
            oprot.writeString(self.threadId.encode('utf-8') if sys.version_info[0] == 2 else self.threadId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.threadId is None:
            raise TProtocolException(message='Required field threadId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LocalNotification(object):
    """
    Attributes:
     - localNotificationId
     - androidChannelId
     - iosThreadId
     - title
     - text
     - cooldownSeconds
     - iosPresentationOption
     - iosShowInForeground
     - iosSubtitle

    """


    def __init__(self, localNotificationId=None, androidChannelId=None, iosThreadId=None, title=None, text=None, cooldownSeconds=None, iosPresentationOption=None, iosShowInForeground=None, iosSubtitle=None,):
        self.localNotificationId = localNotificationId
        self.androidChannelId = androidChannelId
        self.iosThreadId = iosThreadId
        self.title = title
        self.text = text
        self.cooldownSeconds = cooldownSeconds
        self.iosPresentationOption = iosPresentationOption
        self.iosShowInForeground = iosShowInForeground
        self.iosSubtitle = iosSubtitle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.localNotificationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.androidChannelId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.iosThreadId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.cooldownSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.iosPresentationOption = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.iosShowInForeground = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.iosSubtitle = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LocalNotification')
        if self.localNotificationId is not None:
            oprot.writeFieldBegin('localNotificationId', TType.STRING, 1)
            oprot.writeString(self.localNotificationId.encode('utf-8') if sys.version_info[0] == 2 else self.localNotificationId)
            oprot.writeFieldEnd()
        if self.androidChannelId is not None:
            oprot.writeFieldBegin('androidChannelId', TType.STRING, 2)
            oprot.writeString(self.androidChannelId.encode('utf-8') if sys.version_info[0] == 2 else self.androidChannelId)
            oprot.writeFieldEnd()
        if self.iosThreadId is not None:
            oprot.writeFieldBegin('iosThreadId', TType.STRING, 3)
            oprot.writeString(self.iosThreadId.encode('utf-8') if sys.version_info[0] == 2 else self.iosThreadId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 4)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 5)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.cooldownSeconds is not None:
            oprot.writeFieldBegin('cooldownSeconds', TType.I32, 6)
            oprot.writeI32(self.cooldownSeconds)
            oprot.writeFieldEnd()
        if self.iosPresentationOption is not None:
            oprot.writeFieldBegin('iosPresentationOption', TType.I32, 7)
            oprot.writeI32(self.iosPresentationOption)
            oprot.writeFieldEnd()
        if self.iosShowInForeground is not None:
            oprot.writeFieldBegin('iosShowInForeground', TType.BOOL, 8)
            oprot.writeBool(self.iosShowInForeground)
            oprot.writeFieldEnd()
        if self.iosSubtitle is not None:
            oprot.writeFieldBegin('iosSubtitle', TType.STRING, 9)
            oprot.writeString(self.iosSubtitle.encode('utf-8') if sys.version_info[0] == 2 else self.iosSubtitle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.localNotificationId is None:
            raise TProtocolException(message='Required field localNotificationId is unset!')
        if self.androidChannelId is None:
            raise TProtocolException(message='Required field androidChannelId is unset!')
        if self.iosThreadId is None:
            raise TProtocolException(message='Required field iosThreadId is unset!')
        if self.title is None:
            raise TProtocolException(message='Required field title is unset!')
        if self.text is None:
            raise TProtocolException(message='Required field text is unset!')
        if self.cooldownSeconds is None:
            raise TProtocolException(message='Required field cooldownSeconds is unset!')
        if self.iosPresentationOption is None:
            raise TProtocolException(message='Required field iosPresentationOption is unset!')
        if self.iosShowInForeground is None:
            raise TProtocolException(message='Required field iosShowInForeground is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainingCamp(object):
    """
    Attributes:
     - trainingCampId
     - unlockRankId
     - unlockVipLevelId
     - evolutionProfileId
     - unlockGenericDialogId
     - upgradeCellPrefab

    """


    def __init__(self, trainingCampId=None, unlockRankId=None, unlockVipLevelId=None, evolutionProfileId=None, unlockGenericDialogId=None, upgradeCellPrefab=None,):
        self.trainingCampId = trainingCampId
        self.unlockRankId = unlockRankId
        self.unlockVipLevelId = unlockVipLevelId
        self.evolutionProfileId = evolutionProfileId
        self.unlockGenericDialogId = unlockGenericDialogId
        self.upgradeCellPrefab = upgradeCellPrefab

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.trainingCampId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.unlockRankId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unlockVipLevelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.evolutionProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.unlockGenericDialogId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.upgradeCellPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainingCamp')
        if self.trainingCampId is not None:
            oprot.writeFieldBegin('trainingCampId', TType.I32, 1)
            oprot.writeI32(self.trainingCampId)
            oprot.writeFieldEnd()
        if self.unlockRankId is not None:
            oprot.writeFieldBegin('unlockRankId', TType.I32, 2)
            oprot.writeI32(self.unlockRankId)
            oprot.writeFieldEnd()
        if self.unlockVipLevelId is not None:
            oprot.writeFieldBegin('unlockVipLevelId', TType.I32, 3)
            oprot.writeI32(self.unlockVipLevelId)
            oprot.writeFieldEnd()
        if self.evolutionProfileId is not None:
            oprot.writeFieldBegin('evolutionProfileId', TType.STRING, 4)
            oprot.writeString(self.evolutionProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.evolutionProfileId)
            oprot.writeFieldEnd()
        if self.unlockGenericDialogId is not None:
            oprot.writeFieldBegin('unlockGenericDialogId', TType.STRING, 5)
            oprot.writeString(self.unlockGenericDialogId.encode('utf-8') if sys.version_info[0] == 2 else self.unlockGenericDialogId)
            oprot.writeFieldEnd()
        if self.upgradeCellPrefab is not None:
            oprot.writeFieldBegin('upgradeCellPrefab', TType.STRING, 6)
            oprot.writeString(self.upgradeCellPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.upgradeCellPrefab)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.trainingCampId is None:
            raise TProtocolException(message='Required field trainingCampId is unset!')
        if self.evolutionProfileId is None:
            raise TProtocolException(message='Required field evolutionProfileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainingMethod(object):
    """
    Attributes:
     - trainingMethodId
     - display
     - description
     - icon
     - freeRushTokenCurrencyId
     - cellPrefab
     - assetListId
     - trainingDurationMinutes
     - costRecruits
     - costCurrencyId
     - costCurrencyCount
     - costResourceIds
     - costResourceCounts
     - rushCostGems
     - rarities
     - rarityDistributions
     - affinities
     - heroDisplayId

    """


    def __init__(self, trainingMethodId=None, display=None, description=None, icon=None, freeRushTokenCurrencyId=None, cellPrefab=None, assetListId=None, trainingDurationMinutes=None, costRecruits=None, costCurrencyId=None, costCurrencyCount=None, costResourceIds=None, costResourceCounts=None, rushCostGems=None, rarities=None, rarityDistributions=None, affinities=None, heroDisplayId=None,):
        self.trainingMethodId = trainingMethodId
        self.display = display
        self.description = description
        self.icon = icon
        self.freeRushTokenCurrencyId = freeRushTokenCurrencyId
        self.cellPrefab = cellPrefab
        self.assetListId = assetListId
        self.trainingDurationMinutes = trainingDurationMinutes
        self.costRecruits = costRecruits
        self.costCurrencyId = costCurrencyId
        self.costCurrencyCount = costCurrencyCount
        self.costResourceIds = costResourceIds
        self.costResourceCounts = costResourceCounts
        self.rushCostGems = rushCostGems
        self.rarities = rarities
        self.rarityDistributions = rarityDistributions
        self.affinities = affinities
        self.heroDisplayId = heroDisplayId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.trainingMethodId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.freeRushTokenCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cellPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.assetListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.trainingDurationMinutes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.costRecruits = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.costCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.costCurrencyCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.costResourceIds = []
                    (_etype754, _size751) = iprot.readListBegin()
                    for _i755 in range(_size751):
                        _elem756 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.costResourceIds.append(_elem756)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.costResourceCounts = []
                    (_etype760, _size757) = iprot.readListBegin()
                    for _i761 in range(_size757):
                        _elem762 = iprot.readI32()
                        self.costResourceCounts.append(_elem762)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.rushCostGems = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.LIST:
                    self.rarities = []
                    (_etype766, _size763) = iprot.readListBegin()
                    for _i767 in range(_size763):
                        _elem768 = iprot.readI32()
                        self.rarities.append(_elem768)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.LIST:
                    self.rarityDistributions = []
                    (_etype772, _size769) = iprot.readListBegin()
                    for _i773 in range(_size769):
                        _elem774 = iprot.readI32()
                        self.rarityDistributions.append(_elem774)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.LIST:
                    self.affinities = []
                    (_etype778, _size775) = iprot.readListBegin()
                    for _i779 in range(_size775):
                        _elem780 = iprot.readI32()
                        self.affinities.append(_elem780)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.heroDisplayId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainingMethod')
        if self.trainingMethodId is not None:
            oprot.writeFieldBegin('trainingMethodId', TType.STRING, 1)
            oprot.writeString(self.trainingMethodId.encode('utf-8') if sys.version_info[0] == 2 else self.trainingMethodId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 4)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.freeRushTokenCurrencyId is not None:
            oprot.writeFieldBegin('freeRushTokenCurrencyId', TType.STRING, 5)
            oprot.writeString(self.freeRushTokenCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.freeRushTokenCurrencyId)
            oprot.writeFieldEnd()
        if self.cellPrefab is not None:
            oprot.writeFieldBegin('cellPrefab', TType.STRING, 6)
            oprot.writeString(self.cellPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.cellPrefab)
            oprot.writeFieldEnd()
        if self.assetListId is not None:
            oprot.writeFieldBegin('assetListId', TType.STRING, 7)
            oprot.writeString(self.assetListId.encode('utf-8') if sys.version_info[0] == 2 else self.assetListId)
            oprot.writeFieldEnd()
        if self.trainingDurationMinutes is not None:
            oprot.writeFieldBegin('trainingDurationMinutes', TType.I32, 10)
            oprot.writeI32(self.trainingDurationMinutes)
            oprot.writeFieldEnd()
        if self.costRecruits is not None:
            oprot.writeFieldBegin('costRecruits', TType.I32, 11)
            oprot.writeI32(self.costRecruits)
            oprot.writeFieldEnd()
        if self.costCurrencyId is not None:
            oprot.writeFieldBegin('costCurrencyId', TType.STRING, 12)
            oprot.writeString(self.costCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.costCurrencyId)
            oprot.writeFieldEnd()
        if self.costCurrencyCount is not None:
            oprot.writeFieldBegin('costCurrencyCount', TType.I32, 13)
            oprot.writeI32(self.costCurrencyCount)
            oprot.writeFieldEnd()
        if self.costResourceIds is not None:
            oprot.writeFieldBegin('costResourceIds', TType.LIST, 14)
            oprot.writeListBegin(TType.STRING, len(self.costResourceIds))
            for iter781 in self.costResourceIds:
                oprot.writeString(iter781.encode('utf-8') if sys.version_info[0] == 2 else iter781)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.costResourceCounts is not None:
            oprot.writeFieldBegin('costResourceCounts', TType.LIST, 15)
            oprot.writeListBegin(TType.I32, len(self.costResourceCounts))
            for iter782 in self.costResourceCounts:
                oprot.writeI32(iter782)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rushCostGems is not None:
            oprot.writeFieldBegin('rushCostGems', TType.I32, 16)
            oprot.writeI32(self.rushCostGems)
            oprot.writeFieldEnd()
        if self.rarities is not None:
            oprot.writeFieldBegin('rarities', TType.LIST, 30)
            oprot.writeListBegin(TType.I32, len(self.rarities))
            for iter783 in self.rarities:
                oprot.writeI32(iter783)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rarityDistributions is not None:
            oprot.writeFieldBegin('rarityDistributions', TType.LIST, 31)
            oprot.writeListBegin(TType.I32, len(self.rarityDistributions))
            for iter784 in self.rarityDistributions:
                oprot.writeI32(iter784)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.affinities is not None:
            oprot.writeFieldBegin('affinities', TType.LIST, 32)
            oprot.writeListBegin(TType.I32, len(self.affinities))
            for iter785 in self.affinities:
                oprot.writeI32(iter785)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroDisplayId is not None:
            oprot.writeFieldBegin('heroDisplayId', TType.STRING, 33)
            oprot.writeString(self.heroDisplayId.encode('utf-8') if sys.version_info[0] == 2 else self.heroDisplayId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.trainingMethodId is None:
            raise TProtocolException(message='Required field trainingMethodId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        if self.trainingDurationMinutes is None:
            raise TProtocolException(message='Required field trainingDurationMinutes is unset!')
        if self.costRecruits is None:
            raise TProtocolException(message='Required field costRecruits is unset!')
        if self.rushCostGems is None:
            raise TProtocolException(message='Required field rushCostGems is unset!')
        if self.rarities is None:
            raise TProtocolException(message='Required field rarities is unset!')
        if self.rarityDistributions is None:
            raise TProtocolException(message='Required field rarityDistributions is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainingMethodLink(object):
    """
    Attributes:
     - trainingMethodId
     - trainingCampId
     - unlockTrainingCampLevel

    """


    def __init__(self, trainingMethodId=None, trainingCampId=None, unlockTrainingCampLevel=None,):
        self.trainingMethodId = trainingMethodId
        self.trainingCampId = trainingCampId
        self.unlockTrainingCampLevel = unlockTrainingCampLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.trainingMethodId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.trainingCampId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.unlockTrainingCampLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainingMethodLink')
        if self.trainingMethodId is not None:
            oprot.writeFieldBegin('trainingMethodId', TType.STRING, 1)
            oprot.writeString(self.trainingMethodId.encode('utf-8') if sys.version_info[0] == 2 else self.trainingMethodId)
            oprot.writeFieldEnd()
        if self.trainingCampId is not None:
            oprot.writeFieldBegin('trainingCampId', TType.I32, 2)
            oprot.writeI32(self.trainingCampId)
            oprot.writeFieldEnd()
        if self.unlockTrainingCampLevel is not None:
            oprot.writeFieldBegin('unlockTrainingCampLevel', TType.I32, 3)
            oprot.writeI32(self.unlockTrainingCampLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.trainingMethodId is None:
            raise TProtocolException(message='Required field trainingMethodId is unset!')
        if self.trainingCampId is None:
            raise TProtocolException(message='Required field trainingCampId is unset!')
        if self.unlockTrainingCampLevel is None:
            raise TProtocolException(message='Required field unlockTrainingCampLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MinigameMusicTheme(object):
    """
    Attributes:
     - minigameMusicThemeId
     - path
     - numLevels

    """


    def __init__(self, minigameMusicThemeId=None, path=None, numLevels=None,):
        self.minigameMusicThemeId = minigameMusicThemeId
        self.path = path
        self.numLevels = numLevels

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.minigameMusicThemeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.numLevels = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MinigameMusicTheme')
        if self.minigameMusicThemeId is not None:
            oprot.writeFieldBegin('minigameMusicThemeId', TType.STRING, 1)
            oprot.writeString(self.minigameMusicThemeId.encode('utf-8') if sys.version_info[0] == 2 else self.minigameMusicThemeId)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 3)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.numLevels is not None:
            oprot.writeFieldBegin('numLevels', TType.I32, 10)
            oprot.writeI32(self.numLevels)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.minigameMusicThemeId is None:
            raise TProtocolException(message='Required field minigameMusicThemeId is unset!')
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Badge(object):
    """
    Attributes:
     - badgeId

    """


    def __init__(self, badgeId=None,):
        self.badgeId = badgeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.badgeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Badge')
        if self.badgeId is not None:
            oprot.writeFieldBegin('badgeId', TType.STRING, 1)
            oprot.writeString(self.badgeId.encode('utf-8') if sys.version_info[0] == 2 else self.badgeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.badgeId is None:
            raise TProtocolException(message='Required field badgeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RaidLeague(object):
    """
    Attributes:
     - raidLeagueId
     - display
     - numTrophiesPromote
     - numTrophiesDemote
     - raidCostCurrencyId
     - raidCostCurrencyCount
     - rerollCostCurrencyId
     - rerollCostCurrencyCount
     - titleImagePath
     - backgroundImagePath

    """


    def __init__(self, raidLeagueId=None, display=None, numTrophiesPromote=None, numTrophiesDemote=None, raidCostCurrencyId=None, raidCostCurrencyCount=None, rerollCostCurrencyId=None, rerollCostCurrencyCount=None, titleImagePath=None, backgroundImagePath=None,):
        self.raidLeagueId = raidLeagueId
        self.display = display
        self.numTrophiesPromote = numTrophiesPromote
        self.numTrophiesDemote = numTrophiesDemote
        self.raidCostCurrencyId = raidCostCurrencyId
        self.raidCostCurrencyCount = raidCostCurrencyCount
        self.rerollCostCurrencyId = rerollCostCurrencyId
        self.rerollCostCurrencyCount = rerollCostCurrencyCount
        self.titleImagePath = titleImagePath
        self.backgroundImagePath = backgroundImagePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.raidLeagueId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numTrophiesPromote = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.numTrophiesDemote = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.raidCostCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.raidCostCurrencyCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.rerollCostCurrencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rerollCostCurrencyCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.titleImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.backgroundImagePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RaidLeague')
        if self.raidLeagueId is not None:
            oprot.writeFieldBegin('raidLeagueId', TType.I32, 1)
            oprot.writeI32(self.raidLeagueId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 2)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.numTrophiesPromote is not None:
            oprot.writeFieldBegin('numTrophiesPromote', TType.I32, 3)
            oprot.writeI32(self.numTrophiesPromote)
            oprot.writeFieldEnd()
        if self.numTrophiesDemote is not None:
            oprot.writeFieldBegin('numTrophiesDemote', TType.I32, 4)
            oprot.writeI32(self.numTrophiesDemote)
            oprot.writeFieldEnd()
        if self.raidCostCurrencyId is not None:
            oprot.writeFieldBegin('raidCostCurrencyId', TType.STRING, 5)
            oprot.writeString(self.raidCostCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.raidCostCurrencyId)
            oprot.writeFieldEnd()
        if self.raidCostCurrencyCount is not None:
            oprot.writeFieldBegin('raidCostCurrencyCount', TType.I32, 6)
            oprot.writeI32(self.raidCostCurrencyCount)
            oprot.writeFieldEnd()
        if self.rerollCostCurrencyId is not None:
            oprot.writeFieldBegin('rerollCostCurrencyId', TType.STRING, 7)
            oprot.writeString(self.rerollCostCurrencyId.encode('utf-8') if sys.version_info[0] == 2 else self.rerollCostCurrencyId)
            oprot.writeFieldEnd()
        if self.rerollCostCurrencyCount is not None:
            oprot.writeFieldBegin('rerollCostCurrencyCount', TType.I32, 8)
            oprot.writeI32(self.rerollCostCurrencyCount)
            oprot.writeFieldEnd()
        if self.titleImagePath is not None:
            oprot.writeFieldBegin('titleImagePath', TType.STRING, 9)
            oprot.writeString(self.titleImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.titleImagePath)
            oprot.writeFieldEnd()
        if self.backgroundImagePath is not None:
            oprot.writeFieldBegin('backgroundImagePath', TType.STRING, 10)
            oprot.writeString(self.backgroundImagePath.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundImagePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.raidLeagueId is None:
            raise TProtocolException(message='Required field raidLeagueId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.numTrophiesPromote is None:
            raise TProtocolException(message='Required field numTrophiesPromote is unset!')
        if self.numTrophiesDemote is None:
            raise TProtocolException(message='Required field numTrophiesDemote is unset!')
        if self.raidCostCurrencyId is None:
            raise TProtocolException(message='Required field raidCostCurrencyId is unset!')
        if self.raidCostCurrencyCount is None:
            raise TProtocolException(message='Required field raidCostCurrencyCount is unset!')
        if self.rerollCostCurrencyId is None:
            raise TProtocolException(message='Required field rerollCostCurrencyId is unset!')
        if self.rerollCostCurrencyCount is None:
            raise TProtocolException(message='Required field rerollCostCurrencyCount is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DailyHintItem(object):
    """
    Attributes:
     - text

    """


    def __init__(self, text=None,):
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DailyHintItem')
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 1)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.text is None:
            raise TProtocolException(message='Required field text is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BeamAttack(object):
    """
    Attributes:
     - attackId
     - projectileId

    """


    def __init__(self, attackId=None, projectileId=None,):
        self.attackId = attackId
        self.projectileId = projectileId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.attackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BeamAttack')
        if self.attackId is not None:
            oprot.writeFieldBegin('attackId', TType.STRING, 1)
            oprot.writeString(self.attackId.encode('utf-8') if sys.version_info[0] == 2 else self.attackId)
            oprot.writeFieldEnd()
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 2)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.attackId is None:
            raise TProtocolException(message='Required field attackId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Attack(object):
    """
    Attributes:
     - attackId
     - attackLaunchTypeId
     - durationSeconds
     - launchEffectPrefab
     - launchSoundClipId
     - description
     - prefabPath
     - isPositive
     - affinityMatchId
     - genderMatchId
     - attackParentId
     - targetTypeId

    """


    def __init__(self, attackId=None, attackLaunchTypeId=None, durationSeconds=None, launchEffectPrefab=None, launchSoundClipId=None, description=None, prefabPath=None, isPositive=None, affinityMatchId=None, genderMatchId=None, attackParentId=None, targetTypeId=None,):
        self.attackId = attackId
        self.attackLaunchTypeId = attackLaunchTypeId
        self.durationSeconds = durationSeconds
        self.launchEffectPrefab = launchEffectPrefab
        self.launchSoundClipId = launchSoundClipId
        self.description = description
        self.prefabPath = prefabPath
        self.isPositive = isPositive
        self.affinityMatchId = affinityMatchId
        self.genderMatchId = genderMatchId
        self.attackParentId = attackParentId
        self.targetTypeId = targetTypeId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.attackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attackLaunchTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.durationSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.launchEffectPrefab = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.launchSoundClipId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.isPositive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.affinityMatchId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.genderMatchId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.attackParentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.targetTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Attack')
        if self.attackId is not None:
            oprot.writeFieldBegin('attackId', TType.STRING, 1)
            oprot.writeString(self.attackId.encode('utf-8') if sys.version_info[0] == 2 else self.attackId)
            oprot.writeFieldEnd()
        if self.attackLaunchTypeId is not None:
            oprot.writeFieldBegin('attackLaunchTypeId', TType.I32, 2)
            oprot.writeI32(self.attackLaunchTypeId)
            oprot.writeFieldEnd()
        if self.durationSeconds is not None:
            oprot.writeFieldBegin('durationSeconds', TType.DOUBLE, 3)
            oprot.writeDouble(self.durationSeconds)
            oprot.writeFieldEnd()
        if self.launchEffectPrefab is not None:
            oprot.writeFieldBegin('launchEffectPrefab', TType.STRING, 5)
            oprot.writeString(self.launchEffectPrefab.encode('utf-8') if sys.version_info[0] == 2 else self.launchEffectPrefab)
            oprot.writeFieldEnd()
        if self.launchSoundClipId is not None:
            oprot.writeFieldBegin('launchSoundClipId', TType.STRING, 6)
            oprot.writeString(self.launchSoundClipId.encode('utf-8') if sys.version_info[0] == 2 else self.launchSoundClipId)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 7)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 8)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.isPositive is not None:
            oprot.writeFieldBegin('isPositive', TType.BOOL, 13)
            oprot.writeBool(self.isPositive)
            oprot.writeFieldEnd()
        if self.affinityMatchId is not None:
            oprot.writeFieldBegin('affinityMatchId', TType.I32, 14)
            oprot.writeI32(self.affinityMatchId)
            oprot.writeFieldEnd()
        if self.genderMatchId is not None:
            oprot.writeFieldBegin('genderMatchId', TType.I32, 15)
            oprot.writeI32(self.genderMatchId)
            oprot.writeFieldEnd()
        if self.attackParentId is not None:
            oprot.writeFieldBegin('attackParentId', TType.I32, 16)
            oprot.writeI32(self.attackParentId)
            oprot.writeFieldEnd()
        if self.targetTypeId is not None:
            oprot.writeFieldBegin('targetTypeId', TType.I32, 17)
            oprot.writeI32(self.targetTypeId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.attackId is None:
            raise TProtocolException(message='Required field attackId is unset!')
        if self.attackLaunchTypeId is None:
            raise TProtocolException(message='Required field attackLaunchTypeId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Projectile(object):
    """
    Attributes:
     - projectileId
     - speed
     - polarVelocityDps
     - prefabPath
     - lifespanTypeId
     - skillStatProfileId
     - projectileTrailId
     - targetTypeId
     - aimTypeId
     - motionTypeId
     - lifespan
     - durationSeconds
     - wallBehaviorId
     - wallEffectPrefabPath
     - orientationTypeId
     - projectileParentId
     - targetFxListId
     - motionEaseId
     - damageSoundId
     - collisionSoundId
     - collisionFxListId
     - bodyFxListId
     - launchSoundId

    """


    def __init__(self, projectileId=None, speed=None, polarVelocityDps=None, prefabPath=None, lifespanTypeId=None, skillStatProfileId=None, projectileTrailId=None, targetTypeId=None, aimTypeId=None, motionTypeId=None, lifespan=None, durationSeconds=None, wallBehaviorId=None, wallEffectPrefabPath=None, orientationTypeId=None, projectileParentId=None, targetFxListId=None, motionEaseId=None, damageSoundId=None, collisionSoundId=None, collisionFxListId=None, bodyFxListId=None, launchSoundId=None,):
        self.projectileId = projectileId
        self.speed = speed
        self.polarVelocityDps = polarVelocityDps
        self.prefabPath = prefabPath
        self.lifespanTypeId = lifespanTypeId
        self.skillStatProfileId = skillStatProfileId
        self.projectileTrailId = projectileTrailId
        self.targetTypeId = targetTypeId
        self.aimTypeId = aimTypeId
        self.motionTypeId = motionTypeId
        self.lifespan = lifespan
        self.durationSeconds = durationSeconds
        self.wallBehaviorId = wallBehaviorId
        self.wallEffectPrefabPath = wallEffectPrefabPath
        self.orientationTypeId = orientationTypeId
        self.projectileParentId = projectileParentId
        self.targetFxListId = targetFxListId
        self.motionEaseId = motionEaseId
        self.damageSoundId = damageSoundId
        self.collisionSoundId = collisionSoundId
        self.collisionFxListId = collisionFxListId
        self.bodyFxListId = bodyFxListId
        self.launchSoundId = launchSoundId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.speed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.polarVelocityDps = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.lifespanTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.projectileTrailId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.targetTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.aimTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.motionTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.lifespan = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.durationSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.wallBehaviorId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.wallEffectPrefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.orientationTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.projectileParentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.targetFxListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.motionEaseId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.damageSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.collisionSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.collisionFxListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.bodyFxListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.launchSoundId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Projectile')
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 1)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.DOUBLE, 3)
            oprot.writeDouble(self.speed)
            oprot.writeFieldEnd()
        if self.polarVelocityDps is not None:
            oprot.writeFieldBegin('polarVelocityDps', TType.DOUBLE, 5)
            oprot.writeDouble(self.polarVelocityDps)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 6)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.lifespanTypeId is not None:
            oprot.writeFieldBegin('lifespanTypeId', TType.I32, 8)
            oprot.writeI32(self.lifespanTypeId)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 11)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.projectileTrailId is not None:
            oprot.writeFieldBegin('projectileTrailId', TType.STRING, 12)
            oprot.writeString(self.projectileTrailId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileTrailId)
            oprot.writeFieldEnd()
        if self.targetTypeId is not None:
            oprot.writeFieldBegin('targetTypeId', TType.I32, 13)
            oprot.writeI32(self.targetTypeId)
            oprot.writeFieldEnd()
        if self.aimTypeId is not None:
            oprot.writeFieldBegin('aimTypeId', TType.I32, 14)
            oprot.writeI32(self.aimTypeId)
            oprot.writeFieldEnd()
        if self.motionTypeId is not None:
            oprot.writeFieldBegin('motionTypeId', TType.I32, 15)
            oprot.writeI32(self.motionTypeId)
            oprot.writeFieldEnd()
        if self.lifespan is not None:
            oprot.writeFieldBegin('lifespan', TType.DOUBLE, 16)
            oprot.writeDouble(self.lifespan)
            oprot.writeFieldEnd()
        if self.durationSeconds is not None:
            oprot.writeFieldBegin('durationSeconds', TType.DOUBLE, 17)
            oprot.writeDouble(self.durationSeconds)
            oprot.writeFieldEnd()
        if self.wallBehaviorId is not None:
            oprot.writeFieldBegin('wallBehaviorId', TType.I32, 18)
            oprot.writeI32(self.wallBehaviorId)
            oprot.writeFieldEnd()
        if self.wallEffectPrefabPath is not None:
            oprot.writeFieldBegin('wallEffectPrefabPath', TType.STRING, 19)
            oprot.writeString(self.wallEffectPrefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.wallEffectPrefabPath)
            oprot.writeFieldEnd()
        if self.orientationTypeId is not None:
            oprot.writeFieldBegin('orientationTypeId', TType.I32, 22)
            oprot.writeI32(self.orientationTypeId)
            oprot.writeFieldEnd()
        if self.projectileParentId is not None:
            oprot.writeFieldBegin('projectileParentId', TType.I32, 23)
            oprot.writeI32(self.projectileParentId)
            oprot.writeFieldEnd()
        if self.targetFxListId is not None:
            oprot.writeFieldBegin('targetFxListId', TType.STRING, 24)
            oprot.writeString(self.targetFxListId.encode('utf-8') if sys.version_info[0] == 2 else self.targetFxListId)
            oprot.writeFieldEnd()
        if self.motionEaseId is not None:
            oprot.writeFieldBegin('motionEaseId', TType.I32, 25)
            oprot.writeI32(self.motionEaseId)
            oprot.writeFieldEnd()
        if self.damageSoundId is not None:
            oprot.writeFieldBegin('damageSoundId', TType.STRING, 26)
            oprot.writeString(self.damageSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.damageSoundId)
            oprot.writeFieldEnd()
        if self.collisionSoundId is not None:
            oprot.writeFieldBegin('collisionSoundId', TType.STRING, 27)
            oprot.writeString(self.collisionSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.collisionSoundId)
            oprot.writeFieldEnd()
        if self.collisionFxListId is not None:
            oprot.writeFieldBegin('collisionFxListId', TType.STRING, 28)
            oprot.writeString(self.collisionFxListId.encode('utf-8') if sys.version_info[0] == 2 else self.collisionFxListId)
            oprot.writeFieldEnd()
        if self.bodyFxListId is not None:
            oprot.writeFieldBegin('bodyFxListId', TType.STRING, 29)
            oprot.writeString(self.bodyFxListId.encode('utf-8') if sys.version_info[0] == 2 else self.bodyFxListId)
            oprot.writeFieldEnd()
        if self.launchSoundId is not None:
            oprot.writeFieldBegin('launchSoundId', TType.STRING, 30)
            oprot.writeString(self.launchSoundId.encode('utf-8') if sys.version_info[0] == 2 else self.launchSoundId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.projectileId is None:
            raise TProtocolException(message='Required field projectileId is unset!')
        if self.speed is None:
            raise TProtocolException(message='Required field speed is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BeamProjectile(object):
    """
    Attributes:
     - projectileId
     - skillStatProfileId
     - prefabPath
     - durationSeconds
     - sourceEffectPath
     - beamEffectPath
     - targetEffectPath
     - audioPath_notused
     - beamEffectLength
     - enchantmentId
     - targetTypeId
     - targetFxListId

    """


    def __init__(self, projectileId=None, skillStatProfileId=None, prefabPath=None, durationSeconds=None, sourceEffectPath=None, beamEffectPath=None, targetEffectPath=None, audioPath_notused=None, beamEffectLength=None, enchantmentId=None, targetTypeId=None, targetFxListId=None,):
        self.projectileId = projectileId
        self.skillStatProfileId = skillStatProfileId
        self.prefabPath = prefabPath
        self.durationSeconds = durationSeconds
        self.sourceEffectPath = sourceEffectPath
        self.beamEffectPath = beamEffectPath
        self.targetEffectPath = targetEffectPath
        self.audioPath_notused = audioPath_notused
        self.beamEffectLength = beamEffectLength
        self.enchantmentId = enchantmentId
        self.targetTypeId = targetTypeId
        self.targetFxListId = targetFxListId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.prefabPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.durationSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sourceEffectPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.beamEffectPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.targetEffectPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.audioPath_notused = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.beamEffectLength = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.enchantmentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.targetTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.targetFxListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BeamProjectile')
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 1)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 2)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.prefabPath is not None:
            oprot.writeFieldBegin('prefabPath', TType.STRING, 3)
            oprot.writeString(self.prefabPath.encode('utf-8') if sys.version_info[0] == 2 else self.prefabPath)
            oprot.writeFieldEnd()
        if self.durationSeconds is not None:
            oprot.writeFieldBegin('durationSeconds', TType.DOUBLE, 4)
            oprot.writeDouble(self.durationSeconds)
            oprot.writeFieldEnd()
        if self.sourceEffectPath is not None:
            oprot.writeFieldBegin('sourceEffectPath', TType.STRING, 5)
            oprot.writeString(self.sourceEffectPath.encode('utf-8') if sys.version_info[0] == 2 else self.sourceEffectPath)
            oprot.writeFieldEnd()
        if self.beamEffectPath is not None:
            oprot.writeFieldBegin('beamEffectPath', TType.STRING, 6)
            oprot.writeString(self.beamEffectPath.encode('utf-8') if sys.version_info[0] == 2 else self.beamEffectPath)
            oprot.writeFieldEnd()
        if self.targetEffectPath is not None:
            oprot.writeFieldBegin('targetEffectPath', TType.STRING, 7)
            oprot.writeString(self.targetEffectPath.encode('utf-8') if sys.version_info[0] == 2 else self.targetEffectPath)
            oprot.writeFieldEnd()
        if self.audioPath_notused is not None:
            oprot.writeFieldBegin('audioPath_notused', TType.STRING, 8)
            oprot.writeString(self.audioPath_notused.encode('utf-8') if sys.version_info[0] == 2 else self.audioPath_notused)
            oprot.writeFieldEnd()
        if self.beamEffectLength is not None:
            oprot.writeFieldBegin('beamEffectLength', TType.DOUBLE, 9)
            oprot.writeDouble(self.beamEffectLength)
            oprot.writeFieldEnd()
        if self.enchantmentId is not None:
            oprot.writeFieldBegin('enchantmentId', TType.STRING, 10)
            oprot.writeString(self.enchantmentId.encode('utf-8') if sys.version_info[0] == 2 else self.enchantmentId)
            oprot.writeFieldEnd()
        if self.targetTypeId is not None:
            oprot.writeFieldBegin('targetTypeId', TType.I32, 11)
            oprot.writeI32(self.targetTypeId)
            oprot.writeFieldEnd()
        if self.targetFxListId is not None:
            oprot.writeFieldBegin('targetFxListId', TType.STRING, 12)
            oprot.writeString(self.targetFxListId.encode('utf-8') if sys.version_info[0] == 2 else self.targetFxListId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.projectileId is None:
            raise TProtocolException(message='Required field projectileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RadialProjectileAttack(object):
    """
    Attributes:
     - attackId
     - degreesIncrement
     - delayIncrementSeconds
     - delayRotationSeconds
     - numRotationsOld
     - projectileId
     - startDegrees
     - numRotations

    """


    def __init__(self, attackId=None, degreesIncrement=None, delayIncrementSeconds=None, delayRotationSeconds=None, numRotationsOld=None, projectileId=None, startDegrees=None, numRotations=None,):
        self.attackId = attackId
        self.degreesIncrement = degreesIncrement
        self.delayIncrementSeconds = delayIncrementSeconds
        self.delayRotationSeconds = delayRotationSeconds
        self.numRotationsOld = numRotationsOld
        self.projectileId = projectileId
        self.startDegrees = startDegrees
        self.numRotations = numRotations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.attackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.degreesIncrement = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.delayIncrementSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.delayRotationSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numRotationsOld = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.startDegrees = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.numRotations = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RadialProjectileAttack')
        if self.attackId is not None:
            oprot.writeFieldBegin('attackId', TType.STRING, 1)
            oprot.writeString(self.attackId.encode('utf-8') if sys.version_info[0] == 2 else self.attackId)
            oprot.writeFieldEnd()
        if self.degreesIncrement is not None:
            oprot.writeFieldBegin('degreesIncrement', TType.DOUBLE, 2)
            oprot.writeDouble(self.degreesIncrement)
            oprot.writeFieldEnd()
        if self.delayIncrementSeconds is not None:
            oprot.writeFieldBegin('delayIncrementSeconds', TType.DOUBLE, 3)
            oprot.writeDouble(self.delayIncrementSeconds)
            oprot.writeFieldEnd()
        if self.delayRotationSeconds is not None:
            oprot.writeFieldBegin('delayRotationSeconds', TType.DOUBLE, 4)
            oprot.writeDouble(self.delayRotationSeconds)
            oprot.writeFieldEnd()
        if self.numRotationsOld is not None:
            oprot.writeFieldBegin('numRotationsOld', TType.I32, 5)
            oprot.writeI32(self.numRotationsOld)
            oprot.writeFieldEnd()
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 7)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        if self.startDegrees is not None:
            oprot.writeFieldBegin('startDegrees', TType.DOUBLE, 8)
            oprot.writeDouble(self.startDegrees)
            oprot.writeFieldEnd()
        if self.numRotations is not None:
            oprot.writeFieldBegin('numRotations', TType.DOUBLE, 9)
            oprot.writeDouble(self.numRotations)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.attackId is None:
            raise TProtocolException(message='Required field attackId is unset!')
        if self.degreesIncrement is None:
            raise TProtocolException(message='Required field degreesIncrement is unset!')
        if self.delayIncrementSeconds is None:
            raise TProtocolException(message='Required field delayIncrementSeconds is unset!')
        if self.delayRotationSeconds is None:
            raise TProtocolException(message='Required field delayRotationSeconds is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LaserAttack(object):
    """
    Attributes:
     - attackId
     - degreesStart
     - degreesIncrement
     - damageRepeatSeconds
     - laserWidth
     - projectileId
     - degreesSweep

    """


    def __init__(self, attackId=None, degreesStart=None, degreesIncrement=None, damageRepeatSeconds=None, laserWidth=None, projectileId=None, degreesSweep=None,):
        self.attackId = attackId
        self.degreesStart = degreesStart
        self.degreesIncrement = degreesIncrement
        self.damageRepeatSeconds = damageRepeatSeconds
        self.laserWidth = laserWidth
        self.projectileId = projectileId
        self.degreesSweep = degreesSweep

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.attackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.degreesStart = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.degreesIncrement = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.damageRepeatSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.laserWidth = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.degreesSweep = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LaserAttack')
        if self.attackId is not None:
            oprot.writeFieldBegin('attackId', TType.STRING, 1)
            oprot.writeString(self.attackId.encode('utf-8') if sys.version_info[0] == 2 else self.attackId)
            oprot.writeFieldEnd()
        if self.degreesStart is not None:
            oprot.writeFieldBegin('degreesStart', TType.DOUBLE, 2)
            oprot.writeDouble(self.degreesStart)
            oprot.writeFieldEnd()
        if self.degreesIncrement is not None:
            oprot.writeFieldBegin('degreesIncrement', TType.DOUBLE, 3)
            oprot.writeDouble(self.degreesIncrement)
            oprot.writeFieldEnd()
        if self.damageRepeatSeconds is not None:
            oprot.writeFieldBegin('damageRepeatSeconds', TType.DOUBLE, 4)
            oprot.writeDouble(self.damageRepeatSeconds)
            oprot.writeFieldEnd()
        if self.laserWidth is not None:
            oprot.writeFieldBegin('laserWidth', TType.DOUBLE, 5)
            oprot.writeDouble(self.laserWidth)
            oprot.writeFieldEnd()
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 7)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        if self.degreesSweep is not None:
            oprot.writeFieldBegin('degreesSweep', TType.DOUBLE, 8)
            oprot.writeDouble(self.degreesSweep)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.attackId is None:
            raise TProtocolException(message='Required field attackId is unset!')
        if self.damageRepeatSeconds is None:
            raise TProtocolException(message='Required field damageRepeatSeconds is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShootAttack(object):
    """
    Attributes:
     - attackId
     - degreesStart
     - degreesIncrement
     - damageRepeatSeconds
     - projectileId
     - distanceRepeat
     - timeRepeat
     - maxProjectiles

    """


    def __init__(self, attackId=None, degreesStart=None, degreesIncrement=None, damageRepeatSeconds=None, projectileId=None, distanceRepeat=None, timeRepeat=None, maxProjectiles=None,):
        self.attackId = attackId
        self.degreesStart = degreesStart
        self.degreesIncrement = degreesIncrement
        self.damageRepeatSeconds = damageRepeatSeconds
        self.projectileId = projectileId
        self.distanceRepeat = distanceRepeat
        self.timeRepeat = timeRepeat
        self.maxProjectiles = maxProjectiles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.attackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.degreesStart = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.degreesIncrement = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.damageRepeatSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.distanceRepeat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.timeRepeat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.maxProjectiles = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShootAttack')
        if self.attackId is not None:
            oprot.writeFieldBegin('attackId', TType.STRING, 1)
            oprot.writeString(self.attackId.encode('utf-8') if sys.version_info[0] == 2 else self.attackId)
            oprot.writeFieldEnd()
        if self.degreesStart is not None:
            oprot.writeFieldBegin('degreesStart', TType.DOUBLE, 2)
            oprot.writeDouble(self.degreesStart)
            oprot.writeFieldEnd()
        if self.degreesIncrement is not None:
            oprot.writeFieldBegin('degreesIncrement', TType.DOUBLE, 3)
            oprot.writeDouble(self.degreesIncrement)
            oprot.writeFieldEnd()
        if self.damageRepeatSeconds is not None:
            oprot.writeFieldBegin('damageRepeatSeconds', TType.DOUBLE, 4)
            oprot.writeDouble(self.damageRepeatSeconds)
            oprot.writeFieldEnd()
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 7)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        if self.distanceRepeat is not None:
            oprot.writeFieldBegin('distanceRepeat', TType.DOUBLE, 8)
            oprot.writeDouble(self.distanceRepeat)
            oprot.writeFieldEnd()
        if self.timeRepeat is not None:
            oprot.writeFieldBegin('timeRepeat', TType.DOUBLE, 9)
            oprot.writeDouble(self.timeRepeat)
            oprot.writeFieldEnd()
        if self.maxProjectiles is not None:
            oprot.writeFieldBegin('maxProjectiles', TType.I32, 10)
            oprot.writeI32(self.maxProjectiles)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.attackId is None:
            raise TProtocolException(message='Required field attackId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectileTrail(object):
    """
    Attributes:
     - projectileTrailId
     - projectileId
     - spawnDistance

    """


    def __init__(self, projectileTrailId=None, projectileId=None, spawnDistance=None,):
        self.projectileTrailId = projectileTrailId
        self.projectileId = projectileId
        self.spawnDistance = spawnDistance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.projectileTrailId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.projectileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.spawnDistance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProjectileTrail')
        if self.projectileTrailId is not None:
            oprot.writeFieldBegin('projectileTrailId', TType.STRING, 1)
            oprot.writeString(self.projectileTrailId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileTrailId)
            oprot.writeFieldEnd()
        if self.projectileId is not None:
            oprot.writeFieldBegin('projectileId', TType.STRING, 2)
            oprot.writeString(self.projectileId.encode('utf-8') if sys.version_info[0] == 2 else self.projectileId)
            oprot.writeFieldEnd()
        if self.spawnDistance is not None:
            oprot.writeFieldBegin('spawnDistance', TType.DOUBLE, 3)
            oprot.writeDouble(self.spawnDistance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.projectileTrailId is None:
            raise TProtocolException(message='Required field projectileTrailId is unset!')
        if self.projectileId is None:
            raise TProtocolException(message='Required field projectileId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ParticlesAttack(object):
    """
    Attributes:
     - attackId
     - skillStatProfileId
     - damageRepeatSeconds
     - radius
     - effectListId

    """


    def __init__(self, attackId=None, skillStatProfileId=None, damageRepeatSeconds=None, radius=None, effectListId=None,):
        self.attackId = attackId
        self.skillStatProfileId = skillStatProfileId
        self.damageRepeatSeconds = damageRepeatSeconds
        self.radius = radius
        self.effectListId = effectListId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.attackId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.skillStatProfileId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.damageRepeatSeconds = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.effectListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ParticlesAttack')
        if self.attackId is not None:
            oprot.writeFieldBegin('attackId', TType.STRING, 1)
            oprot.writeString(self.attackId.encode('utf-8') if sys.version_info[0] == 2 else self.attackId)
            oprot.writeFieldEnd()
        if self.skillStatProfileId is not None:
            oprot.writeFieldBegin('skillStatProfileId', TType.STRING, 3)
            oprot.writeString(self.skillStatProfileId.encode('utf-8') if sys.version_info[0] == 2 else self.skillStatProfileId)
            oprot.writeFieldEnd()
        if self.damageRepeatSeconds is not None:
            oprot.writeFieldBegin('damageRepeatSeconds', TType.DOUBLE, 4)
            oprot.writeDouble(self.damageRepeatSeconds)
            oprot.writeFieldEnd()
        if self.radius is not None:
            oprot.writeFieldBegin('radius', TType.DOUBLE, 5)
            oprot.writeDouble(self.radius)
            oprot.writeFieldEnd()
        if self.effectListId is not None:
            oprot.writeFieldBegin('effectListId', TType.STRING, 6)
            oprot.writeString(self.effectListId.encode('utf-8') if sys.version_info[0] == 2 else self.effectListId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.attackId is None:
            raise TProtocolException(message='Required field attackId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutoPurchaseListEntry(object):
    """
    Attributes:
     - currencyId
     - purchaseOfferId

    """


    def __init__(self, currencyId=None, purchaseOfferId=None,):
        self.currencyId = currencyId
        self.purchaseOfferId = purchaseOfferId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.purchaseOfferId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AutoPurchaseListEntry')
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 1)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.purchaseOfferId is not None:
            oprot.writeFieldBegin('purchaseOfferId', TType.STRING, 2)
            oprot.writeString(self.purchaseOfferId.encode('utf-8') if sys.version_info[0] == 2 else self.purchaseOfferId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.purchaseOfferId is None:
            raise TProtocolException(message='Required field purchaseOfferId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutoPurchaseList(object):
    """
    Attributes:
     - currencyId
     - purchaseOfferIds

    """


    def __init__(self, currencyId=None, purchaseOfferIds=None,):
        self.currencyId = currencyId
        self.purchaseOfferIds = purchaseOfferIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.currencyId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.purchaseOfferIds = []
                    (_etype789, _size786) = iprot.readListBegin()
                    for _i790 in range(_size786):
                        _elem791 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.purchaseOfferIds.append(_elem791)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AutoPurchaseList')
        if self.currencyId is not None:
            oprot.writeFieldBegin('currencyId', TType.STRING, 1)
            oprot.writeString(self.currencyId.encode('utf-8') if sys.version_info[0] == 2 else self.currencyId)
            oprot.writeFieldEnd()
        if self.purchaseOfferIds is not None:
            oprot.writeFieldBegin('purchaseOfferIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.purchaseOfferIds))
            for iter792 in self.purchaseOfferIds:
                oprot.writeString(iter792.encode('utf-8') if sys.version_info[0] == 2 else iter792)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.currencyId is None:
            raise TProtocolException(message='Required field currencyId is unset!')
        if self.purchaseOfferIds is None:
            raise TProtocolException(message='Required field purchaseOfferIds is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConfigCleaner(object):
    """
    Attributes:
     - configCleanerNum
     - configCleanerTypeId
     - display
     - description

    """


    def __init__(self, configCleanerNum=None, configCleanerTypeId=None, display=None, description=None,):
        self.configCleanerNum = configCleanerNum
        self.configCleanerTypeId = configCleanerTypeId
        self.display = display
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.configCleanerNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.configCleanerTypeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.display = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConfigCleaner')
        if self.configCleanerNum is not None:
            oprot.writeFieldBegin('configCleanerNum', TType.I32, 1)
            oprot.writeI32(self.configCleanerNum)
            oprot.writeFieldEnd()
        if self.configCleanerTypeId is not None:
            oprot.writeFieldBegin('configCleanerTypeId', TType.I32, 2)
            oprot.writeI32(self.configCleanerTypeId)
            oprot.writeFieldEnd()
        if self.display is not None:
            oprot.writeFieldBegin('display', TType.STRING, 3)
            oprot.writeString(self.display.encode('utf-8') if sys.version_info[0] == 2 else self.display)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.configCleanerNum is None:
            raise TProtocolException(message='Required field configCleanerNum is unset!')
        if self.configCleanerTypeId is None:
            raise TProtocolException(message='Required field configCleanerTypeId is unset!')
        if self.display is None:
            raise TProtocolException(message='Required field display is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AutoConfigCleaner(object):
    """
    Attributes:
     - configCleanerNum
     - tableNames
     - tableKeys
     - errorTableNames

    """


    def __init__(self, configCleanerNum=None, tableNames=None, tableKeys=None, errorTableNames=None,):
        self.configCleanerNum = configCleanerNum
        self.tableNames = tableNames
        self.tableKeys = tableKeys
        self.errorTableNames = errorTableNames

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.configCleanerNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tableNames = []
                    (_etype796, _size793) = iprot.readListBegin()
                    for _i797 in range(_size793):
                        _elem798 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tableNames.append(_elem798)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tableKeys = []
                    (_etype802, _size799) = iprot.readListBegin()
                    for _i803 in range(_size799):
                        _elem804 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.tableKeys.append(_elem804)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.errorTableNames = []
                    (_etype808, _size805) = iprot.readListBegin()
                    for _i809 in range(_size805):
                        _elem810 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.errorTableNames.append(_elem810)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AutoConfigCleaner')
        if self.configCleanerNum is not None:
            oprot.writeFieldBegin('configCleanerNum', TType.I32, 1)
            oprot.writeI32(self.configCleanerNum)
            oprot.writeFieldEnd()
        if self.tableNames is not None:
            oprot.writeFieldBegin('tableNames', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.tableNames))
            for iter811 in self.tableNames:
                oprot.writeString(iter811.encode('utf-8') if sys.version_info[0] == 2 else iter811)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tableKeys is not None:
            oprot.writeFieldBegin('tableKeys', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.tableKeys))
            for iter812 in self.tableKeys:
                oprot.writeString(iter812.encode('utf-8') if sys.version_info[0] == 2 else iter812)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.errorTableNames is not None:
            oprot.writeFieldBegin('errorTableNames', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.errorTableNames))
            for iter813 in self.errorTableNames:
                oprot.writeString(iter813.encode('utf-8') if sys.version_info[0] == 2 else iter813)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.configCleanerNum is None:
            raise TProtocolException(message='Required field configCleanerNum is unset!')
        if self.tableNames is None:
            raise TProtocolException(message='Required field tableNames is unset!')
        if self.tableKeys is None:
            raise TProtocolException(message='Required field tableKeys is unset!')
        if self.errorTableNames is None:
            raise TProtocolException(message='Required field errorTableNames is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SkillLevelUpCostEntry(object):
    """
    Attributes:
     - levelNum
     - levelUpGoldCost

    """


    def __init__(self, levelNum=None, levelUpGoldCost=None,):
        self.levelNum = levelNum
        self.levelUpGoldCost = levelUpGoldCost

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.levelNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.levelUpGoldCost = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SkillLevelUpCostEntry')
        if self.levelNum is not None:
            oprot.writeFieldBegin('levelNum', TType.I32, 1)
            oprot.writeI32(self.levelNum)
            oprot.writeFieldEnd()
        if self.levelUpGoldCost is not None:
            oprot.writeFieldBegin('levelUpGoldCost', TType.I32, 2)
            oprot.writeI32(self.levelUpGoldCost)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.levelNum is None:
            raise TProtocolException(message='Required field levelNum is unset!')
        if self.levelUpGoldCost is None:
            raise TProtocolException(message='Required field levelUpGoldCost is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SkillSlotMinLevelEntry(object):
    """
    Attributes:
     - slotNum
     - minLevel

    """


    def __init__(self, slotNum=None, minLevel=None,):
        self.slotNum = slotNum
        self.minLevel = minLevel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.slotNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.minLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SkillSlotMinLevelEntry')
        if self.slotNum is not None:
            oprot.writeFieldBegin('slotNum', TType.I32, 1)
            oprot.writeI32(self.slotNum)
            oprot.writeFieldEnd()
        if self.minLevel is not None:
            oprot.writeFieldBegin('minLevel', TType.I32, 2)
            oprot.writeI32(self.minLevel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.slotNum is None:
            raise TProtocolException(message='Required field slotNum is unset!')
        if self.minLevel is None:
            raise TProtocolException(message='Required field minLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimulationTestEntry(object):
    """
    Attributes:
     - simulationTestId
     - order
     - numSamples
     - resultTeam1WinCount
     - team1Hp
     - team1Damage
     - team1Strength
     - team1PhysicalAttack
     - team1PhysicalDefense
     - team1Intelligence
     - team1MagicAttack
     - team1MagicDefense
     - team2Hp
     - team2Damage
     - team2Strength
     - team2PhysicalAttack
     - team2PhysicalDefense
     - team2Intelligence
     - team2MagicAttack
     - team3MagicDefense

    """


    def __init__(self, simulationTestId=None, order=None, numSamples=None, resultTeam1WinCount=None, team1Hp=None, team1Damage=None, team1Strength=None, team1PhysicalAttack=None, team1PhysicalDefense=None, team1Intelligence=None, team1MagicAttack=None, team1MagicDefense=None, team2Hp=None, team2Damage=None, team2Strength=None, team2PhysicalAttack=None, team2PhysicalDefense=None, team2Intelligence=None, team2MagicAttack=None, team3MagicDefense=None,):
        self.simulationTestId = simulationTestId
        self.order = order
        self.numSamples = numSamples
        self.resultTeam1WinCount = resultTeam1WinCount
        self.team1Hp = team1Hp
        self.team1Damage = team1Damage
        self.team1Strength = team1Strength
        self.team1PhysicalAttack = team1PhysicalAttack
        self.team1PhysicalDefense = team1PhysicalDefense
        self.team1Intelligence = team1Intelligence
        self.team1MagicAttack = team1MagicAttack
        self.team1MagicDefense = team1MagicDefense
        self.team2Hp = team2Hp
        self.team2Damage = team2Damage
        self.team2Strength = team2Strength
        self.team2PhysicalAttack = team2PhysicalAttack
        self.team2PhysicalDefense = team2PhysicalDefense
        self.team2Intelligence = team2Intelligence
        self.team2MagicAttack = team2MagicAttack
        self.team3MagicDefense = team3MagicDefense

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.simulationTestId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numSamples = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.resultTeam1WinCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.team1Hp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.team1Damage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.team1Strength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.team1PhysicalAttack = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.team1PhysicalDefense = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.team1Intelligence = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.team1MagicAttack = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.team1MagicDefense = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.team2Hp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.team2Damage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.team2Strength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.team2PhysicalAttack = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.team2PhysicalDefense = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.team2Intelligence = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.team2MagicAttack = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.team3MagicDefense = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SimulationTestEntry')
        if self.simulationTestId is not None:
            oprot.writeFieldBegin('simulationTestId', TType.STRING, 1)
            oprot.writeString(self.simulationTestId.encode('utf-8') if sys.version_info[0] == 2 else self.simulationTestId)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 2)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.numSamples is not None:
            oprot.writeFieldBegin('numSamples', TType.I32, 3)
            oprot.writeI32(self.numSamples)
            oprot.writeFieldEnd()
        if self.resultTeam1WinCount is not None:
            oprot.writeFieldBegin('resultTeam1WinCount', TType.I32, 9)
            oprot.writeI32(self.resultTeam1WinCount)
            oprot.writeFieldEnd()
        if self.team1Hp is not None:
            oprot.writeFieldBegin('team1Hp', TType.I32, 10)
            oprot.writeI32(self.team1Hp)
            oprot.writeFieldEnd()
        if self.team1Damage is not None:
            oprot.writeFieldBegin('team1Damage', TType.I32, 11)
            oprot.writeI32(self.team1Damage)
            oprot.writeFieldEnd()
        if self.team1Strength is not None:
            oprot.writeFieldBegin('team1Strength', TType.I32, 12)
            oprot.writeI32(self.team1Strength)
            oprot.writeFieldEnd()
        if self.team1PhysicalAttack is not None:
            oprot.writeFieldBegin('team1PhysicalAttack', TType.I32, 14)
            oprot.writeI32(self.team1PhysicalAttack)
            oprot.writeFieldEnd()
        if self.team1PhysicalDefense is not None:
            oprot.writeFieldBegin('team1PhysicalDefense', TType.I32, 15)
            oprot.writeI32(self.team1PhysicalDefense)
            oprot.writeFieldEnd()
        if self.team1Intelligence is not None:
            oprot.writeFieldBegin('team1Intelligence', TType.I32, 16)
            oprot.writeI32(self.team1Intelligence)
            oprot.writeFieldEnd()
        if self.team1MagicAttack is not None:
            oprot.writeFieldBegin('team1MagicAttack', TType.I32, 17)
            oprot.writeI32(self.team1MagicAttack)
            oprot.writeFieldEnd()
        if self.team1MagicDefense is not None:
            oprot.writeFieldBegin('team1MagicDefense', TType.I32, 18)
            oprot.writeI32(self.team1MagicDefense)
            oprot.writeFieldEnd()
        if self.team2Hp is not None:
            oprot.writeFieldBegin('team2Hp', TType.I32, 20)
            oprot.writeI32(self.team2Hp)
            oprot.writeFieldEnd()
        if self.team2Damage is not None:
            oprot.writeFieldBegin('team2Damage', TType.I32, 21)
            oprot.writeI32(self.team2Damage)
            oprot.writeFieldEnd()
        if self.team2Strength is not None:
            oprot.writeFieldBegin('team2Strength', TType.I32, 22)
            oprot.writeI32(self.team2Strength)
            oprot.writeFieldEnd()
        if self.team2PhysicalAttack is not None:
            oprot.writeFieldBegin('team2PhysicalAttack', TType.I32, 24)
            oprot.writeI32(self.team2PhysicalAttack)
            oprot.writeFieldEnd()
        if self.team2PhysicalDefense is not None:
            oprot.writeFieldBegin('team2PhysicalDefense', TType.I32, 25)
            oprot.writeI32(self.team2PhysicalDefense)
            oprot.writeFieldEnd()
        if self.team2Intelligence is not None:
            oprot.writeFieldBegin('team2Intelligence', TType.I32, 26)
            oprot.writeI32(self.team2Intelligence)
            oprot.writeFieldEnd()
        if self.team2MagicAttack is not None:
            oprot.writeFieldBegin('team2MagicAttack', TType.I32, 27)
            oprot.writeI32(self.team2MagicAttack)
            oprot.writeFieldEnd()
        if self.team3MagicDefense is not None:
            oprot.writeFieldBegin('team3MagicDefense', TType.I32, 28)
            oprot.writeI32(self.team3MagicDefense)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.simulationTestId is None:
            raise TProtocolException(message='Required field simulationTestId is unset!')
        if self.order is None:
            raise TProtocolException(message='Required field order is unset!')
        if self.numSamples is None:
            raise TProtocolException(message='Required field numSamples is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimulationTest(object):
    """
    Attributes:
     - simulationTestId
     - simulationTestEntries
     - autoRun

    """


    def __init__(self, simulationTestId=None, simulationTestEntries=None, autoRun=None,):
        self.simulationTestId = simulationTestId
        self.simulationTestEntries = simulationTestEntries
        self.autoRun = autoRun

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.simulationTestId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.simulationTestEntries = []
                    (_etype817, _size814) = iprot.readListBegin()
                    for _i818 in range(_size814):
                        _elem819 = SimulationTestEntry()
                        _elem819.read(iprot)
                        self.simulationTestEntries.append(_elem819)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoRun = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SimulationTest')
        if self.simulationTestId is not None:
            oprot.writeFieldBegin('simulationTestId', TType.STRING, 1)
            oprot.writeString(self.simulationTestId.encode('utf-8') if sys.version_info[0] == 2 else self.simulationTestId)
            oprot.writeFieldEnd()
        if self.simulationTestEntries is not None:
            oprot.writeFieldBegin('simulationTestEntries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.simulationTestEntries))
            for iter820 in self.simulationTestEntries:
                iter820.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.autoRun is not None:
            oprot.writeFieldBegin('autoRun', TType.BOOL, 3)
            oprot.writeBool(self.autoRun)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.simulationTestId is None:
            raise TProtocolException(message='Required field simulationTestId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestInfo(object):
    """
    Attributes:
     - requestUrl
     - safeUserFieldIds
     - dangerUserFieldIds
     - suppressUserObject
     - userInBody
     - responseInBody

    """


    def __init__(self, requestUrl=None, safeUserFieldIds=None, dangerUserFieldIds=None, suppressUserObject=None, userInBody=None, responseInBody=None,):
        self.requestUrl = requestUrl
        self.safeUserFieldIds = safeUserFieldIds
        self.dangerUserFieldIds = dangerUserFieldIds
        self.suppressUserObject = suppressUserObject
        self.userInBody = userInBody
        self.responseInBody = responseInBody

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestUrl = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.safeUserFieldIds = []
                    (_etype824, _size821) = iprot.readListBegin()
                    for _i825 in range(_size821):
                        _elem826 = iprot.readI32()
                        self.safeUserFieldIds.append(_elem826)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.dangerUserFieldIds = []
                    (_etype830, _size827) = iprot.readListBegin()
                    for _i831 in range(_size827):
                        _elem832 = iprot.readI32()
                        self.dangerUserFieldIds.append(_elem832)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.suppressUserObject = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.userInBody = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.responseInBody = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RequestInfo')
        if self.requestUrl is not None:
            oprot.writeFieldBegin('requestUrl', TType.STRING, 1)
            oprot.writeString(self.requestUrl.encode('utf-8') if sys.version_info[0] == 2 else self.requestUrl)
            oprot.writeFieldEnd()
        if self.safeUserFieldIds is not None:
            oprot.writeFieldBegin('safeUserFieldIds', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.safeUserFieldIds))
            for iter833 in self.safeUserFieldIds:
                oprot.writeI32(iter833)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dangerUserFieldIds is not None:
            oprot.writeFieldBegin('dangerUserFieldIds', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.dangerUserFieldIds))
            for iter834 in self.dangerUserFieldIds:
                oprot.writeI32(iter834)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.suppressUserObject is not None:
            oprot.writeFieldBegin('suppressUserObject', TType.BOOL, 4)
            oprot.writeBool(self.suppressUserObject)
            oprot.writeFieldEnd()
        if self.userInBody is not None:
            oprot.writeFieldBegin('userInBody', TType.BOOL, 5)
            oprot.writeBool(self.userInBody)
            oprot.writeFieldEnd()
        if self.responseInBody is not None:
            oprot.writeFieldBegin('responseInBody', TType.BOOL, 6)
            oprot.writeBool(self.responseInBody)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requestUrl is None:
            raise TProtocolException(message='Required field requestUrl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestInfoFieldEntry(object):
    """
    Attributes:
     - requestUrl
     - userFieldId

    """


    def __init__(self, requestUrl=None, userFieldId=None,):
        self.requestUrl = requestUrl
        self.userFieldId = userFieldId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestUrl = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userFieldId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RequestInfoFieldEntry')
        if self.requestUrl is not None:
            oprot.writeFieldBegin('requestUrl', TType.STRING, 1)
            oprot.writeString(self.requestUrl.encode('utf-8') if sys.version_info[0] == 2 else self.requestUrl)
            oprot.writeFieldEnd()
        if self.userFieldId is not None:
            oprot.writeFieldBegin('userFieldId', TType.I32, 2)
            oprot.writeI32(self.userFieldId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.requestUrl is None:
            raise TProtocolException(message='Required field requestUrl is unset!')
        if self.userFieldId is None:
            raise TProtocolException(message='Required field userFieldId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AssetList(object):
    """
    Attributes:
     - assetListId
     - assetIds

    """


    def __init__(self, assetListId=None, assetIds=None,):
        self.assetListId = assetListId
        self.assetIds = assetIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.assetListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.assetIds = []
                    (_etype838, _size835) = iprot.readListBegin()
                    for _i839 in range(_size835):
                        _elem840 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.assetIds.append(_elem840)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AssetList')
        if self.assetListId is not None:
            oprot.writeFieldBegin('assetListId', TType.STRING, 1)
            oprot.writeString(self.assetListId.encode('utf-8') if sys.version_info[0] == 2 else self.assetListId)
            oprot.writeFieldEnd()
        if self.assetIds is not None:
            oprot.writeFieldBegin('assetIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.assetIds))
            for iter841 in self.assetIds:
                oprot.writeString(iter841.encode('utf-8') if sys.version_info[0] == 2 else iter841)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.assetListId is None:
            raise TProtocolException(message='Required field assetListId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AssetListEntry(object):
    """
    Attributes:
     - assetListId
     - assetId

    """


    def __init__(self, assetListId=None, assetId=None,):
        self.assetListId = assetListId
        self.assetId = assetId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.assetListId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.assetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AssetListEntry')
        if self.assetListId is not None:
            oprot.writeFieldBegin('assetListId', TType.STRING, 1)
            oprot.writeString(self.assetListId.encode('utf-8') if sys.version_info[0] == 2 else self.assetListId)
            oprot.writeFieldEnd()
        if self.assetId is not None:
            oprot.writeFieldBegin('assetId', TType.STRING, 2)
            oprot.writeString(self.assetId.encode('utf-8') if sys.version_info[0] == 2 else self.assetId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.assetListId is None:
            raise TProtocolException(message='Required field assetListId is unset!')
        if self.assetId is None:
            raise TProtocolException(message='Required field assetId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TipOfTheDay(object):
    """
    Attributes:
     - tipOfTheDayId
     - eventId
     - text

    """


    def __init__(self, tipOfTheDayId=None, eventId=None, text=None,):
        self.tipOfTheDayId = tipOfTheDayId
        self.eventId = eventId
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tipOfTheDayId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.eventId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TipOfTheDay')
        if self.tipOfTheDayId is not None:
            oprot.writeFieldBegin('tipOfTheDayId', TType.STRING, 1)
            oprot.writeString(self.tipOfTheDayId.encode('utf-8') if sys.version_info[0] == 2 else self.tipOfTheDayId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.STRING, 2)
            oprot.writeString(self.eventId.encode('utf-8') if sys.version_info[0] == 2 else self.eventId)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 3)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Data(object):
    """
    Attributes:
     - campaigns
     - levels
     - levelScenes
     - enemySpawnPoints
     - purchaseBonuses
     - purchaseOffers
     - gemPasses
     - gemPacks
     - subscriptionPurchaseOffers
     - ranks
     - campaignOrder
     - heroBodies
     - rarities
     - heroStatistics
     - pushNotifications
     - scheduledGiftMessages
     - heroLevelXp
     - strengthProfiles
     - heroSoundProfiles
     - colors
     - quests
     - achievementEventIdHints
     - vipLevels
     - genericDialogTemplates
     - genericDialogs
     - badges
     - raidLeagues
     - heroStats
     - affinities
     - shopSections
     - eventSections
     - trainingCamps
     - trainingMethods
     - trainingMethodLinks
     - dailyHintItems
     - physicsProfiles
     - animationProfiles
     - soundClips
     - soundClipLists
     - minigameMusicThemes
     - currencyRankMaxEntries
     - heroSummons
     - currentConfigCleanerNum
     - configCleaners
     - autoConfigCleaners
     - currencyTargets
     - cashPurchaseInfos
     - chests
     - guaranteedHeroes
     - chestSequence
     - genders
     - guaranteedCurrencies
     - tutorials
     - tutorialSteps
     - assetListEntries
     - assetLists
     - currencies
     - currencyRecharges
     - attacks
     - radialProjectileAttacks
     - laserAttacks
     - shootAttacks
     - particlesAttacks
     - beamAttacks
     - runtimePlatforms
     - autoPurchaseListEntries
     - autoPurchaseLists
     - projectiles
     - skillLevelUpCostEntries
     - skillLevelUpGoldCosts
     - skillSlotMinLevelEntries
     - skillSlotMinimumLevels
     - skillStatProfiles
     - skills
     - projectileTrails
     - beamProjectiles
     - edgeElements
     - skillStatProfileEntries
     - requestInfo
     - safeFieldEntries
     - dangerFieldEntries
     - edgeElementEntries
     - edgeElementsProfiles
     - simulationTests
     - simulationTestEntries
     - offerPackShopItemTemplates
     - offerPackShopItems
     - offerPackZoomItemTemplates
     - offerPackZoomItems
     - visualEffectsProfiles
     - heroSkillIcons
     - prefabs
     - settings
     - events
     - effectLists
     - effectListEntries
     - hudProfiles
     - tipOfTheDays
     - androidNotificationChannels
     - iosNotificationThreads
     - localNotifications
     - locations
     - eventActivities
     - sectionHeadingTemplates
     - sectionHeadings
     - sectionTopperTemplates
     - sectionToppers
     - sectionBottomTemplates
     - sectionBottoms
     - inboxSections
     - guildListSections
     - guildListItemTemplates
     - guildListItems
     - guildMemberListItemTemplates
     - guildMemberListItems
     - guildMemberListSections
     - guildSectionItemTemplates
     - guildSectionItems
     - simplePopups
     - simplePopupTemplates
     - giftMessageCurrencyItems
     - giftMessageTemplates
     - giftMessages
     - giftMessagePopupTempates
     - giftMessagePopups
     - GuildSettingssKeyValue
     - enchantments
     - gearItems
     - evolutionProfiles
     - evolutionLevelProfiles_
     - evolutionProfileLevelLinks
     - passiveSkills
     - statBumpers
     - userIcons
     - userFrames
     - stringTable
     - boolTable
     - chatMessageTemplates
     - chatMessages
     - serverErrorDialogTemplates
     - serverErrorMessages
     - menus
     - guildSettings
     - guildMemberTypes
     - guildJoinTypes
     - guildEmblems
     - guildFrames
     - guildNameSuggestFirst
     - guildNameSuggestSecond
     - leagues
     - userNameSuggestFirst
     - userNameSuggestSecond
     - text

    """


    def __init__(self, campaigns=None, levels=None, levelScenes=None, enemySpawnPoints=None, purchaseBonuses=None, purchaseOffers=None, gemPasses=None, gemPacks=None, subscriptionPurchaseOffers=None, ranks=None, campaignOrder=None, heroBodies=None, rarities=None, heroStatistics=None, pushNotifications=None, scheduledGiftMessages=None, heroLevelXp=None, strengthProfiles=None, heroSoundProfiles=None, colors=None, quests=None, achievementEventIdHints=None, vipLevels=None, genericDialogTemplates=None, genericDialogs=None, badges=None, raidLeagues=None, heroStats=None, affinities=None, shopSections=None, eventSections=None, trainingCamps=None, trainingMethods=None, trainingMethodLinks=None, dailyHintItems=None, physicsProfiles=None, animationProfiles=None, soundClips=None, soundClipLists=None, minigameMusicThemes=None, currencyRankMaxEntries=None, heroSummons=None, currentConfigCleanerNum=None, configCleaners=None, autoConfigCleaners=None, currencyTargets=None, cashPurchaseInfos=None, chests=None, guaranteedHeroes=None, chestSequence=None, genders=None, guaranteedCurrencies=None, tutorials=None, tutorialSteps=None, assetListEntries=None, assetLists=None, currencies=None, currencyRecharges=None, attacks=None, radialProjectileAttacks=None, laserAttacks=None, shootAttacks=None, particlesAttacks=None, beamAttacks=None, runtimePlatforms=None, autoPurchaseListEntries=None, autoPurchaseLists=None, projectiles=None, skillLevelUpCostEntries=None, skillLevelUpGoldCosts=None, skillSlotMinLevelEntries=None, skillSlotMinimumLevels=None, skillStatProfiles=None, skills=None, projectileTrails=None, beamProjectiles=None, edgeElements=None, skillStatProfileEntries=None, requestInfo=None, safeFieldEntries=None, dangerFieldEntries=None, edgeElementEntries=None, edgeElementsProfiles=None, simulationTests=None, simulationTestEntries=None, offerPackShopItemTemplates=None, offerPackShopItems=None, offerPackZoomItemTemplates=None, offerPackZoomItems=None, visualEffectsProfiles=None, heroSkillIcons=None, prefabs=None, settings=None, events=None, effectLists=None, effectListEntries=None, hudProfiles=None, tipOfTheDays=None, androidNotificationChannels=None, iosNotificationThreads=None, localNotifications=None, locations=None, eventActivities=None, sectionHeadingTemplates=None, sectionHeadings=None, sectionTopperTemplates=None, sectionToppers=None, sectionBottomTemplates=None, sectionBottoms=None, inboxSections=None, guildListSections=None, guildListItemTemplates=None, guildListItems=None, guildMemberListItemTemplates=None, guildMemberListItems=None, guildMemberListSections=None, guildSectionItemTemplates=None, guildSectionItems=None, simplePopups=None, simplePopupTemplates=None, giftMessageCurrencyItems=None, giftMessageTemplates=None, giftMessages=None, giftMessagePopupTempates=None, giftMessagePopups=None, GuildSettingssKeyValue=None, enchantments=None, gearItems=None, evolutionProfiles=None, evolutionLevelProfiles_=None, evolutionProfileLevelLinks=None, passiveSkills=None, statBumpers=None, userIcons=None, userFrames=None, stringTable=None, boolTable=None, chatMessageTemplates=None, chatMessages=None, serverErrorDialogTemplates=None, serverErrorMessages=None, menus=None, guildSettings=None, guildMemberTypes=None, guildJoinTypes=None, guildEmblems=None, guildFrames=None, guildNameSuggestFirst=None, guildNameSuggestSecond=None, leagues=None, userNameSuggestFirst=None, userNameSuggestSecond=None, text=None,):
        self.campaigns = campaigns
        self.levels = levels
        self.levelScenes = levelScenes
        self.enemySpawnPoints = enemySpawnPoints
        self.purchaseBonuses = purchaseBonuses
        self.purchaseOffers = purchaseOffers
        self.gemPasses = gemPasses
        self.gemPacks = gemPacks
        self.subscriptionPurchaseOffers = subscriptionPurchaseOffers
        self.ranks = ranks
        self.campaignOrder = campaignOrder
        self.heroBodies = heroBodies
        self.rarities = rarities
        self.heroStatistics = heroStatistics
        self.pushNotifications = pushNotifications
        self.scheduledGiftMessages = scheduledGiftMessages
        self.heroLevelXp = heroLevelXp
        self.strengthProfiles = strengthProfiles
        self.heroSoundProfiles = heroSoundProfiles
        self.colors = colors
        self.quests = quests
        self.achievementEventIdHints = achievementEventIdHints
        self.vipLevels = vipLevels
        self.genericDialogTemplates = genericDialogTemplates
        self.genericDialogs = genericDialogs
        self.badges = badges
        self.raidLeagues = raidLeagues
        self.heroStats = heroStats
        self.affinities = affinities
        self.shopSections = shopSections
        self.eventSections = eventSections
        self.trainingCamps = trainingCamps
        self.trainingMethods = trainingMethods
        self.trainingMethodLinks = trainingMethodLinks
        self.dailyHintItems = dailyHintItems
        self.physicsProfiles = physicsProfiles
        self.animationProfiles = animationProfiles
        self.soundClips = soundClips
        self.soundClipLists = soundClipLists
        self.minigameMusicThemes = minigameMusicThemes
        self.currencyRankMaxEntries = currencyRankMaxEntries
        self.heroSummons = heroSummons
        self.currentConfigCleanerNum = currentConfigCleanerNum
        self.configCleaners = configCleaners
        self.autoConfigCleaners = autoConfigCleaners
        self.currencyTargets = currencyTargets
        self.cashPurchaseInfos = cashPurchaseInfos
        self.chests = chests
        self.guaranteedHeroes = guaranteedHeroes
        self.chestSequence = chestSequence
        self.genders = genders
        self.guaranteedCurrencies = guaranteedCurrencies
        self.tutorials = tutorials
        self.tutorialSteps = tutorialSteps
        self.assetListEntries = assetListEntries
        self.assetLists = assetLists
        self.currencies = currencies
        self.currencyRecharges = currencyRecharges
        self.attacks = attacks
        self.radialProjectileAttacks = radialProjectileAttacks
        self.laserAttacks = laserAttacks
        self.shootAttacks = shootAttacks
        self.particlesAttacks = particlesAttacks
        self.beamAttacks = beamAttacks
        self.runtimePlatforms = runtimePlatforms
        self.autoPurchaseListEntries = autoPurchaseListEntries
        self.autoPurchaseLists = autoPurchaseLists
        self.projectiles = projectiles
        self.skillLevelUpCostEntries = skillLevelUpCostEntries
        self.skillLevelUpGoldCosts = skillLevelUpGoldCosts
        self.skillSlotMinLevelEntries = skillSlotMinLevelEntries
        self.skillSlotMinimumLevels = skillSlotMinimumLevels
        self.skillStatProfiles = skillStatProfiles
        self.skills = skills
        self.projectileTrails = projectileTrails
        self.beamProjectiles = beamProjectiles
        self.edgeElements = edgeElements
        self.skillStatProfileEntries = skillStatProfileEntries
        self.requestInfo = requestInfo
        self.safeFieldEntries = safeFieldEntries
        self.dangerFieldEntries = dangerFieldEntries
        self.edgeElementEntries = edgeElementEntries
        self.edgeElementsProfiles = edgeElementsProfiles
        self.simulationTests = simulationTests
        self.simulationTestEntries = simulationTestEntries
        self.offerPackShopItemTemplates = offerPackShopItemTemplates
        self.offerPackShopItems = offerPackShopItems
        self.offerPackZoomItemTemplates = offerPackZoomItemTemplates
        self.offerPackZoomItems = offerPackZoomItems
        self.visualEffectsProfiles = visualEffectsProfiles
        self.heroSkillIcons = heroSkillIcons
        self.prefabs = prefabs
        self.settings = settings
        self.events = events
        self.effectLists = effectLists
        self.effectListEntries = effectListEntries
        self.hudProfiles = hudProfiles
        self.tipOfTheDays = tipOfTheDays
        self.androidNotificationChannels = androidNotificationChannels
        self.iosNotificationThreads = iosNotificationThreads
        self.localNotifications = localNotifications
        self.locations = locations
        self.eventActivities = eventActivities
        self.sectionHeadingTemplates = sectionHeadingTemplates
        self.sectionHeadings = sectionHeadings
        self.sectionTopperTemplates = sectionTopperTemplates
        self.sectionToppers = sectionToppers
        self.sectionBottomTemplates = sectionBottomTemplates
        self.sectionBottoms = sectionBottoms
        self.inboxSections = inboxSections
        self.guildListSections = guildListSections
        self.guildListItemTemplates = guildListItemTemplates
        self.guildListItems = guildListItems
        self.guildMemberListItemTemplates = guildMemberListItemTemplates
        self.guildMemberListItems = guildMemberListItems
        self.guildMemberListSections = guildMemberListSections
        self.guildSectionItemTemplates = guildSectionItemTemplates
        self.guildSectionItems = guildSectionItems
        self.simplePopups = simplePopups
        self.simplePopupTemplates = simplePopupTemplates
        self.giftMessageCurrencyItems = giftMessageCurrencyItems
        self.giftMessageTemplates = giftMessageTemplates
        self.giftMessages = giftMessages
        self.giftMessagePopupTempates = giftMessagePopupTempates
        self.giftMessagePopups = giftMessagePopups
        self.GuildSettingssKeyValue = GuildSettingssKeyValue
        self.enchantments = enchantments
        self.gearItems = gearItems
        self.evolutionProfiles = evolutionProfiles
        self.evolutionLevelProfiles_ = evolutionLevelProfiles_
        self.evolutionProfileLevelLinks = evolutionProfileLevelLinks
        self.passiveSkills = passiveSkills
        self.statBumpers = statBumpers
        self.userIcons = userIcons
        self.userFrames = userFrames
        self.stringTable = stringTable
        self.boolTable = boolTable
        self.chatMessageTemplates = chatMessageTemplates
        self.chatMessages = chatMessages
        self.serverErrorDialogTemplates = serverErrorDialogTemplates
        self.serverErrorMessages = serverErrorMessages
        self.menus = menus
        self.guildSettings = guildSettings
        self.guildMemberTypes = guildMemberTypes
        self.guildJoinTypes = guildJoinTypes
        self.guildEmblems = guildEmblems
        self.guildFrames = guildFrames
        self.guildNameSuggestFirst = guildNameSuggestFirst
        self.guildNameSuggestSecond = guildNameSuggestSecond
        self.leagues = leagues
        self.userNameSuggestFirst = userNameSuggestFirst
        self.userNameSuggestSecond = userNameSuggestSecond
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.campaigns = {}
                    (_ktype843, _vtype844, _size842) = iprot.readMapBegin()
                    for _i846 in range(_size842):
                        _key847 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val848 = Campaign()
                        _val848.read(iprot)
                        self.campaigns[_key847] = _val848
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.levels = {}
                    (_ktype850, _vtype851, _size849) = iprot.readMapBegin()
                    for _i853 in range(_size849):
                        _key854 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val855 = Level()
                        _val855.read(iprot)
                        self.levels[_key854] = _val855
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.levelScenes = {}
                    (_ktype857, _vtype858, _size856) = iprot.readMapBegin()
                    for _i860 in range(_size856):
                        _key861 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val862 = LevelScene()
                        _val862.read(iprot)
                        self.levelScenes[_key861] = _val862
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.enemySpawnPoints = []
                    (_etype866, _size863) = iprot.readListBegin()
                    for _i867 in range(_size863):
                        _elem868 = EnemySpawnPoint()
                        _elem868.read(iprot)
                        self.enemySpawnPoints.append(_elem868)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.purchaseBonuses = {}
                    (_ktype870, _vtype871, _size869) = iprot.readMapBegin()
                    for _i873 in range(_size869):
                        _key874 = iprot.readI32()
                        _val875 = PurchaseBonus()
                        _val875.read(iprot)
                        self.purchaseBonuses[_key874] = _val875
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.purchaseOffers = {}
                    (_ktype877, _vtype878, _size876) = iprot.readMapBegin()
                    for _i880 in range(_size876):
                        _key881 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val882 = PurchaseOffer()
                        _val882.read(iprot)
                        self.purchaseOffers[_key881] = _val882
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.gemPasses = {}
                    (_ktype884, _vtype885, _size883) = iprot.readMapBegin()
                    for _i887 in range(_size883):
                        _key888 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val889 = GemPass()
                        _val889.read(iprot)
                        self.gemPasses[_key888] = _val889
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.gemPacks = {}
                    (_ktype891, _vtype892, _size890) = iprot.readMapBegin()
                    for _i894 in range(_size890):
                        _key895 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val896 = GemPack()
                        _val896.read(iprot)
                        self.gemPacks[_key895] = _val896
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.subscriptionPurchaseOffers = {}
                    (_ktype898, _vtype899, _size897) = iprot.readMapBegin()
                    for _i901 in range(_size897):
                        _key902 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val903 = SubscriptionPurchaseOffer()
                        _val903.read(iprot)
                        self.subscriptionPurchaseOffers[_key902] = _val903
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.ranks = {}
                    (_ktype905, _vtype906, _size904) = iprot.readMapBegin()
                    for _i908 in range(_size904):
                        _key909 = iprot.readI32()
                        _val910 = Rank()
                        _val910.read(iprot)
                        self.ranks[_key909] = _val910
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.campaignOrder = []
                    (_etype914, _size911) = iprot.readListBegin()
                    for _i915 in range(_size911):
                        _elem916 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.campaignOrder.append(_elem916)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.heroBodies = {}
                    (_ktype918, _vtype919, _size917) = iprot.readMapBegin()
                    for _i921 in range(_size917):
                        _key922 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val923 = HeroBody()
                        _val923.read(iprot)
                        self.heroBodies[_key922] = _val923
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.rarities = {}
                    (_ktype925, _vtype926, _size924) = iprot.readMapBegin()
                    for _i928 in range(_size924):
                        _key929 = iprot.readI32()
                        _val930 = Rarity()
                        _val930.read(iprot)
                        self.rarities[_key929] = _val930
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.heroStatistics = {}
                    (_ktype932, _vtype933, _size931) = iprot.readMapBegin()
                    for _i935 in range(_size931):
                        _key936 = iprot.readI32()
                        _val937 = HeroStatistic()
                        _val937.read(iprot)
                        self.heroStatistics[_key936] = _val937
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.MAP:
                    self.pushNotifications = {}
                    (_ktype939, _vtype940, _size938) = iprot.readMapBegin()
                    for _i942 in range(_size938):
                        _key943 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val944 = PushNotification()
                        _val944.read(iprot)
                        self.pushNotifications[_key943] = _val944
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.scheduledGiftMessages = []
                    (_etype948, _size945) = iprot.readListBegin()
                    for _i949 in range(_size945):
                        _elem950 = ScheduledGiftMessage()
                        _elem950.read(iprot)
                        self.scheduledGiftMessages.append(_elem950)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.heroLevelXp = []
                    (_etype954, _size951) = iprot.readListBegin()
                    for _i955 in range(_size951):
                        _elem956 = HeroLevelXp()
                        _elem956.read(iprot)
                        self.heroLevelXp.append(_elem956)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.strengthProfiles = {}
                    (_ktype958, _vtype959, _size957) = iprot.readMapBegin()
                    for _i961 in range(_size957):
                        _key962 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val963 = StrengthProfile()
                        _val963.read(iprot)
                        self.strengthProfiles[_key962] = _val963
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.MAP:
                    self.heroSoundProfiles = {}
                    (_ktype965, _vtype966, _size964) = iprot.readMapBegin()
                    for _i968 in range(_size964):
                        _key969 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val970 = HeroSoundProfile()
                        _val970.read(iprot)
                        self.heroSoundProfiles[_key969] = _val970
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.MAP:
                    self.colors = {}
                    (_ktype972, _vtype973, _size971) = iprot.readMapBegin()
                    for _i975 in range(_size971):
                        _key976 = iprot.readI32()
                        _val977 = Color()
                        _val977.read(iprot)
                        self.colors[_key976] = _val977
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.MAP:
                    self.quests = {}
                    (_ktype979, _vtype980, _size978) = iprot.readMapBegin()
                    for _i982 in range(_size978):
                        _key983 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val984 = Achievement()
                        _val984.read(iprot)
                        self.quests[_key983] = _val984
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.MAP:
                    self.achievementEventIdHints = {}
                    (_ktype986, _vtype987, _size985) = iprot.readMapBegin()
                    for _i989 in range(_size985):
                        _key990 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val991 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.achievementEventIdHints[_key990] = _val991
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.vipLevels = []
                    (_etype995, _size992) = iprot.readListBegin()
                    for _i996 in range(_size992):
                        _elem997 = VipLevel()
                        _elem997.read(iprot)
                        self.vipLevels.append(_elem997)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.MAP:
                    self.genericDialogTemplates = {}
                    (_ktype999, _vtype1000, _size998) = iprot.readMapBegin()
                    for _i1002 in range(_size998):
                        _key1003 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1004 = GenericDialogTemplate()
                        _val1004.read(iprot)
                        self.genericDialogTemplates[_key1003] = _val1004
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.MAP:
                    self.genericDialogs = {}
                    (_ktype1006, _vtype1007, _size1005) = iprot.readMapBegin()
                    for _i1009 in range(_size1005):
                        _key1010 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1011 = GenericDialog()
                        _val1011.read(iprot)
                        self.genericDialogs[_key1010] = _val1011
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.MAP:
                    self.badges = {}
                    (_ktype1013, _vtype1014, _size1012) = iprot.readMapBegin()
                    for _i1016 in range(_size1012):
                        _key1017 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1018 = Badge()
                        _val1018.read(iprot)
                        self.badges[_key1017] = _val1018
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.MAP:
                    self.raidLeagues = {}
                    (_ktype1020, _vtype1021, _size1019) = iprot.readMapBegin()
                    for _i1023 in range(_size1019):
                        _key1024 = iprot.readI32()
                        _val1025 = RaidLeague()
                        _val1025.read(iprot)
                        self.raidLeagues[_key1024] = _val1025
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.MAP:
                    self.heroStats = {}
                    (_ktype1027, _vtype1028, _size1026) = iprot.readMapBegin()
                    for _i1030 in range(_size1026):
                        _key1031 = iprot.readI32()
                        _val1032 = HeroStat()
                        _val1032.read(iprot)
                        self.heroStats[_key1031] = _val1032
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.MAP:
                    self.affinities = {}
                    (_ktype1034, _vtype1035, _size1033) = iprot.readMapBegin()
                    for _i1037 in range(_size1033):
                        _key1038 = iprot.readI32()
                        _val1039 = Affinity()
                        _val1039.read(iprot)
                        self.affinities[_key1038] = _val1039
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.MAP:
                    self.shopSections = {}
                    (_ktype1041, _vtype1042, _size1040) = iprot.readMapBegin()
                    for _i1044 in range(_size1040):
                        _key1045 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1046 = ShopSection()
                        _val1046.read(iprot)
                        self.shopSections[_key1045] = _val1046
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.MAP:
                    self.eventSections = {}
                    (_ktype1048, _vtype1049, _size1047) = iprot.readMapBegin()
                    for _i1051 in range(_size1047):
                        _key1052 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1053 = EventSection()
                        _val1053.read(iprot)
                        self.eventSections[_key1052] = _val1053
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.MAP:
                    self.trainingCamps = {}
                    (_ktype1055, _vtype1056, _size1054) = iprot.readMapBegin()
                    for _i1058 in range(_size1054):
                        _key1059 = iprot.readI32()
                        _val1060 = TrainingCamp()
                        _val1060.read(iprot)
                        self.trainingCamps[_key1059] = _val1060
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.MAP:
                    self.trainingMethods = {}
                    (_ktype1062, _vtype1063, _size1061) = iprot.readMapBegin()
                    for _i1065 in range(_size1061):
                        _key1066 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1067 = TrainingMethod()
                        _val1067.read(iprot)
                        self.trainingMethods[_key1066] = _val1067
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.LIST:
                    self.trainingMethodLinks = []
                    (_etype1071, _size1068) = iprot.readListBegin()
                    for _i1072 in range(_size1068):
                        _elem1073 = TrainingMethodLink()
                        _elem1073.read(iprot)
                        self.trainingMethodLinks.append(_elem1073)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.LIST:
                    self.dailyHintItems = []
                    (_etype1077, _size1074) = iprot.readListBegin()
                    for _i1078 in range(_size1074):
                        _elem1079 = DailyHintItem()
                        _elem1079.read(iprot)
                        self.dailyHintItems.append(_elem1079)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.MAP:
                    self.physicsProfiles = {}
                    (_ktype1081, _vtype1082, _size1080) = iprot.readMapBegin()
                    for _i1084 in range(_size1080):
                        _key1085 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1086 = PhysicsProfile()
                        _val1086.read(iprot)
                        self.physicsProfiles[_key1085] = _val1086
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.MAP:
                    self.animationProfiles = {}
                    (_ktype1088, _vtype1089, _size1087) = iprot.readMapBegin()
                    for _i1091 in range(_size1087):
                        _key1092 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1093 = AnimationProfile()
                        _val1093.read(iprot)
                        self.animationProfiles[_key1092] = _val1093
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.MAP:
                    self.soundClips = {}
                    (_ktype1095, _vtype1096, _size1094) = iprot.readMapBegin()
                    for _i1098 in range(_size1094):
                        _key1099 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1100 = SoundClip()
                        _val1100.read(iprot)
                        self.soundClips[_key1099] = _val1100
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.MAP:
                    self.soundClipLists = {}
                    (_ktype1102, _vtype1103, _size1101) = iprot.readMapBegin()
                    for _i1105 in range(_size1101):
                        _key1106 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1107 = SoundClipList()
                        _val1107.read(iprot)
                        self.soundClipLists[_key1106] = _val1107
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.MAP:
                    self.minigameMusicThemes = {}
                    (_ktype1109, _vtype1110, _size1108) = iprot.readMapBegin()
                    for _i1112 in range(_size1108):
                        _key1113 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1114 = MinigameMusicTheme()
                        _val1114.read(iprot)
                        self.minigameMusicThemes[_key1113] = _val1114
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.LIST:
                    self.currencyRankMaxEntries = []
                    (_etype1118, _size1115) = iprot.readListBegin()
                    for _i1119 in range(_size1115):
                        _elem1120 = CurrencyRankMaxEntry()
                        _elem1120.read(iprot)
                        self.currencyRankMaxEntries.append(_elem1120)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.MAP:
                    self.heroSummons = {}
                    (_ktype1122, _vtype1123, _size1121) = iprot.readMapBegin()
                    for _i1125 in range(_size1121):
                        _key1126 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1127 = HeroSummon()
                        _val1127.read(iprot)
                        self.heroSummons[_key1126] = _val1127
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.currentConfigCleanerNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.MAP:
                    self.configCleaners = {}
                    (_ktype1129, _vtype1130, _size1128) = iprot.readMapBegin()
                    for _i1132 in range(_size1128):
                        _key1133 = iprot.readI32()
                        _val1134 = ConfigCleaner()
                        _val1134.read(iprot)
                        self.configCleaners[_key1133] = _val1134
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.MAP:
                    self.autoConfigCleaners = {}
                    (_ktype1136, _vtype1137, _size1135) = iprot.readMapBegin()
                    for _i1139 in range(_size1135):
                        _key1140 = iprot.readI32()
                        _val1141 = AutoConfigCleaner()
                        _val1141.read(iprot)
                        self.autoConfigCleaners[_key1140] = _val1141
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.MAP:
                    self.currencyTargets = {}
                    (_ktype1143, _vtype1144, _size1142) = iprot.readMapBegin()
                    for _i1146 in range(_size1142):
                        _key1147 = iprot.readI32()
                        _val1148 = CurrencyTarget()
                        _val1148.read(iprot)
                        self.currencyTargets[_key1147] = _val1148
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.MAP:
                    self.cashPurchaseInfos = {}
                    (_ktype1150, _vtype1151, _size1149) = iprot.readMapBegin()
                    for _i1153 in range(_size1149):
                        _key1154 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1155 = CashPurchaseInfo()
                        _val1155.read(iprot)
                        self.cashPurchaseInfos[_key1154] = _val1155
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.MAP:
                    self.chests = {}
                    (_ktype1157, _vtype1158, _size1156) = iprot.readMapBegin()
                    for _i1160 in range(_size1156):
                        _key1161 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1162 = Chest()
                        _val1162.read(iprot)
                        self.chests[_key1161] = _val1162
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.LIST:
                    self.guaranteedHeroes = []
                    (_etype1166, _size1163) = iprot.readListBegin()
                    for _i1167 in range(_size1163):
                        _elem1168 = GuaranteedHero()
                        _elem1168.read(iprot)
                        self.guaranteedHeroes.append(_elem1168)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.LIST:
                    self.chestSequence = []
                    (_etype1172, _size1169) = iprot.readListBegin()
                    for _i1173 in range(_size1169):
                        _elem1174 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.chestSequence.append(_elem1174)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.MAP:
                    self.genders = {}
                    (_ktype1176, _vtype1177, _size1175) = iprot.readMapBegin()
                    for _i1179 in range(_size1175):
                        _key1180 = iprot.readI32()
                        _val1181 = Gender()
                        _val1181.read(iprot)
                        self.genders[_key1180] = _val1181
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.LIST:
                    self.guaranteedCurrencies = []
                    (_etype1185, _size1182) = iprot.readListBegin()
                    for _i1186 in range(_size1182):
                        _elem1187 = GuaranteedCurrency()
                        _elem1187.read(iprot)
                        self.guaranteedCurrencies.append(_elem1187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 56:
                if ftype == TType.MAP:
                    self.tutorials = {}
                    (_ktype1189, _vtype1190, _size1188) = iprot.readMapBegin()
                    for _i1192 in range(_size1188):
                        _key1193 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1194 = Tutorial()
                        _val1194.read(iprot)
                        self.tutorials[_key1193] = _val1194
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 57:
                if ftype == TType.MAP:
                    self.tutorialSteps = {}
                    (_ktype1196, _vtype1197, _size1195) = iprot.readMapBegin()
                    for _i1199 in range(_size1195):
                        _key1200 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1201 = TutorialStep()
                        _val1201.read(iprot)
                        self.tutorialSteps[_key1200] = _val1201
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 59:
                if ftype == TType.LIST:
                    self.assetListEntries = []
                    (_etype1205, _size1202) = iprot.readListBegin()
                    for _i1206 in range(_size1202):
                        _elem1207 = AssetListEntry()
                        _elem1207.read(iprot)
                        self.assetListEntries.append(_elem1207)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.MAP:
                    self.assetLists = {}
                    (_ktype1209, _vtype1210, _size1208) = iprot.readMapBegin()
                    for _i1212 in range(_size1208):
                        _key1213 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1214 = AssetList()
                        _val1214.read(iprot)
                        self.assetLists[_key1213] = _val1214
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.MAP:
                    self.currencies = {}
                    (_ktype1216, _vtype1217, _size1215) = iprot.readMapBegin()
                    for _i1219 in range(_size1215):
                        _key1220 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1221 = Currency()
                        _val1221.read(iprot)
                        self.currencies[_key1220] = _val1221
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.MAP:
                    self.currencyRecharges = {}
                    (_ktype1223, _vtype1224, _size1222) = iprot.readMapBegin()
                    for _i1226 in range(_size1222):
                        _key1227 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1228 = CurrencyRecharge()
                        _val1228.read(iprot)
                        self.currencyRecharges[_key1227] = _val1228
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 64:
                if ftype == TType.MAP:
                    self.attacks = {}
                    (_ktype1230, _vtype1231, _size1229) = iprot.readMapBegin()
                    for _i1233 in range(_size1229):
                        _key1234 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1235 = Attack()
                        _val1235.read(iprot)
                        self.attacks[_key1234] = _val1235
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.MAP:
                    self.radialProjectileAttacks = {}
                    (_ktype1237, _vtype1238, _size1236) = iprot.readMapBegin()
                    for _i1240 in range(_size1236):
                        _key1241 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1242 = RadialProjectileAttack()
                        _val1242.read(iprot)
                        self.radialProjectileAttacks[_key1241] = _val1242
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.MAP:
                    self.laserAttacks = {}
                    (_ktype1244, _vtype1245, _size1243) = iprot.readMapBegin()
                    for _i1247 in range(_size1243):
                        _key1248 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1249 = LaserAttack()
                        _val1249.read(iprot)
                        self.laserAttacks[_key1248] = _val1249
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.MAP:
                    self.shootAttacks = {}
                    (_ktype1251, _vtype1252, _size1250) = iprot.readMapBegin()
                    for _i1254 in range(_size1250):
                        _key1255 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1256 = ShootAttack()
                        _val1256.read(iprot)
                        self.shootAttacks[_key1255] = _val1256
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.MAP:
                    self.particlesAttacks = {}
                    (_ktype1258, _vtype1259, _size1257) = iprot.readMapBegin()
                    for _i1261 in range(_size1257):
                        _key1262 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1263 = ParticlesAttack()
                        _val1263.read(iprot)
                        self.particlesAttacks[_key1262] = _val1263
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.MAP:
                    self.beamAttacks = {}
                    (_ktype1265, _vtype1266, _size1264) = iprot.readMapBegin()
                    for _i1268 in range(_size1264):
                        _key1269 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1270 = BeamAttack()
                        _val1270.read(iprot)
                        self.beamAttacks[_key1269] = _val1270
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.MAP:
                    self.runtimePlatforms = {}
                    (_ktype1272, _vtype1273, _size1271) = iprot.readMapBegin()
                    for _i1275 in range(_size1271):
                        _key1276 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1277 = RuntimePlatform()
                        _val1277.read(iprot)
                        self.runtimePlatforms[_key1276] = _val1277
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.LIST:
                    self.autoPurchaseListEntries = []
                    (_etype1281, _size1278) = iprot.readListBegin()
                    for _i1282 in range(_size1278):
                        _elem1283 = AutoPurchaseListEntry()
                        _elem1283.read(iprot)
                        self.autoPurchaseListEntries.append(_elem1283)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.MAP:
                    self.autoPurchaseLists = {}
                    (_ktype1285, _vtype1286, _size1284) = iprot.readMapBegin()
                    for _i1288 in range(_size1284):
                        _key1289 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1290 = AutoPurchaseList()
                        _val1290.read(iprot)
                        self.autoPurchaseLists[_key1289] = _val1290
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.MAP:
                    self.projectiles = {}
                    (_ktype1292, _vtype1293, _size1291) = iprot.readMapBegin()
                    for _i1295 in range(_size1291):
                        _key1296 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1297 = Projectile()
                        _val1297.read(iprot)
                        self.projectiles[_key1296] = _val1297
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.LIST:
                    self.skillLevelUpCostEntries = []
                    (_etype1301, _size1298) = iprot.readListBegin()
                    for _i1302 in range(_size1298):
                        _elem1303 = SkillLevelUpCostEntry()
                        _elem1303.read(iprot)
                        self.skillLevelUpCostEntries.append(_elem1303)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.LIST:
                    self.skillLevelUpGoldCosts = []
                    (_etype1307, _size1304) = iprot.readListBegin()
                    for _i1308 in range(_size1304):
                        _elem1309 = iprot.readI32()
                        self.skillLevelUpGoldCosts.append(_elem1309)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.LIST:
                    self.skillSlotMinLevelEntries = []
                    (_etype1313, _size1310) = iprot.readListBegin()
                    for _i1314 in range(_size1310):
                        _elem1315 = SkillSlotMinLevelEntry()
                        _elem1315.read(iprot)
                        self.skillSlotMinLevelEntries.append(_elem1315)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.LIST:
                    self.skillSlotMinimumLevels = []
                    (_etype1319, _size1316) = iprot.readListBegin()
                    for _i1320 in range(_size1316):
                        _elem1321 = iprot.readI32()
                        self.skillSlotMinimumLevels.append(_elem1321)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 78:
                if ftype == TType.MAP:
                    self.skillStatProfiles = {}
                    (_ktype1323, _vtype1324, _size1322) = iprot.readMapBegin()
                    for _i1326 in range(_size1322):
                        _key1327 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1328 = SkillStatProfile()
                        _val1328.read(iprot)
                        self.skillStatProfiles[_key1327] = _val1328
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.MAP:
                    self.skills = {}
                    (_ktype1330, _vtype1331, _size1329) = iprot.readMapBegin()
                    for _i1333 in range(_size1329):
                        _key1334 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1335 = Skill()
                        _val1335.read(iprot)
                        self.skills[_key1334] = _val1335
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.MAP:
                    self.projectileTrails = {}
                    (_ktype1337, _vtype1338, _size1336) = iprot.readMapBegin()
                    for _i1340 in range(_size1336):
                        _key1341 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1342 = ProjectileTrail()
                        _val1342.read(iprot)
                        self.projectileTrails[_key1341] = _val1342
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.MAP:
                    self.beamProjectiles = {}
                    (_ktype1344, _vtype1345, _size1343) = iprot.readMapBegin()
                    for _i1347 in range(_size1343):
                        _key1348 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1349 = BeamProjectile()
                        _val1349.read(iprot)
                        self.beamProjectiles[_key1348] = _val1349
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.MAP:
                    self.edgeElements = {}
                    (_ktype1351, _vtype1352, _size1350) = iprot.readMapBegin()
                    for _i1354 in range(_size1350):
                        _key1355 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1356 = EdgeElement()
                        _val1356.read(iprot)
                        self.edgeElements[_key1355] = _val1356
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.LIST:
                    self.skillStatProfileEntries = []
                    (_etype1360, _size1357) = iprot.readListBegin()
                    for _i1361 in range(_size1357):
                        _elem1362 = SkillStatProfileEntry()
                        _elem1362.read(iprot)
                        self.skillStatProfileEntries.append(_elem1362)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.MAP:
                    self.requestInfo = {}
                    (_ktype1364, _vtype1365, _size1363) = iprot.readMapBegin()
                    for _i1367 in range(_size1363):
                        _key1368 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1369 = RequestInfo()
                        _val1369.read(iprot)
                        self.requestInfo[_key1368] = _val1369
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.LIST:
                    self.safeFieldEntries = []
                    (_etype1373, _size1370) = iprot.readListBegin()
                    for _i1374 in range(_size1370):
                        _elem1375 = RequestInfoFieldEntry()
                        _elem1375.read(iprot)
                        self.safeFieldEntries.append(_elem1375)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.LIST:
                    self.dangerFieldEntries = []
                    (_etype1379, _size1376) = iprot.readListBegin()
                    for _i1380 in range(_size1376):
                        _elem1381 = RequestInfoFieldEntry()
                        _elem1381.read(iprot)
                        self.dangerFieldEntries.append(_elem1381)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 88:
                if ftype == TType.LIST:
                    self.edgeElementEntries = []
                    (_etype1385, _size1382) = iprot.readListBegin()
                    for _i1386 in range(_size1382):
                        _elem1387 = EdgeElementEntry()
                        _elem1387.read(iprot)
                        self.edgeElementEntries.append(_elem1387)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 89:
                if ftype == TType.MAP:
                    self.edgeElementsProfiles = {}
                    (_ktype1389, _vtype1390, _size1388) = iprot.readMapBegin()
                    for _i1392 in range(_size1388):
                        _key1393 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1394 = EdgeElementsProfile()
                        _val1394.read(iprot)
                        self.edgeElementsProfiles[_key1393] = _val1394
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.MAP:
                    self.simulationTests = {}
                    (_ktype1396, _vtype1397, _size1395) = iprot.readMapBegin()
                    for _i1399 in range(_size1395):
                        _key1400 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1401 = SimulationTest()
                        _val1401.read(iprot)
                        self.simulationTests[_key1400] = _val1401
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.LIST:
                    self.simulationTestEntries = []
                    (_etype1405, _size1402) = iprot.readListBegin()
                    for _i1406 in range(_size1402):
                        _elem1407 = SimulationTestEntry()
                        _elem1407.read(iprot)
                        self.simulationTestEntries.append(_elem1407)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.MAP:
                    self.offerPackShopItemTemplates = {}
                    (_ktype1409, _vtype1410, _size1408) = iprot.readMapBegin()
                    for _i1412 in range(_size1408):
                        _key1413 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1414 = OfferPackShopItemTemplate()
                        _val1414.read(iprot)
                        self.offerPackShopItemTemplates[_key1413] = _val1414
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 94:
                if ftype == TType.MAP:
                    self.offerPackShopItems = {}
                    (_ktype1416, _vtype1417, _size1415) = iprot.readMapBegin()
                    for _i1419 in range(_size1415):
                        _key1420 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1421 = OfferPackShopItem()
                        _val1421.read(iprot)
                        self.offerPackShopItems[_key1420] = _val1421
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 95:
                if ftype == TType.MAP:
                    self.offerPackZoomItemTemplates = {}
                    (_ktype1423, _vtype1424, _size1422) = iprot.readMapBegin()
                    for _i1426 in range(_size1422):
                        _key1427 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1428 = OfferPackZoomItemTemplate()
                        _val1428.read(iprot)
                        self.offerPackZoomItemTemplates[_key1427] = _val1428
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 96:
                if ftype == TType.MAP:
                    self.offerPackZoomItems = {}
                    (_ktype1430, _vtype1431, _size1429) = iprot.readMapBegin()
                    for _i1433 in range(_size1429):
                        _key1434 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1435 = OfferPackZoomItem()
                        _val1435.read(iprot)
                        self.offerPackZoomItems[_key1434] = _val1435
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 98:
                if ftype == TType.MAP:
                    self.visualEffectsProfiles = {}
                    (_ktype1437, _vtype1438, _size1436) = iprot.readMapBegin()
                    for _i1440 in range(_size1436):
                        _key1441 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1442 = VisualEffectsProfile()
                        _val1442.read(iprot)
                        self.visualEffectsProfiles[_key1441] = _val1442
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 100:
                if ftype == TType.MAP:
                    self.heroSkillIcons = {}
                    (_ktype1444, _vtype1445, _size1443) = iprot.readMapBegin()
                    for _i1447 in range(_size1443):
                        _key1448 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1449 = HeroSkillIcon()
                        _val1449.read(iprot)
                        self.heroSkillIcons[_key1448] = _val1449
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 101:
                if ftype == TType.MAP:
                    self.prefabs = {}
                    (_ktype1451, _vtype1452, _size1450) = iprot.readMapBegin()
                    for _i1454 in range(_size1450):
                        _key1455 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1456 = Prefab()
                        _val1456.read(iprot)
                        self.prefabs[_key1455] = _val1456
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 111:
                if ftype == TType.STRUCT:
                    self.settings = Settings()
                    self.settings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.MAP:
                    self.events = {}
                    (_ktype1458, _vtype1459, _size1457) = iprot.readMapBegin()
                    for _i1461 in range(_size1457):
                        _key1462 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1463 = Event()
                        _val1463.read(iprot)
                        self.events[_key1462] = _val1463
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 121:
                if ftype == TType.MAP:
                    self.effectLists = {}
                    (_ktype1465, _vtype1466, _size1464) = iprot.readMapBegin()
                    for _i1468 in range(_size1464):
                        _key1469 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1470 = EffectList()
                        _val1470.read(iprot)
                        self.effectLists[_key1469] = _val1470
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 122:
                if ftype == TType.LIST:
                    self.effectListEntries = []
                    (_etype1474, _size1471) = iprot.readListBegin()
                    for _i1475 in range(_size1471):
                        _elem1476 = EffectListEntry()
                        _elem1476.read(iprot)
                        self.effectListEntries.append(_elem1476)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 123:
                if ftype == TType.MAP:
                    self.hudProfiles = {}
                    (_ktype1478, _vtype1479, _size1477) = iprot.readMapBegin()
                    for _i1481 in range(_size1477):
                        _key1482 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1483 = HudProfile()
                        _val1483.read(iprot)
                        self.hudProfiles[_key1482] = _val1483
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 124:
                if ftype == TType.MAP:
                    self.tipOfTheDays = {}
                    (_ktype1485, _vtype1486, _size1484) = iprot.readMapBegin()
                    for _i1488 in range(_size1484):
                        _key1489 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1490 = TipOfTheDay()
                        _val1490.read(iprot)
                        self.tipOfTheDays[_key1489] = _val1490
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 125:
                if ftype == TType.MAP:
                    self.androidNotificationChannels = {}
                    (_ktype1492, _vtype1493, _size1491) = iprot.readMapBegin()
                    for _i1495 in range(_size1491):
                        _key1496 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1497 = AndroidNotificationChannel()
                        _val1497.read(iprot)
                        self.androidNotificationChannels[_key1496] = _val1497
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 126:
                if ftype == TType.MAP:
                    self.iosNotificationThreads = {}
                    (_ktype1499, _vtype1500, _size1498) = iprot.readMapBegin()
                    for _i1502 in range(_size1498):
                        _key1503 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1504 = IosNotificationThread()
                        _val1504.read(iprot)
                        self.iosNotificationThreads[_key1503] = _val1504
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 127:
                if ftype == TType.MAP:
                    self.localNotifications = {}
                    (_ktype1506, _vtype1507, _size1505) = iprot.readMapBegin()
                    for _i1509 in range(_size1505):
                        _key1510 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1511 = LocalNotification()
                        _val1511.read(iprot)
                        self.localNotifications[_key1510] = _val1511
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.MAP:
                    self.locations = {}
                    (_ktype1513, _vtype1514, _size1512) = iprot.readMapBegin()
                    for _i1516 in range(_size1512):
                        _key1517 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1518 = Location()
                        _val1518.read(iprot)
                        self.locations[_key1517] = _val1518
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 131:
                if ftype == TType.MAP:
                    self.eventActivities = {}
                    (_ktype1520, _vtype1521, _size1519) = iprot.readMapBegin()
                    for _i1523 in range(_size1519):
                        _key1524 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1525 = EventActivity()
                        _val1525.read(iprot)
                        self.eventActivities[_key1524] = _val1525
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.MAP:
                    self.sectionHeadingTemplates = {}
                    (_ktype1527, _vtype1528, _size1526) = iprot.readMapBegin()
                    for _i1530 in range(_size1526):
                        _key1531 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1532 = SectionHeadingTemplate()
                        _val1532.read(iprot)
                        self.sectionHeadingTemplates[_key1531] = _val1532
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 141:
                if ftype == TType.MAP:
                    self.sectionHeadings = {}
                    (_ktype1534, _vtype1535, _size1533) = iprot.readMapBegin()
                    for _i1537 in range(_size1533):
                        _key1538 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1539 = SectionHeading()
                        _val1539.read(iprot)
                        self.sectionHeadings[_key1538] = _val1539
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 142:
                if ftype == TType.MAP:
                    self.sectionTopperTemplates = {}
                    (_ktype1541, _vtype1542, _size1540) = iprot.readMapBegin()
                    for _i1544 in range(_size1540):
                        _key1545 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1546 = SectionTopperTemplate()
                        _val1546.read(iprot)
                        self.sectionTopperTemplates[_key1545] = _val1546
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 143:
                if ftype == TType.MAP:
                    self.sectionToppers = {}
                    (_ktype1548, _vtype1549, _size1547) = iprot.readMapBegin()
                    for _i1551 in range(_size1547):
                        _key1552 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1553 = SectionTopper()
                        _val1553.read(iprot)
                        self.sectionToppers[_key1552] = _val1553
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 144:
                if ftype == TType.MAP:
                    self.sectionBottomTemplates = {}
                    (_ktype1555, _vtype1556, _size1554) = iprot.readMapBegin()
                    for _i1558 in range(_size1554):
                        _key1559 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1560 = SectionBottomTemplate()
                        _val1560.read(iprot)
                        self.sectionBottomTemplates[_key1559] = _val1560
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 145:
                if ftype == TType.MAP:
                    self.sectionBottoms = {}
                    (_ktype1562, _vtype1563, _size1561) = iprot.readMapBegin()
                    for _i1565 in range(_size1561):
                        _key1566 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1567 = SectionBottom()
                        _val1567.read(iprot)
                        self.sectionBottoms[_key1566] = _val1567
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 146:
                if ftype == TType.MAP:
                    self.inboxSections = {}
                    (_ktype1569, _vtype1570, _size1568) = iprot.readMapBegin()
                    for _i1572 in range(_size1568):
                        _key1573 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1574 = InboxSection()
                        _val1574.read(iprot)
                        self.inboxSections[_key1573] = _val1574
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 147:
                if ftype == TType.MAP:
                    self.guildListSections = {}
                    (_ktype1576, _vtype1577, _size1575) = iprot.readMapBegin()
                    for _i1579 in range(_size1575):
                        _key1580 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1581 = GuildListSection()
                        _val1581.read(iprot)
                        self.guildListSections[_key1580] = _val1581
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 148:
                if ftype == TType.MAP:
                    self.guildListItemTemplates = {}
                    (_ktype1583, _vtype1584, _size1582) = iprot.readMapBegin()
                    for _i1586 in range(_size1582):
                        _key1587 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1588 = GuildListItemTemplate()
                        _val1588.read(iprot)
                        self.guildListItemTemplates[_key1587] = _val1588
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 149:
                if ftype == TType.MAP:
                    self.guildListItems = {}
                    (_ktype1590, _vtype1591, _size1589) = iprot.readMapBegin()
                    for _i1593 in range(_size1589):
                        _key1594 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1595 = GuildListItem()
                        _val1595.read(iprot)
                        self.guildListItems[_key1594] = _val1595
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 150:
                if ftype == TType.MAP:
                    self.guildMemberListItemTemplates = {}
                    (_ktype1597, _vtype1598, _size1596) = iprot.readMapBegin()
                    for _i1600 in range(_size1596):
                        _key1601 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1602 = GuildMemberListItemTemplate()
                        _val1602.read(iprot)
                        self.guildMemberListItemTemplates[_key1601] = _val1602
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 151:
                if ftype == TType.MAP:
                    self.guildMemberListItems = {}
                    (_ktype1604, _vtype1605, _size1603) = iprot.readMapBegin()
                    for _i1607 in range(_size1603):
                        _key1608 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1609 = GuildMemberListItem()
                        _val1609.read(iprot)
                        self.guildMemberListItems[_key1608] = _val1609
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 152:
                if ftype == TType.MAP:
                    self.guildMemberListSections = {}
                    (_ktype1611, _vtype1612, _size1610) = iprot.readMapBegin()
                    for _i1614 in range(_size1610):
                        _key1615 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1616 = GuildMemberListSection()
                        _val1616.read(iprot)
                        self.guildMemberListSections[_key1615] = _val1616
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 153:
                if ftype == TType.MAP:
                    self.guildSectionItemTemplates = {}
                    (_ktype1618, _vtype1619, _size1617) = iprot.readMapBegin()
                    for _i1621 in range(_size1617):
                        _key1622 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1623 = GuildSectionItemTemplate()
                        _val1623.read(iprot)
                        self.guildSectionItemTemplates[_key1622] = _val1623
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 154:
                if ftype == TType.MAP:
                    self.guildSectionItems = {}
                    (_ktype1625, _vtype1626, _size1624) = iprot.readMapBegin()
                    for _i1628 in range(_size1624):
                        _key1629 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1630 = GuildSectionItem()
                        _val1630.read(iprot)
                        self.guildSectionItems[_key1629] = _val1630
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 155:
                if ftype == TType.MAP:
                    self.simplePopups = {}
                    (_ktype1632, _vtype1633, _size1631) = iprot.readMapBegin()
                    for _i1635 in range(_size1631):
                        _key1636 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1637 = SimplePopup()
                        _val1637.read(iprot)
                        self.simplePopups[_key1636] = _val1637
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 156:
                if ftype == TType.MAP:
                    self.simplePopupTemplates = {}
                    (_ktype1639, _vtype1640, _size1638) = iprot.readMapBegin()
                    for _i1642 in range(_size1638):
                        _key1643 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1644 = SimplePopupTemplate()
                        _val1644.read(iprot)
                        self.simplePopupTemplates[_key1643] = _val1644
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 160:
                if ftype == TType.LIST:
                    self.giftMessageCurrencyItems = []
                    (_etype1648, _size1645) = iprot.readListBegin()
                    for _i1649 in range(_size1645):
                        _elem1650 = GiftMessageCurrencyItem()
                        _elem1650.read(iprot)
                        self.giftMessageCurrencyItems.append(_elem1650)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 161:
                if ftype == TType.MAP:
                    self.giftMessageTemplates = {}
                    (_ktype1652, _vtype1653, _size1651) = iprot.readMapBegin()
                    for _i1655 in range(_size1651):
                        _key1656 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1657 = GiftMessageTemplate()
                        _val1657.read(iprot)
                        self.giftMessageTemplates[_key1656] = _val1657
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 162:
                if ftype == TType.MAP:
                    self.giftMessages = {}
                    (_ktype1659, _vtype1660, _size1658) = iprot.readMapBegin()
                    for _i1662 in range(_size1658):
                        _key1663 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1664 = GiftMessage()
                        _val1664.read(iprot)
                        self.giftMessages[_key1663] = _val1664
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 163:
                if ftype == TType.MAP:
                    self.giftMessagePopupTempates = {}
                    (_ktype1666, _vtype1667, _size1665) = iprot.readMapBegin()
                    for _i1669 in range(_size1665):
                        _key1670 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1671 = GiftMessagePopupTempate()
                        _val1671.read(iprot)
                        self.giftMessagePopupTempates[_key1670] = _val1671
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 164:
                if ftype == TType.MAP:
                    self.giftMessagePopups = {}
                    (_ktype1673, _vtype1674, _size1672) = iprot.readMapBegin()
                    for _i1676 in range(_size1672):
                        _key1677 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1678 = GiftMessagePopup()
                        _val1678.read(iprot)
                        self.giftMessagePopups[_key1677] = _val1678
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 165:
                if ftype == TType.LIST:
                    self.GuildSettingssKeyValue = []
                    (_etype1682, _size1679) = iprot.readListBegin()
                    for _i1683 in range(_size1679):
                        _elem1684 = SettingKeyValue()
                        _elem1684.read(iprot)
                        self.GuildSettingssKeyValue.append(_elem1684)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 170:
                if ftype == TType.MAP:
                    self.enchantments = {}
                    (_ktype1686, _vtype1687, _size1685) = iprot.readMapBegin()
                    for _i1689 in range(_size1685):
                        _key1690 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1691 = Enchantment()
                        _val1691.read(iprot)
                        self.enchantments[_key1690] = _val1691
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 171:
                if ftype == TType.MAP:
                    self.gearItems = {}
                    (_ktype1693, _vtype1694, _size1692) = iprot.readMapBegin()
                    for _i1696 in range(_size1692):
                        _key1697 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1698 = GearItem()
                        _val1698.read(iprot)
                        self.gearItems[_key1697] = _val1698
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 172:
                if ftype == TType.MAP:
                    self.evolutionProfiles = {}
                    (_ktype1700, _vtype1701, _size1699) = iprot.readMapBegin()
                    for _i1703 in range(_size1699):
                        _key1704 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1705 = EvolutionProfile()
                        _val1705.read(iprot)
                        self.evolutionProfiles[_key1704] = _val1705
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 173:
                if ftype == TType.MAP:
                    self.evolutionLevelProfiles_ = {}
                    (_ktype1707, _vtype1708, _size1706) = iprot.readMapBegin()
                    for _i1710 in range(_size1706):
                        _key1711 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1712 = EvolutionLevelProfile()
                        _val1712.read(iprot)
                        self.evolutionLevelProfiles_[_key1711] = _val1712
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 174:
                if ftype == TType.LIST:
                    self.evolutionProfileLevelLinks = []
                    (_etype1716, _size1713) = iprot.readListBegin()
                    for _i1717 in range(_size1713):
                        _elem1718 = EvolutionProfileLevelLink()
                        _elem1718.read(iprot)
                        self.evolutionProfileLevelLinks.append(_elem1718)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 175:
                if ftype == TType.MAP:
                    self.passiveSkills = {}
                    (_ktype1720, _vtype1721, _size1719) = iprot.readMapBegin()
                    for _i1723 in range(_size1719):
                        _key1724 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1725 = PassiveSkill()
                        _val1725.read(iprot)
                        self.passiveSkills[_key1724] = _val1725
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 177:
                if ftype == TType.MAP:
                    self.statBumpers = {}
                    (_ktype1727, _vtype1728, _size1726) = iprot.readMapBegin()
                    for _i1730 in range(_size1726):
                        _key1731 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1732 = StatBumper()
                        _val1732.read(iprot)
                        self.statBumpers[_key1731] = _val1732
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 180:
                if ftype == TType.MAP:
                    self.userIcons = {}
                    (_ktype1734, _vtype1735, _size1733) = iprot.readMapBegin()
                    for _i1737 in range(_size1733):
                        _key1738 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1739 = UserIcon()
                        _val1739.read(iprot)
                        self.userIcons[_key1738] = _val1739
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 181:
                if ftype == TType.MAP:
                    self.userFrames = {}
                    (_ktype1741, _vtype1742, _size1740) = iprot.readMapBegin()
                    for _i1744 in range(_size1740):
                        _key1745 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1746 = UserFrame()
                        _val1746.read(iprot)
                        self.userFrames[_key1745] = _val1746
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 182:
                if ftype == TType.MAP:
                    self.stringTable = {}
                    (_ktype1748, _vtype1749, _size1747) = iprot.readMapBegin()
                    for _i1751 in range(_size1747):
                        _key1752 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1753 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.stringTable[_key1752] = _val1753
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 183:
                if ftype == TType.MAP:
                    self.boolTable = {}
                    (_ktype1755, _vtype1756, _size1754) = iprot.readMapBegin()
                    for _i1758 in range(_size1754):
                        _key1759 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1760 = iprot.readBool()
                        self.boolTable[_key1759] = _val1760
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 190:
                if ftype == TType.MAP:
                    self.chatMessageTemplates = {}
                    (_ktype1762, _vtype1763, _size1761) = iprot.readMapBegin()
                    for _i1765 in range(_size1761):
                        _key1766 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1767 = ChatMessageTemplate()
                        _val1767.read(iprot)
                        self.chatMessageTemplates[_key1766] = _val1767
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 191:
                if ftype == TType.MAP:
                    self.chatMessages = {}
                    (_ktype1769, _vtype1770, _size1768) = iprot.readMapBegin()
                    for _i1772 in range(_size1768):
                        _key1773 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1774 = ChatMessage()
                        _val1774.read(iprot)
                        self.chatMessages[_key1773] = _val1774
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 200:
                if ftype == TType.MAP:
                    self.serverErrorDialogTemplates = {}
                    (_ktype1776, _vtype1777, _size1775) = iprot.readMapBegin()
                    for _i1779 in range(_size1775):
                        _key1780 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1781 = ServerErrorDialogTemplate()
                        _val1781.read(iprot)
                        self.serverErrorDialogTemplates[_key1780] = _val1781
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 201:
                if ftype == TType.MAP:
                    self.serverErrorMessages = {}
                    (_ktype1783, _vtype1784, _size1782) = iprot.readMapBegin()
                    for _i1786 in range(_size1782):
                        _key1787 = iprot.readI32()
                        _val1788 = ServerErrorMessage()
                        _val1788.read(iprot)
                        self.serverErrorMessages[_key1787] = _val1788
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 202:
                if ftype == TType.MAP:
                    self.menus = {}
                    (_ktype1790, _vtype1791, _size1789) = iprot.readMapBegin()
                    for _i1793 in range(_size1789):
                        _key1794 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1795 = Menu()
                        _val1795.read(iprot)
                        self.menus[_key1794] = _val1795
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1000:
                if ftype == TType.STRUCT:
                    self.guildSettings = GuildSettings()
                    self.guildSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1010:
                if ftype == TType.MAP:
                    self.guildMemberTypes = {}
                    (_ktype1797, _vtype1798, _size1796) = iprot.readMapBegin()
                    for _i1800 in range(_size1796):
                        _key1801 = iprot.readI32()
                        _val1802 = GuildMemberType()
                        _val1802.read(iprot)
                        self.guildMemberTypes[_key1801] = _val1802
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1012:
                if ftype == TType.MAP:
                    self.guildJoinTypes = {}
                    (_ktype1804, _vtype1805, _size1803) = iprot.readMapBegin()
                    for _i1807 in range(_size1803):
                        _key1808 = iprot.readI32()
                        _val1809 = GuildJoinType()
                        _val1809.read(iprot)
                        self.guildJoinTypes[_key1808] = _val1809
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1020:
                if ftype == TType.MAP:
                    self.guildEmblems = {}
                    (_ktype1811, _vtype1812, _size1810) = iprot.readMapBegin()
                    for _i1814 in range(_size1810):
                        _key1815 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1816 = GuildEmblem()
                        _val1816.read(iprot)
                        self.guildEmblems[_key1815] = _val1816
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1021:
                if ftype == TType.MAP:
                    self.guildFrames = {}
                    (_ktype1818, _vtype1819, _size1817) = iprot.readMapBegin()
                    for _i1821 in range(_size1817):
                        _key1822 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val1823 = GuildFrame()
                        _val1823.read(iprot)
                        self.guildFrames[_key1822] = _val1823
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1022:
                if ftype == TType.LIST:
                    self.guildNameSuggestFirst = []
                    (_etype1827, _size1824) = iprot.readListBegin()
                    for _i1828 in range(_size1824):
                        _elem1829 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.guildNameSuggestFirst.append(_elem1829)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1023:
                if ftype == TType.LIST:
                    self.guildNameSuggestSecond = []
                    (_etype1833, _size1830) = iprot.readListBegin()
                    for _i1834 in range(_size1830):
                        _elem1835 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.guildNameSuggestSecond.append(_elem1835)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1024:
                if ftype == TType.MAP:
                    self.leagues = {}
                    (_ktype1837, _vtype1838, _size1836) = iprot.readMapBegin()
                    for _i1840 in range(_size1836):
                        _key1841 = iprot.readI32()
                        _val1842 = League()
                        _val1842.read(iprot)
                        self.leagues[_key1841] = _val1842
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1030:
                if ftype == TType.LIST:
                    self.userNameSuggestFirst = []
                    (_etype1846, _size1843) = iprot.readListBegin()
                    for _i1847 in range(_size1843):
                        _elem1848 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.userNameSuggestFirst.append(_elem1848)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1031:
                if ftype == TType.LIST:
                    self.userNameSuggestSecond = []
                    (_etype1852, _size1849) = iprot.readListBegin()
                    for _i1853 in range(_size1849):
                        _elem1854 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.userNameSuggestSecond.append(_elem1854)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1032:
                if ftype == TType.STRUCT:
                    self.text = Text()
                    self.text.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Data')
        if self.campaigns is not None:
            oprot.writeFieldBegin('campaigns', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.campaigns))
            for kiter1855, viter1856 in self.campaigns.items():
                oprot.writeString(kiter1855.encode('utf-8') if sys.version_info[0] == 2 else kiter1855)
                viter1856.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.levels is not None:
            oprot.writeFieldBegin('levels', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.levels))
            for kiter1857, viter1858 in self.levels.items():
                oprot.writeString(kiter1857.encode('utf-8') if sys.version_info[0] == 2 else kiter1857)
                viter1858.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.levelScenes is not None:
            oprot.writeFieldBegin('levelScenes', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.levelScenes))
            for kiter1859, viter1860 in self.levelScenes.items():
                oprot.writeString(kiter1859.encode('utf-8') if sys.version_info[0] == 2 else kiter1859)
                viter1860.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.enemySpawnPoints is not None:
            oprot.writeFieldBegin('enemySpawnPoints', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.enemySpawnPoints))
            for iter1861 in self.enemySpawnPoints:
                iter1861.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.purchaseBonuses is not None:
            oprot.writeFieldBegin('purchaseBonuses', TType.MAP, 5)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.purchaseBonuses))
            for kiter1862, viter1863 in self.purchaseBonuses.items():
                oprot.writeI32(kiter1862)
                viter1863.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.purchaseOffers is not None:
            oprot.writeFieldBegin('purchaseOffers', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.purchaseOffers))
            for kiter1864, viter1865 in self.purchaseOffers.items():
                oprot.writeString(kiter1864.encode('utf-8') if sys.version_info[0] == 2 else kiter1864)
                viter1865.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.gemPasses is not None:
            oprot.writeFieldBegin('gemPasses', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.gemPasses))
            for kiter1866, viter1867 in self.gemPasses.items():
                oprot.writeString(kiter1866.encode('utf-8') if sys.version_info[0] == 2 else kiter1866)
                viter1867.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.gemPacks is not None:
            oprot.writeFieldBegin('gemPacks', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.gemPacks))
            for kiter1868, viter1869 in self.gemPacks.items():
                oprot.writeString(kiter1868.encode('utf-8') if sys.version_info[0] == 2 else kiter1868)
                viter1869.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.subscriptionPurchaseOffers is not None:
            oprot.writeFieldBegin('subscriptionPurchaseOffers', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.subscriptionPurchaseOffers))
            for kiter1870, viter1871 in self.subscriptionPurchaseOffers.items():
                oprot.writeString(kiter1870.encode('utf-8') if sys.version_info[0] == 2 else kiter1870)
                viter1871.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.ranks is not None:
            oprot.writeFieldBegin('ranks', TType.MAP, 10)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.ranks))
            for kiter1872, viter1873 in self.ranks.items():
                oprot.writeI32(kiter1872)
                viter1873.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.campaignOrder is not None:
            oprot.writeFieldBegin('campaignOrder', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.campaignOrder))
            for iter1874 in self.campaignOrder:
                oprot.writeString(iter1874.encode('utf-8') if sys.version_info[0] == 2 else iter1874)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroBodies is not None:
            oprot.writeFieldBegin('heroBodies', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.heroBodies))
            for kiter1875, viter1876 in self.heroBodies.items():
                oprot.writeString(kiter1875.encode('utf-8') if sys.version_info[0] == 2 else kiter1875)
                viter1876.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.rarities is not None:
            oprot.writeFieldBegin('rarities', TType.MAP, 13)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.rarities))
            for kiter1877, viter1878 in self.rarities.items():
                oprot.writeI32(kiter1877)
                viter1878.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.heroStatistics is not None:
            oprot.writeFieldBegin('heroStatistics', TType.MAP, 14)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.heroStatistics))
            for kiter1879, viter1880 in self.heroStatistics.items():
                oprot.writeI32(kiter1879)
                viter1880.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.pushNotifications is not None:
            oprot.writeFieldBegin('pushNotifications', TType.MAP, 15)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.pushNotifications))
            for kiter1881, viter1882 in self.pushNotifications.items():
                oprot.writeString(kiter1881.encode('utf-8') if sys.version_info[0] == 2 else kiter1881)
                viter1882.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.scheduledGiftMessages is not None:
            oprot.writeFieldBegin('scheduledGiftMessages', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.scheduledGiftMessages))
            for iter1883 in self.scheduledGiftMessages:
                iter1883.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroLevelXp is not None:
            oprot.writeFieldBegin('heroLevelXp', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.heroLevelXp))
            for iter1884 in self.heroLevelXp:
                iter1884.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.strengthProfiles is not None:
            oprot.writeFieldBegin('strengthProfiles', TType.MAP, 18)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.strengthProfiles))
            for kiter1885, viter1886 in self.strengthProfiles.items():
                oprot.writeString(kiter1885.encode('utf-8') if sys.version_info[0] == 2 else kiter1885)
                viter1886.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.heroSoundProfiles is not None:
            oprot.writeFieldBegin('heroSoundProfiles', TType.MAP, 19)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.heroSoundProfiles))
            for kiter1887, viter1888 in self.heroSoundProfiles.items():
                oprot.writeString(kiter1887.encode('utf-8') if sys.version_info[0] == 2 else kiter1887)
                viter1888.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.colors is not None:
            oprot.writeFieldBegin('colors', TType.MAP, 20)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.colors))
            for kiter1889, viter1890 in self.colors.items():
                oprot.writeI32(kiter1889)
                viter1890.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.quests is not None:
            oprot.writeFieldBegin('quests', TType.MAP, 21)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.quests))
            for kiter1891, viter1892 in self.quests.items():
                oprot.writeString(kiter1891.encode('utf-8') if sys.version_info[0] == 2 else kiter1891)
                viter1892.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.achievementEventIdHints is not None:
            oprot.writeFieldBegin('achievementEventIdHints', TType.MAP, 22)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.achievementEventIdHints))
            for kiter1893, viter1894 in self.achievementEventIdHints.items():
                oprot.writeString(kiter1893.encode('utf-8') if sys.version_info[0] == 2 else kiter1893)
                oprot.writeString(viter1894.encode('utf-8') if sys.version_info[0] == 2 else viter1894)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.vipLevels is not None:
            oprot.writeFieldBegin('vipLevels', TType.LIST, 23)
            oprot.writeListBegin(TType.STRUCT, len(self.vipLevels))
            for iter1895 in self.vipLevels:
                iter1895.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genericDialogTemplates is not None:
            oprot.writeFieldBegin('genericDialogTemplates', TType.MAP, 24)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.genericDialogTemplates))
            for kiter1896, viter1897 in self.genericDialogTemplates.items():
                oprot.writeString(kiter1896.encode('utf-8') if sys.version_info[0] == 2 else kiter1896)
                viter1897.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.genericDialogs is not None:
            oprot.writeFieldBegin('genericDialogs', TType.MAP, 25)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.genericDialogs))
            for kiter1898, viter1899 in self.genericDialogs.items():
                oprot.writeString(kiter1898.encode('utf-8') if sys.version_info[0] == 2 else kiter1898)
                viter1899.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.badges is not None:
            oprot.writeFieldBegin('badges', TType.MAP, 26)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.badges))
            for kiter1900, viter1901 in self.badges.items():
                oprot.writeString(kiter1900.encode('utf-8') if sys.version_info[0] == 2 else kiter1900)
                viter1901.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.raidLeagues is not None:
            oprot.writeFieldBegin('raidLeagues', TType.MAP, 27)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.raidLeagues))
            for kiter1902, viter1903 in self.raidLeagues.items():
                oprot.writeI32(kiter1902)
                viter1903.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.heroStats is not None:
            oprot.writeFieldBegin('heroStats', TType.MAP, 28)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.heroStats))
            for kiter1904, viter1905 in self.heroStats.items():
                oprot.writeI32(kiter1904)
                viter1905.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.affinities is not None:
            oprot.writeFieldBegin('affinities', TType.MAP, 30)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.affinities))
            for kiter1906, viter1907 in self.affinities.items():
                oprot.writeI32(kiter1906)
                viter1907.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.shopSections is not None:
            oprot.writeFieldBegin('shopSections', TType.MAP, 31)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.shopSections))
            for kiter1908, viter1909 in self.shopSections.items():
                oprot.writeString(kiter1908.encode('utf-8') if sys.version_info[0] == 2 else kiter1908)
                viter1909.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.eventSections is not None:
            oprot.writeFieldBegin('eventSections', TType.MAP, 32)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.eventSections))
            for kiter1910, viter1911 in self.eventSections.items():
                oprot.writeString(kiter1910.encode('utf-8') if sys.version_info[0] == 2 else kiter1910)
                viter1911.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.trainingCamps is not None:
            oprot.writeFieldBegin('trainingCamps', TType.MAP, 34)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.trainingCamps))
            for kiter1912, viter1913 in self.trainingCamps.items():
                oprot.writeI32(kiter1912)
                viter1913.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.trainingMethods is not None:
            oprot.writeFieldBegin('trainingMethods', TType.MAP, 35)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.trainingMethods))
            for kiter1914, viter1915 in self.trainingMethods.items():
                oprot.writeString(kiter1914.encode('utf-8') if sys.version_info[0] == 2 else kiter1914)
                viter1915.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.trainingMethodLinks is not None:
            oprot.writeFieldBegin('trainingMethodLinks', TType.LIST, 36)
            oprot.writeListBegin(TType.STRUCT, len(self.trainingMethodLinks))
            for iter1916 in self.trainingMethodLinks:
                iter1916.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dailyHintItems is not None:
            oprot.writeFieldBegin('dailyHintItems', TType.LIST, 37)
            oprot.writeListBegin(TType.STRUCT, len(self.dailyHintItems))
            for iter1917 in self.dailyHintItems:
                iter1917.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.physicsProfiles is not None:
            oprot.writeFieldBegin('physicsProfiles', TType.MAP, 38)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.physicsProfiles))
            for kiter1918, viter1919 in self.physicsProfiles.items():
                oprot.writeString(kiter1918.encode('utf-8') if sys.version_info[0] == 2 else kiter1918)
                viter1919.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.animationProfiles is not None:
            oprot.writeFieldBegin('animationProfiles', TType.MAP, 39)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.animationProfiles))
            for kiter1920, viter1921 in self.animationProfiles.items():
                oprot.writeString(kiter1920.encode('utf-8') if sys.version_info[0] == 2 else kiter1920)
                viter1921.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.soundClips is not None:
            oprot.writeFieldBegin('soundClips', TType.MAP, 40)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.soundClips))
            for kiter1922, viter1923 in self.soundClips.items():
                oprot.writeString(kiter1922.encode('utf-8') if sys.version_info[0] == 2 else kiter1922)
                viter1923.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.soundClipLists is not None:
            oprot.writeFieldBegin('soundClipLists', TType.MAP, 41)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.soundClipLists))
            for kiter1924, viter1925 in self.soundClipLists.items():
                oprot.writeString(kiter1924.encode('utf-8') if sys.version_info[0] == 2 else kiter1924)
                viter1925.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.minigameMusicThemes is not None:
            oprot.writeFieldBegin('minigameMusicThemes', TType.MAP, 42)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.minigameMusicThemes))
            for kiter1926, viter1927 in self.minigameMusicThemes.items():
                oprot.writeString(kiter1926.encode('utf-8') if sys.version_info[0] == 2 else kiter1926)
                viter1927.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.currencyRankMaxEntries is not None:
            oprot.writeFieldBegin('currencyRankMaxEntries', TType.LIST, 43)
            oprot.writeListBegin(TType.STRUCT, len(self.currencyRankMaxEntries))
            for iter1928 in self.currencyRankMaxEntries:
                iter1928.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.heroSummons is not None:
            oprot.writeFieldBegin('heroSummons', TType.MAP, 44)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.heroSummons))
            for kiter1929, viter1930 in self.heroSummons.items():
                oprot.writeString(kiter1929.encode('utf-8') if sys.version_info[0] == 2 else kiter1929)
                viter1930.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.currentConfigCleanerNum is not None:
            oprot.writeFieldBegin('currentConfigCleanerNum', TType.I32, 45)
            oprot.writeI32(self.currentConfigCleanerNum)
            oprot.writeFieldEnd()
        if self.configCleaners is not None:
            oprot.writeFieldBegin('configCleaners', TType.MAP, 46)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.configCleaners))
            for kiter1931, viter1932 in self.configCleaners.items():
                oprot.writeI32(kiter1931)
                viter1932.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.autoConfigCleaners is not None:
            oprot.writeFieldBegin('autoConfigCleaners', TType.MAP, 47)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.autoConfigCleaners))
            for kiter1933, viter1934 in self.autoConfigCleaners.items():
                oprot.writeI32(kiter1933)
                viter1934.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.currencyTargets is not None:
            oprot.writeFieldBegin('currencyTargets', TType.MAP, 48)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.currencyTargets))
            for kiter1935, viter1936 in self.currencyTargets.items():
                oprot.writeI32(kiter1935)
                viter1936.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cashPurchaseInfos is not None:
            oprot.writeFieldBegin('cashPurchaseInfos', TType.MAP, 49)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.cashPurchaseInfos))
            for kiter1937, viter1938 in self.cashPurchaseInfos.items():
                oprot.writeString(kiter1937.encode('utf-8') if sys.version_info[0] == 2 else kiter1937)
                viter1938.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.chests is not None:
            oprot.writeFieldBegin('chests', TType.MAP, 50)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.chests))
            for kiter1939, viter1940 in self.chests.items():
                oprot.writeString(kiter1939.encode('utf-8') if sys.version_info[0] == 2 else kiter1939)
                viter1940.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guaranteedHeroes is not None:
            oprot.writeFieldBegin('guaranteedHeroes', TType.LIST, 51)
            oprot.writeListBegin(TType.STRUCT, len(self.guaranteedHeroes))
            for iter1941 in self.guaranteedHeroes:
                iter1941.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.chestSequence is not None:
            oprot.writeFieldBegin('chestSequence', TType.LIST, 52)
            oprot.writeListBegin(TType.STRING, len(self.chestSequence))
            for iter1942 in self.chestSequence:
                oprot.writeString(iter1942.encode('utf-8') if sys.version_info[0] == 2 else iter1942)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genders is not None:
            oprot.writeFieldBegin('genders', TType.MAP, 53)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.genders))
            for kiter1943, viter1944 in self.genders.items():
                oprot.writeI32(kiter1943)
                viter1944.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guaranteedCurrencies is not None:
            oprot.writeFieldBegin('guaranteedCurrencies', TType.LIST, 54)
            oprot.writeListBegin(TType.STRUCT, len(self.guaranteedCurrencies))
            for iter1945 in self.guaranteedCurrencies:
                iter1945.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tutorials is not None:
            oprot.writeFieldBegin('tutorials', TType.MAP, 56)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.tutorials))
            for kiter1946, viter1947 in self.tutorials.items():
                oprot.writeString(kiter1946.encode('utf-8') if sys.version_info[0] == 2 else kiter1946)
                viter1947.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tutorialSteps is not None:
            oprot.writeFieldBegin('tutorialSteps', TType.MAP, 57)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.tutorialSteps))
            for kiter1948, viter1949 in self.tutorialSteps.items():
                oprot.writeString(kiter1948.encode('utf-8') if sys.version_info[0] == 2 else kiter1948)
                viter1949.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.assetListEntries is not None:
            oprot.writeFieldBegin('assetListEntries', TType.LIST, 59)
            oprot.writeListBegin(TType.STRUCT, len(self.assetListEntries))
            for iter1950 in self.assetListEntries:
                iter1950.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.assetLists is not None:
            oprot.writeFieldBegin('assetLists', TType.MAP, 60)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.assetLists))
            for kiter1951, viter1952 in self.assetLists.items():
                oprot.writeString(kiter1951.encode('utf-8') if sys.version_info[0] == 2 else kiter1951)
                viter1952.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.currencies is not None:
            oprot.writeFieldBegin('currencies', TType.MAP, 62)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.currencies))
            for kiter1953, viter1954 in self.currencies.items():
                oprot.writeString(kiter1953.encode('utf-8') if sys.version_info[0] == 2 else kiter1953)
                viter1954.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.currencyRecharges is not None:
            oprot.writeFieldBegin('currencyRecharges', TType.MAP, 63)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.currencyRecharges))
            for kiter1955, viter1956 in self.currencyRecharges.items():
                oprot.writeString(kiter1955.encode('utf-8') if sys.version_info[0] == 2 else kiter1955)
                viter1956.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.attacks is not None:
            oprot.writeFieldBegin('attacks', TType.MAP, 64)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.attacks))
            for kiter1957, viter1958 in self.attacks.items():
                oprot.writeString(kiter1957.encode('utf-8') if sys.version_info[0] == 2 else kiter1957)
                viter1958.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.radialProjectileAttacks is not None:
            oprot.writeFieldBegin('radialProjectileAttacks', TType.MAP, 65)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.radialProjectileAttacks))
            for kiter1959, viter1960 in self.radialProjectileAttacks.items():
                oprot.writeString(kiter1959.encode('utf-8') if sys.version_info[0] == 2 else kiter1959)
                viter1960.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.laserAttacks is not None:
            oprot.writeFieldBegin('laserAttacks', TType.MAP, 66)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.laserAttacks))
            for kiter1961, viter1962 in self.laserAttacks.items():
                oprot.writeString(kiter1961.encode('utf-8') if sys.version_info[0] == 2 else kiter1961)
                viter1962.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.shootAttacks is not None:
            oprot.writeFieldBegin('shootAttacks', TType.MAP, 67)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.shootAttacks))
            for kiter1963, viter1964 in self.shootAttacks.items():
                oprot.writeString(kiter1963.encode('utf-8') if sys.version_info[0] == 2 else kiter1963)
                viter1964.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.particlesAttacks is not None:
            oprot.writeFieldBegin('particlesAttacks', TType.MAP, 68)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.particlesAttacks))
            for kiter1965, viter1966 in self.particlesAttacks.items():
                oprot.writeString(kiter1965.encode('utf-8') if sys.version_info[0] == 2 else kiter1965)
                viter1966.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.beamAttacks is not None:
            oprot.writeFieldBegin('beamAttacks', TType.MAP, 69)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.beamAttacks))
            for kiter1967, viter1968 in self.beamAttacks.items():
                oprot.writeString(kiter1967.encode('utf-8') if sys.version_info[0] == 2 else kiter1967)
                viter1968.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.runtimePlatforms is not None:
            oprot.writeFieldBegin('runtimePlatforms', TType.MAP, 70)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.runtimePlatforms))
            for kiter1969, viter1970 in self.runtimePlatforms.items():
                oprot.writeString(kiter1969.encode('utf-8') if sys.version_info[0] == 2 else kiter1969)
                viter1970.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.autoPurchaseListEntries is not None:
            oprot.writeFieldBegin('autoPurchaseListEntries', TType.LIST, 71)
            oprot.writeListBegin(TType.STRUCT, len(self.autoPurchaseListEntries))
            for iter1971 in self.autoPurchaseListEntries:
                iter1971.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.autoPurchaseLists is not None:
            oprot.writeFieldBegin('autoPurchaseLists', TType.MAP, 72)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.autoPurchaseLists))
            for kiter1972, viter1973 in self.autoPurchaseLists.items():
                oprot.writeString(kiter1972.encode('utf-8') if sys.version_info[0] == 2 else kiter1972)
                viter1973.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.projectiles is not None:
            oprot.writeFieldBegin('projectiles', TType.MAP, 73)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.projectiles))
            for kiter1974, viter1975 in self.projectiles.items():
                oprot.writeString(kiter1974.encode('utf-8') if sys.version_info[0] == 2 else kiter1974)
                viter1975.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.skillLevelUpCostEntries is not None:
            oprot.writeFieldBegin('skillLevelUpCostEntries', TType.LIST, 74)
            oprot.writeListBegin(TType.STRUCT, len(self.skillLevelUpCostEntries))
            for iter1976 in self.skillLevelUpCostEntries:
                iter1976.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.skillLevelUpGoldCosts is not None:
            oprot.writeFieldBegin('skillLevelUpGoldCosts', TType.LIST, 75)
            oprot.writeListBegin(TType.I32, len(self.skillLevelUpGoldCosts))
            for iter1977 in self.skillLevelUpGoldCosts:
                oprot.writeI32(iter1977)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.skillSlotMinLevelEntries is not None:
            oprot.writeFieldBegin('skillSlotMinLevelEntries', TType.LIST, 76)
            oprot.writeListBegin(TType.STRUCT, len(self.skillSlotMinLevelEntries))
            for iter1978 in self.skillSlotMinLevelEntries:
                iter1978.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.skillSlotMinimumLevels is not None:
            oprot.writeFieldBegin('skillSlotMinimumLevels', TType.LIST, 77)
            oprot.writeListBegin(TType.I32, len(self.skillSlotMinimumLevels))
            for iter1979 in self.skillSlotMinimumLevels:
                oprot.writeI32(iter1979)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.skillStatProfiles is not None:
            oprot.writeFieldBegin('skillStatProfiles', TType.MAP, 78)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.skillStatProfiles))
            for kiter1980, viter1981 in self.skillStatProfiles.items():
                oprot.writeString(kiter1980.encode('utf-8') if sys.version_info[0] == 2 else kiter1980)
                viter1981.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.skills is not None:
            oprot.writeFieldBegin('skills', TType.MAP, 79)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.skills))
            for kiter1982, viter1983 in self.skills.items():
                oprot.writeString(kiter1982.encode('utf-8') if sys.version_info[0] == 2 else kiter1982)
                viter1983.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.projectileTrails is not None:
            oprot.writeFieldBegin('projectileTrails', TType.MAP, 80)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.projectileTrails))
            for kiter1984, viter1985 in self.projectileTrails.items():
                oprot.writeString(kiter1984.encode('utf-8') if sys.version_info[0] == 2 else kiter1984)
                viter1985.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.beamProjectiles is not None:
            oprot.writeFieldBegin('beamProjectiles', TType.MAP, 81)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.beamProjectiles))
            for kiter1986, viter1987 in self.beamProjectiles.items():
                oprot.writeString(kiter1986.encode('utf-8') if sys.version_info[0] == 2 else kiter1986)
                viter1987.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.edgeElements is not None:
            oprot.writeFieldBegin('edgeElements', TType.MAP, 82)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.edgeElements))
            for kiter1988, viter1989 in self.edgeElements.items():
                oprot.writeString(kiter1988.encode('utf-8') if sys.version_info[0] == 2 else kiter1988)
                viter1989.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.skillStatProfileEntries is not None:
            oprot.writeFieldBegin('skillStatProfileEntries', TType.LIST, 83)
            oprot.writeListBegin(TType.STRUCT, len(self.skillStatProfileEntries))
            for iter1990 in self.skillStatProfileEntries:
                iter1990.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestInfo is not None:
            oprot.writeFieldBegin('requestInfo', TType.MAP, 85)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.requestInfo))
            for kiter1991, viter1992 in self.requestInfo.items():
                oprot.writeString(kiter1991.encode('utf-8') if sys.version_info[0] == 2 else kiter1991)
                viter1992.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.safeFieldEntries is not None:
            oprot.writeFieldBegin('safeFieldEntries', TType.LIST, 86)
            oprot.writeListBegin(TType.STRUCT, len(self.safeFieldEntries))
            for iter1993 in self.safeFieldEntries:
                iter1993.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dangerFieldEntries is not None:
            oprot.writeFieldBegin('dangerFieldEntries', TType.LIST, 87)
            oprot.writeListBegin(TType.STRUCT, len(self.dangerFieldEntries))
            for iter1994 in self.dangerFieldEntries:
                iter1994.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edgeElementEntries is not None:
            oprot.writeFieldBegin('edgeElementEntries', TType.LIST, 88)
            oprot.writeListBegin(TType.STRUCT, len(self.edgeElementEntries))
            for iter1995 in self.edgeElementEntries:
                iter1995.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edgeElementsProfiles is not None:
            oprot.writeFieldBegin('edgeElementsProfiles', TType.MAP, 89)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.edgeElementsProfiles))
            for kiter1996, viter1997 in self.edgeElementsProfiles.items():
                oprot.writeString(kiter1996.encode('utf-8') if sys.version_info[0] == 2 else kiter1996)
                viter1997.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.simulationTests is not None:
            oprot.writeFieldBegin('simulationTests', TType.MAP, 90)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.simulationTests))
            for kiter1998, viter1999 in self.simulationTests.items():
                oprot.writeString(kiter1998.encode('utf-8') if sys.version_info[0] == 2 else kiter1998)
                viter1999.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.simulationTestEntries is not None:
            oprot.writeFieldBegin('simulationTestEntries', TType.LIST, 91)
            oprot.writeListBegin(TType.STRUCT, len(self.simulationTestEntries))
            for iter2000 in self.simulationTestEntries:
                iter2000.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.offerPackShopItemTemplates is not None:
            oprot.writeFieldBegin('offerPackShopItemTemplates', TType.MAP, 93)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.offerPackShopItemTemplates))
            for kiter2001, viter2002 in self.offerPackShopItemTemplates.items():
                oprot.writeString(kiter2001.encode('utf-8') if sys.version_info[0] == 2 else kiter2001)
                viter2002.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.offerPackShopItems is not None:
            oprot.writeFieldBegin('offerPackShopItems', TType.MAP, 94)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.offerPackShopItems))
            for kiter2003, viter2004 in self.offerPackShopItems.items():
                oprot.writeString(kiter2003.encode('utf-8') if sys.version_info[0] == 2 else kiter2003)
                viter2004.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.offerPackZoomItemTemplates is not None:
            oprot.writeFieldBegin('offerPackZoomItemTemplates', TType.MAP, 95)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.offerPackZoomItemTemplates))
            for kiter2005, viter2006 in self.offerPackZoomItemTemplates.items():
                oprot.writeString(kiter2005.encode('utf-8') if sys.version_info[0] == 2 else kiter2005)
                viter2006.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.offerPackZoomItems is not None:
            oprot.writeFieldBegin('offerPackZoomItems', TType.MAP, 96)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.offerPackZoomItems))
            for kiter2007, viter2008 in self.offerPackZoomItems.items():
                oprot.writeString(kiter2007.encode('utf-8') if sys.version_info[0] == 2 else kiter2007)
                viter2008.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.visualEffectsProfiles is not None:
            oprot.writeFieldBegin('visualEffectsProfiles', TType.MAP, 98)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.visualEffectsProfiles))
            for kiter2009, viter2010 in self.visualEffectsProfiles.items():
                oprot.writeString(kiter2009.encode('utf-8') if sys.version_info[0] == 2 else kiter2009)
                viter2010.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.heroSkillIcons is not None:
            oprot.writeFieldBegin('heroSkillIcons', TType.MAP, 100)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.heroSkillIcons))
            for kiter2011, viter2012 in self.heroSkillIcons.items():
                oprot.writeString(kiter2011.encode('utf-8') if sys.version_info[0] == 2 else kiter2011)
                viter2012.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.prefabs is not None:
            oprot.writeFieldBegin('prefabs', TType.MAP, 101)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.prefabs))
            for kiter2013, viter2014 in self.prefabs.items():
                oprot.writeString(kiter2013.encode('utf-8') if sys.version_info[0] == 2 else kiter2013)
                viter2014.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.STRUCT, 111)
            self.settings.write(oprot)
            oprot.writeFieldEnd()
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.MAP, 120)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.events))
            for kiter2015, viter2016 in self.events.items():
                oprot.writeString(kiter2015.encode('utf-8') if sys.version_info[0] == 2 else kiter2015)
                viter2016.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.effectLists is not None:
            oprot.writeFieldBegin('effectLists', TType.MAP, 121)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.effectLists))
            for kiter2017, viter2018 in self.effectLists.items():
                oprot.writeString(kiter2017.encode('utf-8') if sys.version_info[0] == 2 else kiter2017)
                viter2018.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.effectListEntries is not None:
            oprot.writeFieldBegin('effectListEntries', TType.LIST, 122)
            oprot.writeListBegin(TType.STRUCT, len(self.effectListEntries))
            for iter2019 in self.effectListEntries:
                iter2019.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hudProfiles is not None:
            oprot.writeFieldBegin('hudProfiles', TType.MAP, 123)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.hudProfiles))
            for kiter2020, viter2021 in self.hudProfiles.items():
                oprot.writeString(kiter2020.encode('utf-8') if sys.version_info[0] == 2 else kiter2020)
                viter2021.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tipOfTheDays is not None:
            oprot.writeFieldBegin('tipOfTheDays', TType.MAP, 124)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.tipOfTheDays))
            for kiter2022, viter2023 in self.tipOfTheDays.items():
                oprot.writeString(kiter2022.encode('utf-8') if sys.version_info[0] == 2 else kiter2022)
                viter2023.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.androidNotificationChannels is not None:
            oprot.writeFieldBegin('androidNotificationChannels', TType.MAP, 125)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.androidNotificationChannels))
            for kiter2024, viter2025 in self.androidNotificationChannels.items():
                oprot.writeString(kiter2024.encode('utf-8') if sys.version_info[0] == 2 else kiter2024)
                viter2025.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.iosNotificationThreads is not None:
            oprot.writeFieldBegin('iosNotificationThreads', TType.MAP, 126)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.iosNotificationThreads))
            for kiter2026, viter2027 in self.iosNotificationThreads.items():
                oprot.writeString(kiter2026.encode('utf-8') if sys.version_info[0] == 2 else kiter2026)
                viter2027.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.localNotifications is not None:
            oprot.writeFieldBegin('localNotifications', TType.MAP, 127)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.localNotifications))
            for kiter2028, viter2029 in self.localNotifications.items():
                oprot.writeString(kiter2028.encode('utf-8') if sys.version_info[0] == 2 else kiter2028)
                viter2029.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.locations is not None:
            oprot.writeFieldBegin('locations', TType.MAP, 130)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.locations))
            for kiter2030, viter2031 in self.locations.items():
                oprot.writeString(kiter2030.encode('utf-8') if sys.version_info[0] == 2 else kiter2030)
                viter2031.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.eventActivities is not None:
            oprot.writeFieldBegin('eventActivities', TType.MAP, 131)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.eventActivities))
            for kiter2032, viter2033 in self.eventActivities.items():
                oprot.writeString(kiter2032.encode('utf-8') if sys.version_info[0] == 2 else kiter2032)
                viter2033.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sectionHeadingTemplates is not None:
            oprot.writeFieldBegin('sectionHeadingTemplates', TType.MAP, 140)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sectionHeadingTemplates))
            for kiter2034, viter2035 in self.sectionHeadingTemplates.items():
                oprot.writeString(kiter2034.encode('utf-8') if sys.version_info[0] == 2 else kiter2034)
                viter2035.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sectionHeadings is not None:
            oprot.writeFieldBegin('sectionHeadings', TType.MAP, 141)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sectionHeadings))
            for kiter2036, viter2037 in self.sectionHeadings.items():
                oprot.writeString(kiter2036.encode('utf-8') if sys.version_info[0] == 2 else kiter2036)
                viter2037.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sectionTopperTemplates is not None:
            oprot.writeFieldBegin('sectionTopperTemplates', TType.MAP, 142)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sectionTopperTemplates))
            for kiter2038, viter2039 in self.sectionTopperTemplates.items():
                oprot.writeString(kiter2038.encode('utf-8') if sys.version_info[0] == 2 else kiter2038)
                viter2039.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sectionToppers is not None:
            oprot.writeFieldBegin('sectionToppers', TType.MAP, 143)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sectionToppers))
            for kiter2040, viter2041 in self.sectionToppers.items():
                oprot.writeString(kiter2040.encode('utf-8') if sys.version_info[0] == 2 else kiter2040)
                viter2041.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sectionBottomTemplates is not None:
            oprot.writeFieldBegin('sectionBottomTemplates', TType.MAP, 144)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sectionBottomTemplates))
            for kiter2042, viter2043 in self.sectionBottomTemplates.items():
                oprot.writeString(kiter2042.encode('utf-8') if sys.version_info[0] == 2 else kiter2042)
                viter2043.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sectionBottoms is not None:
            oprot.writeFieldBegin('sectionBottoms', TType.MAP, 145)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sectionBottoms))
            for kiter2044, viter2045 in self.sectionBottoms.items():
                oprot.writeString(kiter2044.encode('utf-8') if sys.version_info[0] == 2 else kiter2044)
                viter2045.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.inboxSections is not None:
            oprot.writeFieldBegin('inboxSections', TType.MAP, 146)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.inboxSections))
            for kiter2046, viter2047 in self.inboxSections.items():
                oprot.writeString(kiter2046.encode('utf-8') if sys.version_info[0] == 2 else kiter2046)
                viter2047.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildListSections is not None:
            oprot.writeFieldBegin('guildListSections', TType.MAP, 147)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildListSections))
            for kiter2048, viter2049 in self.guildListSections.items():
                oprot.writeString(kiter2048.encode('utf-8') if sys.version_info[0] == 2 else kiter2048)
                viter2049.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildListItemTemplates is not None:
            oprot.writeFieldBegin('guildListItemTemplates', TType.MAP, 148)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildListItemTemplates))
            for kiter2050, viter2051 in self.guildListItemTemplates.items():
                oprot.writeString(kiter2050.encode('utf-8') if sys.version_info[0] == 2 else kiter2050)
                viter2051.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildListItems is not None:
            oprot.writeFieldBegin('guildListItems', TType.MAP, 149)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildListItems))
            for kiter2052, viter2053 in self.guildListItems.items():
                oprot.writeString(kiter2052.encode('utf-8') if sys.version_info[0] == 2 else kiter2052)
                viter2053.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildMemberListItemTemplates is not None:
            oprot.writeFieldBegin('guildMemberListItemTemplates', TType.MAP, 150)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildMemberListItemTemplates))
            for kiter2054, viter2055 in self.guildMemberListItemTemplates.items():
                oprot.writeString(kiter2054.encode('utf-8') if sys.version_info[0] == 2 else kiter2054)
                viter2055.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildMemberListItems is not None:
            oprot.writeFieldBegin('guildMemberListItems', TType.MAP, 151)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildMemberListItems))
            for kiter2056, viter2057 in self.guildMemberListItems.items():
                oprot.writeString(kiter2056.encode('utf-8') if sys.version_info[0] == 2 else kiter2056)
                viter2057.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildMemberListSections is not None:
            oprot.writeFieldBegin('guildMemberListSections', TType.MAP, 152)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildMemberListSections))
            for kiter2058, viter2059 in self.guildMemberListSections.items():
                oprot.writeString(kiter2058.encode('utf-8') if sys.version_info[0] == 2 else kiter2058)
                viter2059.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildSectionItemTemplates is not None:
            oprot.writeFieldBegin('guildSectionItemTemplates', TType.MAP, 153)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildSectionItemTemplates))
            for kiter2060, viter2061 in self.guildSectionItemTemplates.items():
                oprot.writeString(kiter2060.encode('utf-8') if sys.version_info[0] == 2 else kiter2060)
                viter2061.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildSectionItems is not None:
            oprot.writeFieldBegin('guildSectionItems', TType.MAP, 154)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildSectionItems))
            for kiter2062, viter2063 in self.guildSectionItems.items():
                oprot.writeString(kiter2062.encode('utf-8') if sys.version_info[0] == 2 else kiter2062)
                viter2063.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.simplePopups is not None:
            oprot.writeFieldBegin('simplePopups', TType.MAP, 155)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.simplePopups))
            for kiter2064, viter2065 in self.simplePopups.items():
                oprot.writeString(kiter2064.encode('utf-8') if sys.version_info[0] == 2 else kiter2064)
                viter2065.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.simplePopupTemplates is not None:
            oprot.writeFieldBegin('simplePopupTemplates', TType.MAP, 156)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.simplePopupTemplates))
            for kiter2066, viter2067 in self.simplePopupTemplates.items():
                oprot.writeString(kiter2066.encode('utf-8') if sys.version_info[0] == 2 else kiter2066)
                viter2067.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.giftMessageCurrencyItems is not None:
            oprot.writeFieldBegin('giftMessageCurrencyItems', TType.LIST, 160)
            oprot.writeListBegin(TType.STRUCT, len(self.giftMessageCurrencyItems))
            for iter2068 in self.giftMessageCurrencyItems:
                iter2068.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.giftMessageTemplates is not None:
            oprot.writeFieldBegin('giftMessageTemplates', TType.MAP, 161)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.giftMessageTemplates))
            for kiter2069, viter2070 in self.giftMessageTemplates.items():
                oprot.writeString(kiter2069.encode('utf-8') if sys.version_info[0] == 2 else kiter2069)
                viter2070.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.giftMessages is not None:
            oprot.writeFieldBegin('giftMessages', TType.MAP, 162)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.giftMessages))
            for kiter2071, viter2072 in self.giftMessages.items():
                oprot.writeString(kiter2071.encode('utf-8') if sys.version_info[0] == 2 else kiter2071)
                viter2072.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.giftMessagePopupTempates is not None:
            oprot.writeFieldBegin('giftMessagePopupTempates', TType.MAP, 163)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.giftMessagePopupTempates))
            for kiter2073, viter2074 in self.giftMessagePopupTempates.items():
                oprot.writeString(kiter2073.encode('utf-8') if sys.version_info[0] == 2 else kiter2073)
                viter2074.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.giftMessagePopups is not None:
            oprot.writeFieldBegin('giftMessagePopups', TType.MAP, 164)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.giftMessagePopups))
            for kiter2075, viter2076 in self.giftMessagePopups.items():
                oprot.writeString(kiter2075.encode('utf-8') if sys.version_info[0] == 2 else kiter2075)
                viter2076.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.GuildSettingssKeyValue is not None:
            oprot.writeFieldBegin('GuildSettingssKeyValue', TType.LIST, 165)
            oprot.writeListBegin(TType.STRUCT, len(self.GuildSettingssKeyValue))
            for iter2077 in self.GuildSettingssKeyValue:
                iter2077.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.enchantments is not None:
            oprot.writeFieldBegin('enchantments', TType.MAP, 170)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.enchantments))
            for kiter2078, viter2079 in self.enchantments.items():
                oprot.writeString(kiter2078.encode('utf-8') if sys.version_info[0] == 2 else kiter2078)
                viter2079.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.gearItems is not None:
            oprot.writeFieldBegin('gearItems', TType.MAP, 171)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.gearItems))
            for kiter2080, viter2081 in self.gearItems.items():
                oprot.writeString(kiter2080.encode('utf-8') if sys.version_info[0] == 2 else kiter2080)
                viter2081.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.evolutionProfiles is not None:
            oprot.writeFieldBegin('evolutionProfiles', TType.MAP, 172)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.evolutionProfiles))
            for kiter2082, viter2083 in self.evolutionProfiles.items():
                oprot.writeString(kiter2082.encode('utf-8') if sys.version_info[0] == 2 else kiter2082)
                viter2083.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.evolutionLevelProfiles_ is not None:
            oprot.writeFieldBegin('evolutionLevelProfiles_', TType.MAP, 173)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.evolutionLevelProfiles_))
            for kiter2084, viter2085 in self.evolutionLevelProfiles_.items():
                oprot.writeString(kiter2084.encode('utf-8') if sys.version_info[0] == 2 else kiter2084)
                viter2085.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.evolutionProfileLevelLinks is not None:
            oprot.writeFieldBegin('evolutionProfileLevelLinks', TType.LIST, 174)
            oprot.writeListBegin(TType.STRUCT, len(self.evolutionProfileLevelLinks))
            for iter2086 in self.evolutionProfileLevelLinks:
                iter2086.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.passiveSkills is not None:
            oprot.writeFieldBegin('passiveSkills', TType.MAP, 175)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.passiveSkills))
            for kiter2087, viter2088 in self.passiveSkills.items():
                oprot.writeString(kiter2087.encode('utf-8') if sys.version_info[0] == 2 else kiter2087)
                viter2088.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.statBumpers is not None:
            oprot.writeFieldBegin('statBumpers', TType.MAP, 177)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.statBumpers))
            for kiter2089, viter2090 in self.statBumpers.items():
                oprot.writeString(kiter2089.encode('utf-8') if sys.version_info[0] == 2 else kiter2089)
                viter2090.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.userIcons is not None:
            oprot.writeFieldBegin('userIcons', TType.MAP, 180)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.userIcons))
            for kiter2091, viter2092 in self.userIcons.items():
                oprot.writeString(kiter2091.encode('utf-8') if sys.version_info[0] == 2 else kiter2091)
                viter2092.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.userFrames is not None:
            oprot.writeFieldBegin('userFrames', TType.MAP, 181)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.userFrames))
            for kiter2093, viter2094 in self.userFrames.items():
                oprot.writeString(kiter2093.encode('utf-8') if sys.version_info[0] == 2 else kiter2093)
                viter2094.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.stringTable is not None:
            oprot.writeFieldBegin('stringTable', TType.MAP, 182)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.stringTable))
            for kiter2095, viter2096 in self.stringTable.items():
                oprot.writeString(kiter2095.encode('utf-8') if sys.version_info[0] == 2 else kiter2095)
                oprot.writeString(viter2096.encode('utf-8') if sys.version_info[0] == 2 else viter2096)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.boolTable is not None:
            oprot.writeFieldBegin('boolTable', TType.MAP, 183)
            oprot.writeMapBegin(TType.STRING, TType.BOOL, len(self.boolTable))
            for kiter2097, viter2098 in self.boolTable.items():
                oprot.writeString(kiter2097.encode('utf-8') if sys.version_info[0] == 2 else kiter2097)
                oprot.writeBool(viter2098)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.chatMessageTemplates is not None:
            oprot.writeFieldBegin('chatMessageTemplates', TType.MAP, 190)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.chatMessageTemplates))
            for kiter2099, viter2100 in self.chatMessageTemplates.items():
                oprot.writeString(kiter2099.encode('utf-8') if sys.version_info[0] == 2 else kiter2099)
                viter2100.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.chatMessages is not None:
            oprot.writeFieldBegin('chatMessages', TType.MAP, 191)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.chatMessages))
            for kiter2101, viter2102 in self.chatMessages.items():
                oprot.writeString(kiter2101.encode('utf-8') if sys.version_info[0] == 2 else kiter2101)
                viter2102.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.serverErrorDialogTemplates is not None:
            oprot.writeFieldBegin('serverErrorDialogTemplates', TType.MAP, 200)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.serverErrorDialogTemplates))
            for kiter2103, viter2104 in self.serverErrorDialogTemplates.items():
                oprot.writeString(kiter2103.encode('utf-8') if sys.version_info[0] == 2 else kiter2103)
                viter2104.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.serverErrorMessages is not None:
            oprot.writeFieldBegin('serverErrorMessages', TType.MAP, 201)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.serverErrorMessages))
            for kiter2105, viter2106 in self.serverErrorMessages.items():
                oprot.writeI32(kiter2105)
                viter2106.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.menus is not None:
            oprot.writeFieldBegin('menus', TType.MAP, 202)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.menus))
            for kiter2107, viter2108 in self.menus.items():
                oprot.writeString(kiter2107.encode('utf-8') if sys.version_info[0] == 2 else kiter2107)
                viter2108.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildSettings is not None:
            oprot.writeFieldBegin('guildSettings', TType.STRUCT, 1000)
            self.guildSettings.write(oprot)
            oprot.writeFieldEnd()
        if self.guildMemberTypes is not None:
            oprot.writeFieldBegin('guildMemberTypes', TType.MAP, 1010)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.guildMemberTypes))
            for kiter2109, viter2110 in self.guildMemberTypes.items():
                oprot.writeI32(kiter2109)
                viter2110.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildJoinTypes is not None:
            oprot.writeFieldBegin('guildJoinTypes', TType.MAP, 1012)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.guildJoinTypes))
            for kiter2111, viter2112 in self.guildJoinTypes.items():
                oprot.writeI32(kiter2111)
                viter2112.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildEmblems is not None:
            oprot.writeFieldBegin('guildEmblems', TType.MAP, 1020)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildEmblems))
            for kiter2113, viter2114 in self.guildEmblems.items():
                oprot.writeString(kiter2113.encode('utf-8') if sys.version_info[0] == 2 else kiter2113)
                viter2114.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildFrames is not None:
            oprot.writeFieldBegin('guildFrames', TType.MAP, 1021)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.guildFrames))
            for kiter2115, viter2116 in self.guildFrames.items():
                oprot.writeString(kiter2115.encode('utf-8') if sys.version_info[0] == 2 else kiter2115)
                viter2116.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.guildNameSuggestFirst is not None:
            oprot.writeFieldBegin('guildNameSuggestFirst', TType.LIST, 1022)
            oprot.writeListBegin(TType.STRING, len(self.guildNameSuggestFirst))
            for iter2117 in self.guildNameSuggestFirst:
                oprot.writeString(iter2117.encode('utf-8') if sys.version_info[0] == 2 else iter2117)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.guildNameSuggestSecond is not None:
            oprot.writeFieldBegin('guildNameSuggestSecond', TType.LIST, 1023)
            oprot.writeListBegin(TType.STRING, len(self.guildNameSuggestSecond))
            for iter2118 in self.guildNameSuggestSecond:
                oprot.writeString(iter2118.encode('utf-8') if sys.version_info[0] == 2 else iter2118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.leagues is not None:
            oprot.writeFieldBegin('leagues', TType.MAP, 1024)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.leagues))
            for kiter2119, viter2120 in self.leagues.items():
                oprot.writeI32(kiter2119)
                viter2120.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.userNameSuggestFirst is not None:
            oprot.writeFieldBegin('userNameSuggestFirst', TType.LIST, 1030)
            oprot.writeListBegin(TType.STRING, len(self.userNameSuggestFirst))
            for iter2121 in self.userNameSuggestFirst:
                oprot.writeString(iter2121.encode('utf-8') if sys.version_info[0] == 2 else iter2121)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userNameSuggestSecond is not None:
            oprot.writeFieldBegin('userNameSuggestSecond', TType.LIST, 1031)
            oprot.writeListBegin(TType.STRING, len(self.userNameSuggestSecond))
            for iter2122 in self.userNameSuggestSecond:
                oprot.writeString(iter2122.encode('utf-8') if sys.version_info[0] == 2 else iter2122)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRUCT, 1032)
            self.text.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DateTimeUTC)
DateTimeUTC.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'epochMilliseconds', None, None, ),  # 1
)
all_structs.append(SettingKeyValue)
SettingKeyValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'settingKey', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'settingValue', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'settingType', 'UTF8', None, ),  # 3
)
all_structs.append(CurrencyTarget)
CurrencyTarget.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'currencyTargetId', None, None, ),  # 1
    (2, TType.STRING, 'iconPath', 'UTF8', None, ),  # 2
)
all_structs.append(UserBasicInfo)
UserBasicInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'rank', None, None, ),  # 2
    (3, TType.STRUCT, 'lastActivity', [DateTimeUTC, None], None, ),  # 3
    (4, TType.STRING, 'mostRecentDeviceName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nickname', 'UTF8', None, ),  # 5
    (6, TType.I32, 'vipLevel', None, None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'guildEmblemId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'guildFrameId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'guildName', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'userFrameId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'userIconId', 'UTF8', None, ),  # 14
)
all_structs.append(GuildLevel)
GuildLevel.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'guildLevelId', None, None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
)
all_structs.append(GuildJoinType)
GuildJoinType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'guildJoinTypeId', None, None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'display', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'joinButtonText', 'UTF8', None, ),  # 11
)
all_structs.append(GuildMemberType)
GuildMemberType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'guildMemberTypeId', None, None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'display', 'UTF8', None, ),  # 10
    (11, TType.I32, 'maxMembers', None, None, ),  # 11
    (12, TType.STRING, 'guildMemberListSectionId', 'UTF8', None, ),  # 12
)
all_structs.append(ServerErrorDialogTemplate)
ServerErrorDialogTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serverErrorDialogTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
)
all_structs.append(GenericDialogTemplate)
GenericDialogTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'genericDialogTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
)
all_structs.append(GenericDialog)
GenericDialog.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'genericDialogId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'genericDialogTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'body', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'okayButtonText', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'okayButtonImage', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'featureImage', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'secondButtonText', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'secondButtonImage', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'secondFeatureImage', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'firstButtonTutorialId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'secondButtonTutorialId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'openSoundId', 'UTF8', None, ),  # 14
)
all_structs.append(ServerErrorMessage)
ServerErrorMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'serverErrorMessageId', None, None, ),  # 1
    (2, TType.STRING, 'serverErrorDialogTemplateId', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'title', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'body', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'button1Text', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'button2Text', 'UTF8', None, ),  # 21
)
all_structs.append(HudProfile)
HudProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hudProfileId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'hudTypeId', None, None, ),  # 2
    (3, TType.BOOL, 'showUser', None, None, ),  # 3
    (4, TType.LIST, 'currencyIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.BOOL, 'showInventory', None, None, ),  # 5
)
all_structs.append(League)
League.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'leagueId', None, None, ),  # 1
    (2, TType.I64, 'guildPoints', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'display', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'displaySingular', 'UTF8', None, ),  # 11
)
all_structs.append(GuildEmblem)
GuildEmblem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildEmblemId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'displayOrder', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'image', 'UTF8', None, ),  # 10
    None,  # 11
    (12, TType.I32, 'minLeagueId', None, None, ),  # 12
    (13, TType.BOOL, 'hidden', None, None, ),  # 13
)
all_structs.append(GuildFrame)
GuildFrame.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildFrameId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'displayOrder', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'image', 'UTF8', None, ),  # 10
    (11, TType.I32, 'minGuild', None, None, ),  # 11
    (12, TType.I32, 'minLeagueId', None, None, ),  # 12
    (13, TType.BOOL, 'hidden', None, None, ),  # 13
)
all_structs.append(UserIcon)
UserIcon.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userIconId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'displayOrder', None, None, ),  # 2
    (3, TType.BOOL, 'hidden', None, None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'image', 'UTF8', None, ),  # 10
)
all_structs.append(UserFrame)
UserFrame.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userFrameId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'displayOrder', None, None, ),  # 2
    (3, TType.BOOL, 'hidden', None, None, ),  # 3
    (4, TType.STRING, 'rankBackgroundImage', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'image', 'UTF8', None, ),  # 10
)
all_structs.append(GuildSettings)
GuildSettings.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'maxMemberCount', None, None, ),  # 1
    (2, TType.I32, 'unlockRank', None, None, ),  # 2
    (3, TType.I32, 'createRank', None, None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'maxDisplayLength', None, None, ),  # 10
    (11, TType.I32, 'maxDisplayTagLength', None, None, ),  # 11
    (12, TType.I32, 'maxDescriptionLength', None, None, ),  # 12
    (13, TType.I32, 'minDisplayLength', None, None, ),  # 13
    (14, TType.I32, 'minDisplayTagLength', None, None, ),  # 14
    (15, TType.I32, 'minDescriptionLength', None, None, ),  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'defaultLocationId', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'defaultGuildEmblemId', 'UTF8', None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRING, 'noGuildEmblemId', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'noGuildFrameId', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'defaultEmblemId', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'defaultFrameId', 'UTF8', None, ),  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.STRING, 'joinInvitationDefault', 'UTF8', None, ),  # 40
    (41, TType.STRING, 'joinApplicationDefault', 'UTF8', None, ),  # 41
    (42, TType.STRING, 'applicantAcceptedMessageTitle', 'UTF8', None, ),  # 42
    (43, TType.STRING, 'applicantRejectedMessageTitle', 'UTF8', None, ),  # 43
    (44, TType.STRING, 'cannotSendGuildInvitesText', 'UTF8', None, ),  # 44
    (45, TType.STRING, 'cannotJoinFullGuildText', 'UTF8', None, ),  # 45
    (46, TType.STRING, 'guildDisplayAndTagTakenText', 'UTF8', None, ),  # 46
    (47, TType.STRING, 'guildNameTakenText', 'UTF8', None, ),  # 47
    (48, TType.STRING, 'guildTagTakenText', 'UTF8', None, ),  # 48
    (49, TType.STRING, 'guildDeletedText', 'UTF8', None, ),  # 49
    (50, TType.STRING, 'guildErrorText', 'UTF8', None, ),  # 50
    (51, TType.STRING, 'guildSuggestSectionId', 'UTF8', None, ),  # 51
    (52, TType.STRING, 'guildSearchSectionId', 'UTF8', None, ),  # 52
    (53, TType.STRING, 'guildMemberSectionId', 'UTF8', None, ),  # 53
    (54, TType.STRING, 'guildLeaderSectionId', 'UTF8', None, ),  # 54
    (55, TType.STRING, 'guildCoLeaderSectionId', 'UTF8', None, ),  # 55
    (56, TType.STRING, 'guildBossSectionId', 'UTF8', None, ),  # 56
    (57, TType.STRING, 'guildManagerSectionId', 'UTF8', None, ),  # 57
    (58, TType.STRING, 'guildEmblemSectionId', 'UTF8', None, ),  # 58
    (59, TType.STRING, 'guildRuleSectionId', 'UTF8', None, ),  # 59
    (60, TType.STRING, 'guildKickMessageText', 'UTF8', None, ),  # 60
)
all_structs.append(Settings)
Settings.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gameId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'thriftNamespace', 'UTF8', None, ),  # 2
    (3, TType.I32, 'unusedNumber', None, None, ),  # 3
    (4, TType.I32, 'testLocalConfig', None, None, ),  # 4
    (5, TType.DOUBLE, 'chestGemsCostPerHour', None, None, ),  # 5
    (6, TType.LIST, 'dailyAchievementChestIds', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRING, 'badEnergyMeterFullParticleEffectPath', 'UTF8', None, ),  # 7
    (8, TType.LIST, 'testListI32', (TType.I32, None, False), None, ),  # 8
    (9, TType.LIST, 'testListDouble', (TType.DOUBLE, None, False), None, ),  # 9
    (10, TType.LIST, 'testListEnum', (TType.I32, None, False), None, ),  # 10
    (11, TType.I32, 'screenDarkerOpacity', None, None, ),  # 11
    (12, TType.I32, 'sectionShadowOpacity', None, None, ),  # 12
    (13, TType.I32, 'sectionShadowDistanceX', None, None, ),  # 13
    (14, TType.I32, 'sectionShadowDistanceY', None, None, ),  # 14
    (15, TType.I32, 'popupShadowOpacity', None, None, ),  # 15
    (16, TType.I32, 'popupShadowDistanceX', None, None, ),  # 16
    (17, TType.I32, 'popupShadowDistanceY', None, None, ),  # 17
    (18, TType.STRING, 'requiredAppVersion', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'recommendedAppVersion', 'UTF8', None, ),  # 19
    (20, TType.DOUBLE, 'victoryMenuGearItemDelaySeconds', None, None, ),  # 20
    (21, TType.DOUBLE, 'victoryMenuChestDelaySeconds', None, None, ),  # 21
    (22, TType.I32, 'shopCardOfferBaseCostCommon', None, None, ),  # 22
    (23, TType.I32, 'shopCardOfferBaseCostRare', None, None, ),  # 23
    (24, TType.I32, 'shopCardOfferBaseCostEpic', None, None, ),  # 24
    (25, TType.DOUBLE, 'xpTransferAffinitiesMatch', None, None, ),  # 25
    (26, TType.DOUBLE, 'xpTransferAffinitiesNoMatch', None, None, ),  # 26
    (27, TType.I32, 'maxFusionSelectedCard', None, None, ),  # 27
    (28, TType.I32, 'shopCardOfferBaseCostUncommon', None, None, ),  # 28
    None,  # 29
    (30, TType.BOOL, 'enableMinigameChestRewards', None, None, ),  # 30
    (31, TType.STRING, 'gemPassesTemplate', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'gemPassesSectionId', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'emptySectionTemplate', 'UTF8', None, ),  # 33
    (34, TType.STRING, 'gearBorderImageReadyToEquipPath', 'UTF8', None, ),  # 34
    (35, TType.STRING, 'gearBorderImageUnlockedPath', 'UTF8', None, ),  # 35
    (36, TType.STRING, 'gearBorderImageCraftPath', 'UTF8', None, ),  # 36
    None,  # 37
    (38, TType.STRING, 'tutorialArrowPrefabPath', 'UTF8', None, ),  # 38
    (39, TType.DOUBLE, 'selectedSkeletonScaleInOffer', None, None, ),  # 39
    (40, TType.STRING, 'gearBorderImageLockedPath', 'UTF8', None, ),  # 40
    (41, TType.DOUBLE, 'textFlyoffsVisibilityDuration', None, None, ),  # 41
    (42, TType.DOUBLE, 'textFlyoffsFadeDuration', None, None, ),  # 42
    (43, TType.DOUBLE, 'minigameTimeoutMinutes', None, None, ),  # 43
    (44, TType.I32, 'heroSummonMainMenuButtonUnlockRankId', None, None, ),  # 44
    (45, TType.DOUBLE, 'minigameHealthbarSeconds', None, None, ),  # 45
    (46, TType.I32, 'minigameTimerMinRank', None, None, ),  # 46
    (47, TType.STRING, 'emptySectionTemplateInbox', 'UTF8', None, ),  # 47
    (48, TType.STRING, 'emptySectionTemplateShop', 'UTF8', None, ),  # 48
    (49, TType.STRING, 'emptySectionTemplateGuilds', 'UTF8', None, ),  # 49
    (50, TType.STRING, 'autoWinCurrencyId', 'UTF8', None, ),  # 50
    (51, TType.I32, 'currentConfigCleanerNum', None, None, ),  # 51
    (52, TType.I32, 'numSkillSlots', None, None, ),  # 52
    (53, TType.I32, 'maxSkillLevel', None, None, ),  # 53
    (54, TType.DOUBLE, 'energyGainHitOpponent', None, None, ),  # 54
    (55, TType.DOUBLE, 'energyGainDamageOpponent', None, None, ),  # 55
    (56, TType.DOUBLE, 'energyGainBumpTeammate', None, None, ),  # 56
    (57, TType.DOUBLE, 'energyGainBumpedByTeammate', None, None, ),  # 57
    (58, TType.DOUBLE, 'energyGainLoseHealth', None, None, ),  # 58
    (59, TType.DOUBLE, 'energyGainKillOpponent', None, None, ),  # 59
    (60, TType.DOUBLE, 'energyGainEnchantOpponent', None, None, ),  # 60
    (61, TType.DOUBLE, 'energyGainEnchantTeammate', None, None, ),  # 61
    (62, TType.DOUBLE, 'cardRevealFlyingDuration', None, None, ),  # 62
    (63, TType.DOUBLE, 'cardRevealDelayDuration', None, None, ),  # 63
    (64, TType.I32, 'unlockedStarterPackIconRank', None, None, ),  # 64
    (65, TType.I32, 'unlockedAchievementButtonRank', None, None, ),  # 65
    (66, TType.I32, 'unlockedRaidButtonRank', None, None, ),  # 66
    (67, TType.I32, 'unlockedDailyQuestsButtonRank', None, None, ),  # 67
    None,  # 68
    None,  # 69
    (70, TType.STRING, 'cardBackImageDefault', 'UTF8', None, ),  # 70
    (71, TType.STRING, 'cardBackImageHidden', 'UTF8', None, ),  # 71
    (72, TType.STRING, 'cardBackImageCommon', 'UTF8', None, ),  # 72
    (73, TType.STRING, 'cardBackImageRare', 'UTF8', None, ),  # 73
    (74, TType.STRING, 'cardBackImageEpic', 'UTF8', None, ),  # 74
    (75, TType.STRING, 'cardBackImageLegendary', 'UTF8', None, ),  # 75
    (76, TType.BOOL, 'minigameShowNextTurn', None, None, ),  # 76
    (77, TType.BOOL, 'minigameShowShotFeedback', None, None, ),  # 77
    None,  # 78
    None,  # 79
    (80, TType.STRING, 'cellViewWhereToFindBgDisable', 'UTF8', None, ),  # 80
    (81, TType.STRING, 'cellViewWhereToFindBgEnable', 'UTF8', None, ),  # 81
    (82, TType.STRING, 'guildProfileInfoLoadingSectionTemplate', 'UTF8', None, ),  # 82
    (83, TType.STRING, 'guildProfileInfoLeaveSectionTemplate', 'UTF8', None, ),  # 83
    (84, TType.STRING, 'currencyDefaultCellViewPrefab', 'UTF8', None, ),  # 84
    (85, TType.STRING, 'autoWinCurrencyCellViewPrefab', 'UTF8', None, ),  # 85
    (86, TType.STRING, 'forcedUpdateUrlAndroid', 'UTF8', None, ),  # 86
    (87, TType.STRING, 'forcedUpdateUrlIos', 'UTF8', None, ),  # 87
    None,  # 88
    None,  # 89
    (90, TType.STRING, 'shopRibbonHeadingSectionTemplate', 'UTF8', None, ),  # 90
    (91, TType.STRING, 'shopHeadingSectionTemplate', 'UTF8', None, ),  # 91
    (92, TType.STRING, 'shopSingleItemSectionTemplate', 'UTF8', None, ),  # 92
    (93, TType.STRING, 'shopMultipleItemSectionTemplate', 'UTF8', None, ),  # 93
    (94, TType.STRING, 'minigameFloatingHealPrefab', 'UTF8', None, ),  # 94
    (95, TType.STRING, 'minigameFloatingDamagePrefab', 'UTF8', None, ),  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    (100, TType.STRING, 'eventRibbonHeadingSectionTemplate', 'UTF8', None, ),  # 100
    (101, TType.STRING, 'eventHeadingSectionTemplate', 'UTF8', None, ),  # 101
    (102, TType.STRING, 'eventSingleItemSectionTemplate', 'UTF8', None, ),  # 102
    (103, TType.STRING, 'eventMultipleItemSectionTemplate', 'UTF8', None, ),  # 103
    (104, TType.STRING, 'emptySectionTemplateEvent', 'UTF8', None, ),  # 104
)
all_structs.append(Text)
Text.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'editUserMenuAllowInvites_self', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'editUserMenuDontAllowInvites_self', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'editUserMenuAllowInvites_other', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'editUserMenuDontAllowInvites_other', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'noCrew', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'joinCrewNow', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'crew', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'damage', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'heal', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'chestSlotFull', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'okay', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'cancel', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'evolve', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'levelUp', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'level', 'UTF8', None, ),  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    (23, TType.STRING, 'commonOkay', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'editGuildSetUpEmblem', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'editGuildSelectIcon', 'UTF8', None, ),  # 25
    (26, TType.STRING, 'editGuildSelectBorder', 'UTF8', None, ),  # 26
    (27, TType.STRING, 'chestNextChestIn', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'purchaseConfirmation_NextPurchaseBonusInNumPurchases', 'UTF8', None, ),  # 28
    None,  # 29
    (30, TType.STRING, 'heroInfoMenuPrefab', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'settingMenu_FindMyData', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'settingMenu_Connect', 'UTF8', None, ),  # 32
    None,  # 33
    (34, TType.STRING, 'settingMenuPopup', 'UTF8', None, ),  # 34
    (35, TType.STRING, 'settingMenu_SoundOn', 'UTF8', None, ),  # 35
    (36, TType.STRING, 'settingMenu_SoundOff', 'UTF8', None, ),  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.STRING, 'fusion_HeroInASlot', 'UTF8', None, ),  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    (47, TType.STRING, 'winMenu_XpGained', 'UTF8', None, ),  # 47
    (48, TType.STRING, 'winMenu_XpProgressLeft', 'UTF8', None, ),  # 48
    (49, TType.STRING, 'winMenu_XpProgressRight', 'UTF8', None, ),  # 49
    (50, TType.STRING, 'max', 'UTF8', None, ),  # 50
    (51, TType.STRING, 'maxLevel', 'UTF8', None, ),  # 51
    (52, TType.STRING, 'maxXp', 'UTF8', None, ),  # 52
    (53, TType.STRING, 'xpColon', 'UTF8', None, ),  # 53
    (54, TType.STRING, 'heroFusion_StatValue', 'UTF8', None, ),  # 54
    (55, TType.STRING, 'heroFusion_PlusValue', 'UTF8', None, ),  # 55
    (56, TType.STRING, 'heroFusion_Selected', 'UTF8', None, ),  # 56
    (57, TType.STRING, 'heroFusion_Cost', 'UTF8', None, ),  # 57
    (58, TType.STRING, 'commonFind', 'UTF8', None, ),  # 58
    (59, TType.STRING, 'commonCraft', 'UTF8', None, ),  # 59
    (60, TType.STRING, 'commonEquip', 'UTF8', None, ),  # 60
    (61, TType.STRING, 'commonRequireHeroLevel', 'UTF8', None, ),  # 61
    None,  # 62
    (63, TType.STRING, 'campUpradeToLevel', 'UTF8', None, ),  # 63
    (64, TType.STRING, 'consumesThisGear', 'UTF8', None, ),  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    (70, TType.STRING, 'xpGained', 'UTF8', None, ),  # 70
    (71, TType.STRING, 'commonFull', 'UTF8', None, ),  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    (77, TType.STRING, 'freeTag', 'UTF8', None, ),  # 77
    None,  # 78
    (79, TType.STRING, 'buyOnePack', 'UTF8', None, ),  # 79
    (80, TType.STRING, 'heroEvolved', 'UTF8', None, ),  # 80
    (81, TType.STRING, 'youHave', 'UTF8', None, ),  # 81
    (82, TType.STRING, 'getHeroes', 'UTF8', None, ),  # 82
    (83, TType.STRING, 'heroLeveledUp', 'UTF8', None, ),  # 83
    (84, TType.STRING, 'thisAccount', 'UTF8', None, ),  # 84
    (85, TType.STRING, 'heroFusion_SelectedMaxHero', 'UTF8', None, ),  # 85
    (86, TType.STRING, 'heroFusion_MaxXP', 'UTF8', None, ),  # 86
    (87, TType.STRING, 'heroFusion_NoStats', 'UTF8', None, ),  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    (91, TType.STRING, 'camp_Training', 'UTF8', None, ),  # 91
    (92, TType.STRING, 'unlockAt', 'UTF8', None, ),  # 92
    None,  # 93
    None,  # 94
    (95, TType.STRING, 'needMoreLootTicket', 'UTF8', None, ),  # 95
    (96, TType.STRING, 'raidsWinLoseTrophies', 'UTF8', None, ),  # 96
    None,  # 97
    (98, TType.STRING, 'globalRank', 'UTF8', None, ),  # 98
    (99, TType.STRING, 'text_Title_Ready_To_Battle', 'UTF8', None, ),  # 99
    (100, TType.STRING, 'text_Edit_Team', 'UTF8', None, ),  # 100
    (101, TType.STRING, 'text_Battle', 'UTF8', None, ),  # 101
    (102, TType.STRING, 'text_Reroll', 'UTF8', None, ),  # 102
    (103, TType.STRING, 'text_Defense_Team', 'UTF8', None, ),  # 103
    (104, TType.STRING, 'text_Battle_Currency_Cost_Color', 'UTF8', None, ),  # 104
    (105, TType.STRING, 'text_AutoWin', 'UTF8', None, ),  # 105
    (106, TType.STRING, 'text_Title_Prepare_For_Battle', 'UTF8', None, ),  # 106
    (107, TType.STRING, 'text_Title_Campaign_Name', 'UTF8', None, ),  # 107
    None,  # 108
    (109, TType.STRING, 'text_Raid_Result_Trophy_Win', 'UTF8', None, ),  # 109
    (110, TType.STRING, 'text_Raid_Result_Trophy_Lose', 'UTF8', None, ),  # 110
    (111, TType.STRING, 'text_Title_League', 'UTF8', None, ),  # 111
    (112, TType.STRING, 'text_Rematch', 'UTF8', None, ),  # 112
    (113, TType.STRING, 'text_Battle_Menu_Team_Power', 'UTF8', None, ),  # 113
    (114, TType.STRING, 'text_Guild_Online_Member', 'UTF8', None, ),  # 114
    None,  # 115
    (116, TType.STRING, 'text_Guild_Members', 'UTF8', None, ),  # 116
    (117, TType.STRING, 'text_AutoWin_Replay_Desc', 'UTF8', None, ),  # 117
    (118, TType.STRING, 'text_AutoWin_YouHave', 'UTF8', None, ),  # 118
    (119, TType.STRING, 'text_AutoWin_LootTickets', 'UTF8', None, ),  # 119
    (120, TType.STRING, 'text_AutoWin_GetMore', 'UTF8', None, ),  # 120
    (121, TType.STRING, 'text_AutoWin_ChanceOfWining', 'UTF8', None, ),  # 121
    (122, TType.STRING, 'text_AutoWin_AmountReplays', 'UTF8', None, ),  # 122
    (123, TType.STRING, 'text_AutoWin_MaxStamina', 'UTF8', None, ),  # 123
    (124, TType.STRING, 'ability', 'UTF8', None, ),  # 124
    (125, TType.STRING, 'enchantment', 'UTF8', None, ),  # 125
    (126, TType.STRING, 'specialMove', 'UTF8', None, ),  # 126
    (127, TType.STRING, 'nameColonDescription', 'UTF8', None, ),  # 127
    (128, TType.STRING, 'text_Camp_Slot_Unlock', 'UTF8', None, ),  # 128
    (129, TType.STRING, 'text_Camp_Slot_SkipWait', 'UTF8', None, ),  # 129
    (130, TType.STRING, 'text_Camp_Slot_Collect', 'UTF8', None, ),  # 130
    (131, TType.STRING, 'text_Camp_Slot_Train', 'UTF8', None, ),  # 131
    None,  # 132
    None,  # 133
    (134, TType.STRING, 'text_Select_Border', 'UTF8', None, ),  # 134
    (135, TType.STRING, 'text_Select_Avatar', 'UTF8', None, ),  # 135
    (136, TType.STRING, 'text_Setup_Avatar', 'UTF8', None, ),  # 136
    (137, TType.STRING, 'text_Save', 'UTF8', None, ),  # 137
    (138, TType.STRING, 'text_Nothing', 'UTF8', None, ),  # 138
    (139, TType.STRING, 'text_VIP', 'UTF8', None, ),  # 139
    (140, TType.STRING, 'text_Create_Crew', 'UTF8', None, ),  # 140
    (141, TType.STRING, 'text_Edit_Crew', 'UTF8', None, ),  # 141
    None,  # 142
    (143, TType.STRING, 'text_AllowInvites', 'UTF8', None, ),  # 143
    (144, TType.STRING, 'text_DoesNotAllowInvites', 'UTF8', None, ),  # 144
    (145, TType.STRING, 'text_Promote', 'UTF8', None, ),  # 145
    (146, TType.STRING, 'text_Rush', 'UTF8', None, ),  # 146
    (147, TType.STRING, 'text_Train', 'UTF8', None, ),  # 147
    (148, TType.STRING, 'text_Collect', 'UTF8', None, ),  # 148
    (149, TType.STRING, 'text_Upgrade', 'UTF8', None, ),  # 149
    (150, TType.STRING, 'text_Resources', 'UTF8', None, ),  # 150
    (151, TType.STRING, 'text_TrainingTime', 'UTF8', None, ),  # 151
    (152, TType.STRING, 'text_ChooseTraining', 'UTF8', None, ),  # 152
    (153, TType.STRING, 'text_TrainingCamp', 'UTF8', None, ),  # 153
    (154, TType.STRING, 'text_Achievements', 'UTF8', None, ),  # 154
    (155, TType.STRING, 'text_HeroShop', 'UTF8', None, ),  # 155
    (156, TType.STRING, 'text_Messages', 'UTF8', None, ),  # 156
    (157, TType.STRING, 'text_VIPLevel', 'UTF8', None, ),  # 157
    (158, TType.STRING, 'text_PlayerRank', 'UTF8', None, ),  # 158
    (159, TType.STRING, 'text_MakeLeader', 'UTF8', None, ),  # 159
    (160, TType.STRING, 'text_TimeLeft', 'UTF8', None, ),  # 160
    (161, TType.STRING, 'text_Create', 'UTF8', None, ),  # 161
    (162, TType.STRING, 'text_Search', 'UTF8', None, ),  # 162
    (163, TType.STRING, 'text_EnterMessage', 'UTF8', None, ),  # 163
    (164, TType.STRING, 'text_ReplyMessage', 'UTF8', None, ),  # 164
    (165, TType.STRING, 'text_SearchInputPlaceHolder', 'UTF8', None, ),  # 165
    (166, TType.STRING, 'text_MakeFriends', 'UTF8', None, ),  # 166
    (167, TType.STRING, 'text_JoinCrewNow', 'UTF8', None, ),  # 167
    (168, TType.STRING, 'text_Buy', 'UTF8', None, ),  # 168
    (169, TType.STRING, 'text_EnemyTurn', 'UTF8', None, ),  # 169
    (170, TType.STRING, 'text_NoConnection', 'UTF8', None, ),  # 170
    (171, TType.STRING, 'text_Free', 'UTF8', None, ),  # 171
    (172, TType.STRING, 'text_FinishTraining', 'UTF8', None, ),  # 172
    (173, TType.STRING, 'text_Hero', 'UTF8', None, ),  # 173
    (174, TType.STRING, 'text_Heroes', 'UTF8', None, ),  # 174
    None,  # 175
    (176, TType.STRING, 'text_VIPLevelBenefits', 'UTF8', None, ),  # 176
    (177, TType.STRING, 'text_VIPNextLevel', 'UTF8', None, ),  # 177
    (178, TType.STRING, 'camp_Ready', 'UTF8', None, ),  # 178
    (179, TType.STRING, 'text_Go', 'UTF8', None, ),  # 179
    (180, TType.STRING, 'text_ReqMatAndRes', 'UTF8', None, ),  # 180
    (181, TType.STRING, 'text_DailyQuests', 'UTF8', None, ),  # 181
    None,  # 182
    (183, TType.STRING, 'text_NeedMoreSkillPoint', 'UTF8', None, ),  # 183
    (184, TType.STRING, 'text_UnlockSkillSlot', 'UTF8', None, ),  # 184
    (185, TType.STRING, 'text_RestoreAccount', 'UTF8', None, ),  # 185
    (186, TType.STRING, 'text_SkillSlotUnlocked', 'UTF8', None, ),  # 186
    (187, TType.STRING, 'text_ServerError', 'UTF8', None, ),  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    (191, TType.STRING, 'text_Credits', 'UTF8', None, ),  # 191
    (192, TType.STRING, 'text_CreditsTitle', 'UTF8', None, ),  # 192
)
all_structs.append(LocalizedStringEntry)
LocalizedStringEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'localizedStringEntryId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(HeroSummon)
HeroSummon.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'heroSummonId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.I32, 'minHeroes', None, None, ),  # 3
    (4, TType.I32, 'maxHeroes', None, None, ),  # 4
    (5, TType.I32, 'weightCommon', None, None, ),  # 5
    (6, TType.I32, 'weightUncommon', None, None, ),  # 6
    (7, TType.I32, 'weightRare', None, None, ),  # 7
    (8, TType.I32, 'weightEpic', None, None, ),  # 8
    (9, TType.I32, 'weightLegendary', None, None, ),  # 9
    (10, TType.I32, 'affinityId', None, None, ),  # 10
    (11, TType.STRING, 'tokenCurrencyId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'overrideHeroSummonId', 'UTF8', None, ),  # 12
    (13, TType.I32, 'overridePurchaseCount', None, None, ),  # 13
    (14, TType.MAP, 'heroSummonOverrides', (TType.I32, None, TType.STRUCT, [HeroSummon, None], False), None, ),  # 14
    (15, TType.BOOL, 'setUserAffinity', None, None, ),  # 15
    (16, TType.LIST, 'guaranteedHeroIds', (TType.STRING, 'UTF8', False), None, ),  # 16
    (17, TType.BOOL, 'autoAddToTeam', None, None, ),  # 17
    (18, TType.BOOL, 'matchUserAffinity', None, None, ),  # 18
)
all_structs.append(Skill)
Skill.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'skillId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    None,  # 3
    (4, TType.I32, 'skillTypeId', None, None, ),  # 4
    (5, TType.STRING, 'hintSkillStatProfileId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'description', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'iconImagePath', 'UTF8', None, ),  # 7
    (8, TType.I32, 'whenToShootId', None, None, ),  # 8
    None,  # 9
    (10, TType.DOUBLE, 'predelaySeconds', None, None, ),  # 10
    (11, TType.STRING, 'heroSkillIconId', 'UTF8', None, ),  # 11
    (12, TType.DOUBLE, 'maxBadEnergy', None, None, ),  # 12
)
all_structs.append(HeroSkillIcon)
HeroSkillIcon.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'heroSkillIconId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'iconPath', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'iconDisabledPath', 'UTF8', None, ),  # 4
)
all_structs.append(SkillStatProfile)
SkillStatProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'skillStatProfileEntries', (TType.STRUCT, [SkillStatProfileEntry, None], False), None, ),  # 2
)
all_structs.append(SkillStatProfileEntry)
SkillStatProfileEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'heroStatId', None, None, ),  # 2
    (3, TType.I32, 'inflectLevelNum', None, None, ),  # 3
    (4, TType.DOUBLE, 'baseValue', None, None, ),  # 4
    (5, TType.DOUBLE, 'maxValue', None, None, ),  # 5
    (6, TType.DOUBLE, 'inflectValue', None, None, ),  # 6
    (7, TType.I32, 'durationId', None, None, ),  # 7
    (8, TType.I32, 'modTypeId', None, None, ),  # 8
)
all_structs.append(StrengthProfile)
StrengthProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'strengthProfileId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'baseHealth', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'baseDamage', (TType.I32, None, False), None, ),  # 3
    None,  # 4
    (5, TType.LIST, 'baseSpeed', (TType.I32, None, False), None, ),  # 5
    (6, TType.LIST, 'baseRest', (TType.I32, None, False), None, ),  # 6
    (7, TType.LIST, 'maxHealth', (TType.I32, None, False), None, ),  # 7
    (8, TType.LIST, 'maxDamage', (TType.I32, None, False), None, ),  # 8
    None,  # 9
    (10, TType.LIST, 'maxSpeed', (TType.I32, None, False), None, ),  # 10
    (11, TType.LIST, 'maxRest', (TType.I32, None, False), None, ),  # 11
    (12, TType.LIST, 'baseMass', (TType.I32, None, False), None, ),  # 12
    (13, TType.LIST, 'maxMass', (TType.I32, None, False), None, ),  # 13
    (14, TType.LIST, 'baseDrag', (TType.I32, None, False), None, ),  # 14
    (15, TType.LIST, 'maxDrag', (TType.I32, None, False), None, ),  # 15
    None,  # 16
    None,  # 17
    (18, TType.I32, 'speedInflectLevelNum', None, None, ),  # 18
    (19, TType.LIST, 'inflectSpeed', (TType.I32, None, False), None, ),  # 19
    (20, TType.I32, 'healthInflectLevelNum', None, None, ),  # 20
    (21, TType.LIST, 'inflectHealth', (TType.I32, None, False), None, ),  # 21
    None,  # 22
    None,  # 23
    (24, TType.I32, 'damageInflectLevelNum', None, None, ),  # 24
    (25, TType.LIST, 'inflectDamage', (TType.I32, None, False), None, ),  # 25
    (26, TType.LIST, 'basePhysicalAttack', (TType.I32, None, False), None, ),  # 26
    (27, TType.LIST, 'maxPhysicalAttack', (TType.I32, None, False), None, ),  # 27
    (28, TType.LIST, 'basePhysicalDefense', (TType.I32, None, False), None, ),  # 28
    (29, TType.LIST, 'maxPhysicalDefense', (TType.I32, None, False), None, ),  # 29
    (30, TType.LIST, 'baseMagicAttack', (TType.I32, None, False), None, ),  # 30
    (31, TType.LIST, 'maxMagicAttack', (TType.I32, None, False), None, ),  # 31
    (32, TType.LIST, 'baseMagicDefense', (TType.I32, None, False), None, ),  # 32
    (33, TType.LIST, 'maxMagicDefense', (TType.I32, None, False), None, ),  # 33
)
all_structs.append(PhysicsProfile)
PhysicsProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'physicsProfileId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'reactDurationSeconds', None, None, ),  # 2
    (3, TType.DOUBLE, 'reactTranslate', None, None, ),  # 3
    (4, TType.DOUBLE, 'reactTranslateHz', None, None, ),  # 4
    (5, TType.DOUBLE, 'reactTranslateSeconds', None, None, ),  # 5
    None,  # 6
    (7, TType.DOUBLE, 'shakeFrequency', None, None, ),  # 7
    (8, TType.DOUBLE, 'shakeBodyRotation', None, None, ),  # 8
    (9, TType.DOUBLE, 'shakeBoneShear', None, None, ),  # 9
    (10, TType.DOUBLE, 'shakeBoneScaleX', None, None, ),  # 10
    (11, TType.DOUBLE, 'shakeBoneScaleY', None, None, ),  # 11
    (12, TType.DOUBLE, 'shakePositionX', None, None, ),  # 12
    (13, TType.DOUBLE, 'shakePositionY', None, None, ),  # 13
    (14, TType.DOUBLE, 'shakeBonePositionX', None, None, ),  # 14
    (15, TType.DOUBLE, 'shakeBonePositionY', None, None, ),  # 15
    (16, TType.DOUBLE, 'shakeBoneRotation', None, None, ),  # 16
)
all_structs.append(AnimationProfile)
AnimationProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'animationProfileId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'eyeSpeed', None, None, ),  # 2
)
all_structs.append(Gender)
Gender.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'genderId', None, None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
)
all_structs.append(EffectList)
EffectList.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'effectListId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.LIST, 'effectListEntries', (TType.STRUCT, [EffectListEntry, None], False), None, ),  # 3
)
all_structs.append(EffectListEntry)
EffectListEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'effectListId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'autoReclaim', None, None, ),  # 3
    (4, TType.I32, 'poolSize', None, None, ),  # 4
    None,  # 5
    (6, TType.DOUBLE, 'releaseSeconds', None, None, ),  # 6
    (7, TType.BOOL, 'disable', None, None, ),  # 7
)
all_structs.append(VisualEffectsProfile)
VisualEffectsProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'visualEffectsProfileId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hitEnemyEffectListId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'physicalDamageEffectListId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'magicDamageEffectListId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'deathEffectListId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'energyShotZoomEffectListId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'energyShotParticlesEffectListId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'trailEffectListId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'enterSceneEffectListId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'hitWallEffectListId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'hitTeammateEffectListId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'hitByTeammateEffectListId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'dramaticPauseEffectListId', 'UTF8', None, ),  # 13
)
all_structs.append(HeroBody)
HeroBody.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'heroId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'bodyTypeId', None, None, ),  # 2
    (3, TType.I32, 'heroBodyTypeId', None, None, ),  # 3
    (4, TType.STRING, 'display', 'UTF8', None, ),  # 4
    (5, TType.I32, 'rarityId', None, None, ),  # 5
    (6, TType.I32, 'affinityId', None, None, ),  # 6
    (7, TType.STRING, 'unlockCampaignId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'evolutionProfileId', 'UTF8', None, ),  # 8
    (9, TType.I32, 'genderId', None, None, ),  # 9
    (10, TType.STRING, 'animationProfileId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'summary', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'description', 'UTF8', None, ),  # 12
    (13, TType.DOUBLE, 'drag', None, None, ),  # 13
    (14, TType.STRING, 'strengthProfileId', 'UTF8', None, ),  # 14
    (15, TType.LIST, 'winAnimations', (TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.LIST, 'loseAnimations', (TType.STRING, 'UTF8', False), None, ),  # 16
    (17, TType.STRING, 'bodyCirclePrefab', 'UTF8', None, ),  # 17
    (18, TType.LIST, 'heroInfoAnimations', (TType.STRING, 'UTF8', False), None, ),  # 18
    (19, TType.LIST, 'levelUpAnimations', (TType.STRING, 'UTF8', False), None, ),  # 19
    (20, TType.STRING, 'heroPrefab', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'cardImage', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'bwCardImage', 'UTF8', None, ),  # 22
    (23, TType.I32, 'specialMoveTrigger', None, None, ),  # 23
    (24, TType.LIST, 'skillIds', (TType.STRING, 'UTF8', False), None, ),  # 24
    (25, TType.I32, 'enchantmentSkillSlotNum', None, None, ),  # 25
    (26, TType.I32, 'bumpComboSkillSlotNum', None, None, ),  # 26
    (27, TType.I32, 'energyShotSkillSlotNum', None, None, ),  # 27
    (28, TType.LIST, 'idleAnimations', (TType.STRING, 'UTF8', False), None, ),  # 28
    (29, TType.STRING, 'visualEffectsProfileId', 'UTF8', None, ),  # 29
    (30, TType.STRING, 'physicsProfileId', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'magicReactProfileId', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'healthBarPrefab', 'UTF8', None, ),  # 32
    (33, TType.DOUBLE, 'healthBarYOffset', None, None, ),  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    (37, TType.STRING, 'heroSoundProfileId', 'UTF8', None, ),  # 37
    (38, TType.STRING, 'physicalReactProfileId', 'UTF8', None, ),  # 38
    None,  # 39
    (40, TType.STRING, 'skillId0', 'UTF8', None, ),  # 40
    (41, TType.STRING, 'skillId1', 'UTF8', None, ),  # 41
    (42, TType.STRING, 'skillId2', 'UTF8', None, ),  # 42
    (43, TType.STRING, 'skillId3', 'UTF8', None, ),  # 43
    (44, TType.I32, 'movementTypeId', None, None, ),  # 44
    (45, TType.I32, 'lifespanTypeId', None, None, ),  # 45
    (46, TType.STRING, 'skillIconHolderPrefab', 'UTF8', None, ),  # 46
    (47, TType.DOUBLE, 'attackAnimDelaySeconds', None, None, ),  # 47
    (48, TType.STRING, 'Nickname', 'UTF8', None, ),  # 48
)
all_structs.append(HeroSoundProfile)
HeroSoundProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'heroId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'shootClip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'myTurnClip', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'deathClip', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'energyShotClip', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'worriedClip', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'aimClip', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'hitClip', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'physicalDamageClip', 'UTF8', None, ),  # 9
)
all_structs.append(Campaign)
Campaign.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'campaignId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.I32, 'order', None, None, ),  # 3
    (4, TType.BOOL, 'hideTitle', None, None, ),  # 4
    (5, TType.STRING, 'raidLevelSceneId', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'imagePath', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'backgroundImagePath', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'campaignLoadingSignPath', 'UTF8', None, ),  # 12
    (13, TType.I32, 'backgroundImageTypeId', None, None, ),  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.LIST, 'unlockedHeroIds', (TType.STRING, 'UTF8', False), None, ),  # 20
    (21, TType.LIST, 'levelIds', (TType.STRING, 'UTF8', False), None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRING, 'iconPrefabPath', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'battleMenuImagePath', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'campaignSignPath', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'campaignLevelFontPath', 'UTF8', None, ),  # 33
    (34, TType.DOUBLE, 'highlightOpacity', None, None, ),  # 34
    (35, TType.BOOL, 'showIconShadow', None, None, ),  # 35
)
all_structs.append(Level)
Level.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'levelId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'campaignId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'levelSceneIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I32, 'order', None, None, ),  # 5
    (6, TType.DOUBLE, 'difficulty', None, None, ),  # 6
    (7, TType.DOUBLE, 'valueCents', None, None, ),  # 7
    (8, TType.I32, 'heroXp', None, None, ),  # 8
    (9, TType.I32, 'globalOrder', None, None, ),  # 9
    (10, TType.LIST, 'items1', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.LIST, 'items2', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.LIST, 'items3', (TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.LIST, 'items4', (TType.STRING, 'UTF8', False), None, ),  # 13
    None,  # 14
    (15, TType.LIST, 'parms1', (TType.DOUBLE, None, False), None, ),  # 15
    (16, TType.LIST, 'parms2', (TType.DOUBLE, None, False), None, ),  # 16
    (17, TType.LIST, 'parms3', (TType.DOUBLE, None, False), None, ),  # 17
    (18, TType.LIST, 'parms4', (TType.DOUBLE, None, False), None, ),  # 18
    None,  # 19
    None,  # 20
    (21, TType.LIST, 'items5', (TType.STRING, 'UTF8', False), None, ),  # 21
    (22, TType.LIST, 'items6', (TType.STRING, 'UTF8', False), None, ),  # 22
    (23, TType.LIST, 'parms5', (TType.DOUBLE, None, False), None, ),  # 23
    (24, TType.LIST, 'parms6', (TType.DOUBLE, None, False), None, ),  # 24
    (25, TType.LIST, 'items7', (TType.STRING, 'UTF8', False), None, ),  # 25
    (26, TType.LIST, 'items8', (TType.STRING, 'UTF8', False), None, ),  # 26
    (27, TType.LIST, 'parms7', (TType.DOUBLE, None, False), None, ),  # 27
    (28, TType.LIST, 'parms8', (TType.DOUBLE, None, False), None, ),  # 28
    None,  # 29
    (30, TType.STRING, 'costCurrencyId', 'UTF8', None, ),  # 30
    (31, TType.I32, 'currencyCost', None, None, ),  # 31
)
all_structs.append(EdgeElementEntry)
EdgeElementEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'edgeElementsProfileId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'edgeElementId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'firstMove', None, None, ),  # 3
    (4, TType.I32, 'lastMove', None, None, ),  # 4
    (5, TType.DOUBLE, 'probability', None, None, ),  # 5
    (6, TType.STRING, 'groupId', 'UTF8', None, ),  # 6
)
all_structs.append(EdgeElementsProfile)
EdgeElementsProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'edgeElementsProfileId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'edgeElementEntries', (TType.STRUCT, [EdgeElementEntry, None], False), None, ),  # 2
)
all_structs.append(LevelScene)
LevelScene.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'levelSceneId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'levelId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'enemySpawnPoints', (TType.STRUCT, [EnemySpawnPoint, None], False), None, ),  # 3
    (4, TType.LIST, 'minigameMusicThemeIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I32, 'order', None, None, ),  # 5
    (6, TType.STRING, 'levelPrefabPath', 'UTF8', None, ),  # 6
    None,  # 7
    None,  # 8
    (9, TType.STRING, 'edgeElementsProfileId', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'hasBoss', None, None, ),  # 10
    (11, TType.LIST, 'startCameraPosition', (TType.DOUBLE, None, False), None, ),  # 11
    (12, TType.LIST, 'cameraPosition', (TType.DOUBLE, None, False), None, ),  # 12
    (13, TType.STRING, 'fightEffectListId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'playerTurnEffectListId', 'UTF8', None, ),  # 14
    (15, TType.DOUBLE, 'transitionY', None, None, ),  # 15
    (16, TType.STRING, 'fanTransitionPath', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'enemyTurnEffectListId', 'UTF8', None, ),  # 17
)
all_structs.append(HeroState)
HeroState.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'heroId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'evolutionLevel', None, None, ),  # 2
    (3, TType.STRING, 'heroStateId', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.LIST, 'slotStatus', (TType.BOOL, None, False), None, ),  # 5
    (6, TType.I32, 'xp', None, None, ),  # 6
    (7, TType.LIST, 'skillLevels', (TType.I32, None, False), None, ),  # 7
)
all_structs.append(EnemySpawnPoint)
EnemySpawnPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'levelSceneId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.I32, 'level', None, None, ),  # 3
    (4, TType.I32, 'evolutionLevel', None, None, ),  # 4
    (5, TType.STRING, 'heroId', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'skillLevels', (TType.I32, None, False), None, ),  # 6
    (7, TType.I32, 'spawnTypeId', None, None, ),  # 7
    (8, TType.LIST, 'spawnParams', (TType.I32, None, False), None, ),  # 8
    (9, TType.BOOL, 'highlight', None, None, ),  # 9
    (10, TType.DOUBLE, 'x', None, None, ),  # 10
    (11, TType.DOUBLE, 'y', None, None, ),  # 11
    (12, TType.LIST, 'slotStatus', (TType.BOOL, None, False), None, ),  # 12
    None,  # 13
    (14, TType.STRUCT, 'heroState', [HeroState, None], None, ),  # 14
    (15, TType.I32, 'attackGroup', None, None, ),  # 15
    (16, TType.DOUBLE, 'attackWait', None, None, ),  # 16
)
all_structs.append(EdgeElement)
EdgeElement.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'edgeElementId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'placementTypeId', None, None, ),  # 3
    (4, TType.STRING, 'controllerPath', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'effectPath', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'collisionEffectListId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'heroBadgePath', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'heroEffectListId', 'UTF8', None, ),  # 8
    (9, TType.I32, 'level', None, None, ),  # 9
    (10, TType.STRING, 'appearSoundId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'launchSoundId', 'UTF8', None, ),  # 11
)
all_structs.append(Color)
Color.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'colorId', None, None, ),  # 1
    (2, TType.DOUBLE, 'red', None, None, ),  # 2
    (3, TType.DOUBLE, 'green', None, None, ),  # 3
    (4, TType.DOUBLE, 'blue', None, None, ),  # 4
    (5, TType.DOUBLE, 'alpha', None, None, ),  # 5
)
all_structs.append(Affinity)
Affinity.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'affinityId', None, None, ),  # 1
    (2, TType.I32, 'colorId', None, None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'heroInfoBgPath', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'levelRibbonImagePath', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'heroSummaryBgPath', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'heroPurchaseCardFrame', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'evolveSequenceBgPath', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'healthBarPrefab', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'aimArrowPrefabPath', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'playerShieldImagePath', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'playerXpBarImagePath', 'UTF8', None, ),  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'activeHeroMarkerPrefab', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'bodyCirclePrefab', 'UTF8', None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRING, 'userIconBackgroundImage', 'UTF8', None, ),  # 30
)
all_structs.append(SoundClip)
SoundClip.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'soundClipId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'audioSourceId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'loop', None, None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'soundClipListId', 'UTF8', None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'path', 'UTF8', None, ),  # 20
)
all_structs.append(SoundClipList)
SoundClipList.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'soundClipListId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'soundClipIds', (TType.STRING, 'UTF8', False), None, ),  # 10
)
all_structs.append(ShopSection)
ShopSection.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'shopSectionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.I32, 'numItemsPerRow', None, None, ),  # 5
    (6, TType.STRING, 'sectionGroupId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'sectionHeadingTemplate', 'UTF8', None, ),  # 7
    (8, TType.I32, 'rowHeightHint', None, None, ),  # 8
    (9, TType.BOOL, 'isDebug', None, None, ),  # 9
)
all_structs.append(EventSection)
EventSection.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'eventSectionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.I32, 'numItemsPerRow', None, None, ),  # 5
    (6, TType.STRING, 'sectionGroupId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'sectionHeadingTemplate', 'UTF8', None, ),  # 7
    (8, TType.I32, 'rowHeightHint', None, None, ),  # 8
    (9, TType.BOOL, 'isDebug', None, None, ),  # 9
)
all_structs.append(PurchaseOffer)
PurchaseOffer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'purchaseOfferId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'shopSectionId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'shopItemPrefab', 'UTF8', None, ),  # 3
    (4, TType.I32, 'rankMin', None, None, ),  # 4
    (5, TType.I32, 'rankMax', None, None, ),  # 5
    (6, TType.I32, 'priority', None, None, ),  # 6
    (7, TType.STRING, 'multiPackId', 'UTF8', None, ),  # 7
    (8, TType.BOOL, 'danger', None, None, ),  # 8
    (9, TType.STRING, 'mainMenuIconPrefab', 'UTF8', None, ),  # 9
    (10, TType.I32, 'vipLevelMin', None, None, ),  # 10
    (11, TType.I32, 'vipLevelMax', None, None, ),  # 11
    (12, TType.STRING, 'productCurrencyId', 'UTF8', None, ),  # 12
    (13, TType.I32, 'productCurrencyCount', None, None, ),  # 13
    (14, TType.STRING, 'tokenCurrencyId', 'UTF8', None, ),  # 14
    None,  # 15
    None,  # 16
    (17, TType.I32, 'guildRankMin', None, None, ),  # 17
    (18, TType.I32, 'guildRankMax', None, None, ),  # 18
    (19, TType.STRING, 'productTitle', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'costCurrencyId', 'UTF8', None, ),  # 20
    (21, TType.I32, 'currencyCost', None, None, ),  # 21
    (22, TType.I32, 'maxPurchases', None, None, ),  # 22
    (23, TType.I32, 'purchaseOfferResetTypeId', None, None, ),  # 23
    (24, TType.I32, 'purchaseResetSeconds', None, None, ),  # 24
    (25, TType.STRING, 'unlockPurchaseOfferId', 'UTF8', None, ),  # 25
    (26, TType.I32, 'vipPointsAwarded', None, None, ),  # 26
    (27, TType.STRING, 'bannerImage', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'bannerText', 'UTF8', None, ),  # 28
    (29, TType.STRING, 'itemImage', 'UTF8', None, ),  # 29
    (30, TType.STRING, 'itemDescription', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'inboxPreviewImage', 'UTF8', None, ),  # 31
    (32, TType.STRING, 'inboxBannerImage', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'inboxRibbonImage', 'UTF8', None, ),  # 33
    (34, TType.STRING, 'inboxRibbonTitle', 'UTF8', None, ),  # 34
    (35, TType.I32, 'inboxPriority', None, None, ),  # 35
    (36, TType.STRING, 'borderImage', 'UTF8', None, ),  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.LIST, 'eventIds', (TType.STRING, 'UTF8', False), None, ),  # 40
    (41, TType.LIST, 'eventPhaseIds', (TType.I32, None, False), None, ),  # 41
    (42, TType.LIST, 'previewEventIds', (TType.STRING, 'UTF8', False), None, ),  # 42
    (43, TType.LIST, 'previewEventPhaseIds', (TType.I32, None, False), None, ),  # 43
)
all_structs.append(GemPass)
GemPass.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'purchaseOfferId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'welcomeGiftMessageId', 'UTF8', None, ),  # 5
    (6, TType.I32, 'durationDays', None, None, ),  # 6
    (7, TType.I32, 'numGemsPerDay', None, None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'iOSProductId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'googleProductId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'iOSSubscriptionProductId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'googleSubscriptionProductId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'welcomeGenericDialogId', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'subscriptionBonusMessageId', 'UTF8', None, ),  # 15
)
all_structs.append(SubscriptionPurchaseOffer)
SubscriptionPurchaseOffer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'subscriptionPurchaseOfferId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'purchaseOfferId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'subscriptionBonusGems', None, None, ),  # 3
)
all_structs.append(GemPack)
GemPack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'purchaseOfferId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    (7, TType.I32, 'numGems', None, None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'iOSProductId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'googleProductId', 'UTF8', None, ),  # 11
)
all_structs.append(CashPurchaseInfo)
CashPurchaseInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'purchaseOfferId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'iOSProductId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'googleProductId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'iOSProductIdUndiscounted', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'googleProductIdUndiscounted', 'UTF8', None, ),  # 13
)
all_structs.append(Currency)
Currency.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currencyId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'pluralName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'singularName', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'maxByRank', (TType.I32, None, False), None, ),  # 4
    (5, TType.I32, 'currencyTargetId', None, None, ),  # 5
    (6, TType.I32, 'startBalance', None, None, ),  # 6
    (7, TType.I32, 'currencyTypeId', None, None, ),  # 7
    (8, TType.LIST, 'textColorRgba', (TType.I32, None, False), None, ),  # 8
    (9, TType.STRING, 'iconImagePath', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'cardImagePath', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'inboxIconImagePath', 'UTF8', None, ),  # 11
    (12, TType.I32, 'goldExchangeValue', None, None, ),  # 12
    (13, TType.I32, 'value', None, None, ),  # 13
    (14, TType.STRING, 'hudElementPrefabPath', 'UTF8', None, ),  # 14
    (15, TType.I32, 'hudSlotNum', None, None, ),  # 15
    (16, TType.STRING, 'purchaseMenuId', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'cardImagePathDisabled', 'UTF8', None, ),  # 17
    (18, TType.BOOL, 'hideInRewards', None, None, ),  # 18
)
all_structs.append(CurrencyRecharge)
CurrencyRecharge.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currencyId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'defaultRechargeSeconds', None, None, ),  # 2
)
all_structs.append(CurrencyRankMaxEntry)
CurrencyRankMaxEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currencyId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'rankId', None, None, ),  # 2
    (3, TType.I32, 'max', None, None, ),  # 3
)
all_structs.append(Rank)
Rank.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rankId', None, None, ),  # 1
    (2, TType.I32, 'xp', None, None, ),  # 2
    (3, TType.I32, 'maxStamina', None, None, ),  # 3
    (4, TType.I32, 'maxHeroes', None, None, ),  # 4
    (5, TType.I32, 'maxRecruits', None, None, ),  # 5
    (6, TType.STRING, 'rewardChestId', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'rewardCurrencies', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'rewardCurrencyCounts', (TType.I32, None, False), None, ),  # 8
)
all_structs.append(VipLevel)
VipLevel.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vipLevelId', None, None, ),  # 1
    (2, TType.I32, 'vipPoints', None, None, ),  # 2
    (3, TType.I32, 'percentPurchaseGemsBonus', None, None, ),  # 3
    (4, TType.I32, 'numFreeDailyLootTickets', None, None, ),  # 4
    (5, TType.I32, 'maxDailyStaminaPurchases', None, None, ),  # 5
    (6, TType.I32, 'numDailyLootTickets', None, None, ),  # 6
    (7, TType.STRING, 'benefitsDesc', 'UTF8', None, ),  # 7
)
all_structs.append(Location)
Location.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'locationId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'countryCode', 'UTF8', None, ),  # 2
    (3, TType.I32, 'isoNumericId', None, None, ),  # 3
    (4, TType.I32, 'displayOrder', None, None, ),  # 4
    (5, TType.BOOL, 'hide', None, None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'flagImage', 'UTF8', None, ),  # 10
    None,  # 11
    (12, TType.STRING, 'countryDisplay', 'UTF8', None, ),  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    (16, TType.STRING, 'shortDisplay', 'UTF8', None, ),  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'capital', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'continent', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'country', 'UTF8', None, ),  # 22
)
all_structs.append(TutorialStep)
TutorialStep.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tutorialStepId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tutorialId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'order', None, None, ),  # 3
    (4, TType.DOUBLE, 'preDelaySeconds', None, None, ),  # 4
    (5, TType.DOUBLE, 'postDelaySeconds', None, None, ),  # 5
    (6, TType.I32, 'xOffset', None, None, ),  # 6
    (7, TType.I32, 'yOffset', None, None, ),  # 7
    (8, TType.BOOL, 'darkener', None, None, ),  # 8
    (9, TType.STRING, 'soundId', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'isCheckpoint', None, None, ),  # 10
    (11, TType.BOOL, 'blockMouse', None, None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    (19, TType.STRING, 'titleText', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'bodyText', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'imagePath', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'panelPrefabPath', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'animationName', 'UTF8', None, ),  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.DOUBLE, 'arrowScale', None, None, ),  # 30
    (31, TType.I32, 'arrowDirection', None, None, ),  # 31
    (32, TType.STRING, 'arrowTarget', 'UTF8', None, ),  # 32
    (33, TType.I32, 'arrowOffsetX', None, None, ),  # 33
    (34, TType.I32, 'arrowOffsetY', None, None, ),  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.LIST, 'openCheckpoints', (TType.STRING, 'UTF8', False), None, ),  # 40
    (41, TType.LIST, 'blockerCheckpoints', (TType.STRING, 'UTF8', False), None, ),  # 41
    (42, TType.LIST, 'passCheckpoints', (TType.STRING, 'UTF8', False), None, ),  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    (48, TType.LIST, 'cancelCheckpoints', (TType.STRING, 'UTF8', False), None, ),  # 48
    (49, TType.LIST, 'allowCheckpoints', (TType.STRING, 'UTF8', False), None, ),  # 49
    None,  # 50
    (51, TType.I32, 'okayButtonActionId', None, None, ),  # 51
    (52, TType.I32, 'openActionId', None, None, ),  # 52
    (53, TType.STRING, 'okayButtonText', 'UTF8', None, ),  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    (60, TType.STRING, 'highlightTarget', 'UTF8', None, ),  # 60
    (61, TType.DOUBLE, 'highlightOffsetX', None, None, ),  # 61
    (62, TType.DOUBLE, 'highlightOffsetY', None, None, ),  # 62
    (63, TType.DOUBLE, 'highlightScaleX', None, None, ),  # 63
    (64, TType.DOUBLE, 'highlightScaleY', None, None, ),  # 64
    (65, TType.DOUBLE, 'highlightOpacity', None, None, ),  # 65
    (66, TType.DOUBLE, 'highlightFadeInSeconds', None, None, ),  # 66
    (67, TType.DOUBLE, 'highlightFadeOutSeconds', None, None, ),  # 67
    (68, TType.STRING, 'highlightImage', 'UTF8', None, ),  # 68
    (69, TType.DOUBLE, 'highlightZoomInSeconds', None, None, ),  # 69
    (70, TType.DOUBLE, 'highlightZoomOutSeconds', None, None, ),  # 70
)
all_structs.append(Tutorial)
Tutorial.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tutorialId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.BOOL, 'autoCancel', None, None, ),  # 3
    (4, TType.I32, 'minRank', None, None, ),  # 4
    (5, TType.LIST, 'dontCancelPoints', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'specialFlags', (TType.I32, None, False), None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'tutorialSteps', (TType.STRUCT, [TutorialStep, None], False), None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'completionFlag', 'UTF8', None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    (31, TType.LIST, 'enableFlags', (TType.STRING, 'UTF8', False), None, ),  # 31
)
all_structs.append(Chest)
Chest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chestId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'offerCost', None, None, ),  # 2
    (3, TType.BOOL, 'autoPlace', None, None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'duration', None, None, ),  # 10
    (11, TType.STRING, 'display', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'numCommon', None, None, ),  # 20
    (21, TType.I32, 'numRare', None, None, ),  # 21
    (22, TType.I32, 'numEpic', None, None, ),  # 22
    (23, TType.I32, 'numLegendary', None, None, ),  # 23
    (24, TType.I32, 'numCommonGuaranteed', None, None, ),  # 24
    (25, TType.I32, 'numRareGuaranteed', None, None, ),  # 25
    (26, TType.I32, 'numEpicGuaranteed', None, None, ),  # 26
    (27, TType.I32, 'numUncommon', None, None, ),  # 27
    (28, TType.I32, 'numUncommonGuaranteed', None, None, ),  # 28
    None,  # 29
    (30, TType.I32, 'minGold', None, None, ),  # 30
    (31, TType.I32, 'maxGold', None, None, ),  # 31
    (32, TType.I32, 'minGems', None, None, ),  # 32
    (33, TType.I32, 'maxGems', None, None, ),  # 33
    (34, TType.I32, 'maxHeroes', None, None, ),  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.BOOL, 'matchUserAffinity', None, None, ),  # 40
    (41, TType.I32, 'setUserAffinity', None, None, ),  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    (50, TType.STRING, 'imageSprite', 'UTF8', None, ),  # 50
    (51, TType.STRING, 'awardChestClip', 'UTF8', None, ),  # 51
    (52, TType.STRING, 'openChestClip', 'UTF8', None, ),  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    (60, TType.BOOL, 'goToMinigame', None, None, ),  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    (70, TType.LIST, 'guaranteedHeroes', (TType.STRING, 'UTF8', False), None, ),  # 70
    (71, TType.STRING, 'chestPrefab', 'UTF8', None, ),  # 71
    (72, TType.LIST, 'guaranteedCurrencies', (TType.STRUCT, [GuaranteedCurrency, None], False), None, ),  # 72
)
all_structs.append(GuaranteedHero)
GuaranteedHero.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'heroId', 'UTF8', None, ),  # 2
)
all_structs.append(GuaranteedCurrency)
GuaranteedCurrency.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chestId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currencyId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
    (4, TType.STRING, 'rewardGroupId', 'UTF8', None, ),  # 4
)
all_structs.append(RuntimePlatform)
RuntimePlatform.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'runtimePlatformId', 'UTF8', None, ),  # 1
)
all_structs.append(Header)
Header.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'schemaVersion', None, None, ),  # 1
    (2, TType.I32, 'configVersion', None, None, ),  # 2
)
all_structs.append(HeroLevelXp)
HeroLevelXp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'heroLevel', None, None, ),  # 1
    (2, TType.I32, 'commonXpEvo1', None, None, ),  # 2
    (3, TType.I32, 'commonXpEvo2', None, None, ),  # 3
    (4, TType.I32, 'commonXpEvo3', None, None, ),  # 4
    (5, TType.I32, 'uncommonXpEvo1', None, None, ),  # 5
    (6, TType.I32, 'uncommonXpEvo2', None, None, ),  # 6
    (7, TType.I32, 'uncommonXpEvo3', None, None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'rareXpEvo1', None, None, ),  # 10
    (11, TType.I32, 'rareXpEvo2', None, None, ),  # 11
    (12, TType.I32, 'rareXpEvo3', None, None, ),  # 12
    (13, TType.I32, 'rareXpEvo4', None, None, ),  # 13
    (14, TType.I32, 'epicXpEvo1', None, None, ),  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'epicXpEvo2', None, None, ),  # 20
    (21, TType.I32, 'epicXpEvo3', None, None, ),  # 21
    (22, TType.I32, 'epicXpEvo4', None, None, ),  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    (35, TType.LIST, 'xpByEvoByRarity', (TType.LIST, (TType.I32, None, False), False), None, ),  # 35
)
all_structs.append(HeroUpgradeGoldCost)
HeroUpgradeGoldCost.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'heroLevel', None, None, ),  # 1
    (2, TType.I32, 'commonUpgradeCost', None, None, ),  # 2
    (3, TType.I32, 'rareUpgradeCost', None, None, ),  # 3
    (4, TType.I32, 'epicUpgradeCost', None, None, ),  # 4
    (5, TType.I32, 'legendaryUpgradeCost', None, None, ),  # 5
    (6, TType.I32, 'uncommonUpgradeCost', None, None, ),  # 6
)
all_structs.append(SectionHeadingTemplate)
SectionHeadingTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sectionHeadingTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
)
all_structs.append(SectionHeading)
SectionHeading.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sectionHeadingId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sectionHeadingTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
)
all_structs.append(SectionTopperTemplate)
SectionTopperTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sectionTopperTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
)
all_structs.append(SectionTopper)
SectionTopper.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sectionTopperId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sectionTopperTemplateId', 'UTF8', None, ),  # 2
)
all_structs.append(SectionBottomTemplate)
SectionBottomTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sectionBottomTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
)
all_structs.append(SectionBottom)
SectionBottom.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sectionBottomId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sectionBottomTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'buttonText', 'UTF8', None, ),  # 4
)
all_structs.append(GuildSectionItemTemplate)
GuildSectionItemTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildSectionItemTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
)
all_structs.append(GuildSectionItem)
GuildSectionItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildSectionItemId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'guildSectionItemTemplateId', 'UTF8', None, ),  # 2
)
all_structs.append(GuildMemberListItemTemplate)
GuildMemberListItemTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildMemberListItemTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
)
all_structs.append(GuildMemberListItem)
GuildMemberListItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildMemberListItemId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'guildMemberListItemTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
)
all_structs.append(InboxSection)
InboxSection.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'inboxSectionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'sectionHeadingId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'sectionTopperId', 'UTF8', None, ),  # 11
    None,  # 12
    (13, TType.STRING, 'sectionBottomId', 'UTF8', None, ),  # 13
)
all_structs.append(GuildMemberListSection)
GuildMemberListSection.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildMemberListSectionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'sectionHeadingId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'sectionTopperId', 'UTF8', None, ),  # 11
    None,  # 12
    (13, TType.STRING, 'sectionBottomId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'guildSectionItemId', 'UTF8', None, ),  # 14
)
all_structs.append(GuildListSection)
GuildListSection.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildListSectionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'sectionHeadingId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'sectionTopperId', 'UTF8', None, ),  # 11
    None,  # 12
    (13, TType.STRING, 'sectionBottomId', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'guildSectionItemId', 'UTF8', None, ),  # 14
)
all_structs.append(GuildListItemTemplate)
GuildListItemTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildListItemTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
)
all_structs.append(GuildListItem)
GuildListItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'guildListItemId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'guildListItemTemplateId', 'UTF8', None, ),  # 2
)
all_structs.append(ChatMessageTemplate)
ChatMessageTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatMessageTemplateId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'itemPrefab', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'topperPrefab', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'bottomPrefab', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'bottomPrefabLeader', 'UTF8', None, ),  # 13
)
all_structs.append(ChatMessage)
ChatMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatMessageId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'chatMessageTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'body', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'itemImage', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'topperImage', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'bottomImage', 'UTF8', None, ),  # 12
)
all_structs.append(CurrencyItem)
CurrencyItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currencyId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
)
all_structs.append(GiftMessageCurrencyItem)
GiftMessageCurrencyItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'giftMessageId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'currencyId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
)
all_structs.append(SimplePopupTemplate)
SimplePopupTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'simplePopupTemplateId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'prefab', 'UTF8', None, ),  # 10
)
all_structs.append(SimplePopup)
SimplePopup.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'simplePopupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'simplePopupTemplateId', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'buttonImage', 'UTF8', None, ),  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'title', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'body', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'buttonText', 'UTF8', None, ),  # 22
)
all_structs.append(GiftMessageTemplate)
GiftMessageTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'giftMessageTemplateId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'prefab', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'buttonImage', 'UTF8', None, ),  # 12
)
all_structs.append(GiftMessage)
GiftMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'giftMessageId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'giftMessageTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'inboxSectionId', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.BOOL, 'canClaimAll', None, None, ),  # 5
    (6, TType.STRING, 'giftMessagePopupId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'topIcon', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'messageLimitId', 'UTF8', None, ),  # 8
    None,  # 9
    (10, TType.STRING, 'title', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'subtitle', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'body', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'okayButtonText', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'cancelButtonText', 'UTF8', None, ),  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.LIST, 'currencyItems', (TType.STRUCT, [GiftMessageCurrencyItem, None], False), None, ),  # 20
)
all_structs.append(GiftMessagePopupTempate)
GiftMessagePopupTempate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'giftMessagePopupTempateId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'prefab', 'UTF8', None, ),  # 10
)
all_structs.append(GiftMessagePopup)
GiftMessagePopup.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'giftMessagePopupId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'giftMessagePopupTempateId', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'background', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'centerIcon', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'topIcon', 'UTF8', None, ),  # 12
)
all_structs.append(ScheduledGiftMessage)
ScheduledGiftMessage.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'giftMessageId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'startTime', [DateTimeUTC, None], None, ),  # 2
    (3, TType.I32, 'repeatPeriodMinutes', None, None, ),  # 3
    (4, TType.I32, 'repeatDurationMinutes', None, None, ),  # 4
    (5, TType.I32, 'numNotificationDays', None, None, ),  # 5
    (6, TType.I32, 'notificationCooldownSeconds', None, None, ),  # 6
)
all_structs.append(OfferPackShopItemTemplate)
OfferPackShopItemTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'offerPackShopItemTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'buyButtonImage', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'discountStickerImage', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'discountCrossoutImage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'timerBgImage', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'timerClockImage', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'clockHandImage', 'UTF8', None, ),  # 8
)
all_structs.append(OfferPackShopItem)
OfferPackShopItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'offerPackShopItemId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'offerPackShopItemTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'title', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'text1', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'text2', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'text3', 'UTF8', None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'buyButtonText', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'discountText', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'undiscountedText', 'UTF8', None, ),  # 12
)
all_structs.append(OfferPackZoomItemTemplate)
OfferPackZoomItemTemplate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'offerPackZoomItemTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefab', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'buyButtonImage', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'discountStickerImage', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'discountCrossoutImage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'timerBgImage', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'timerClockImage', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'timerHandImage', 'UTF8', None, ),  # 8
)
all_structs.append(OfferPackZoomItem)
OfferPackZoomItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'offerPackZoomItemId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'offerPackZoomItemTemplateId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'titleText', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'subtitleText', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'stickerText', 'UTF8', None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'text1', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'text2', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'text3', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'buyButtonText', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'discountText', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'undiscountedText', 'UTF8', None, ),  # 15
)
all_structs.append(Event)
Event.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'eventId', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRUCT, 'previewStartTime', [DateTimeUTC, None], None, ),  # 10
    (11, TType.STRUCT, 'mainStartTime', [DateTimeUTC, None], None, ),  # 11
    (12, TType.STRUCT, 'mainEndTime', [DateTimeUTC, None], None, ),  # 12
    (13, TType.STRUCT, 'recapEndTime', [DateTimeUTC, None], None, ),  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'repeatSeconds', None, None, ),  # 20
)
all_structs.append(EventActivity)
EventActivity.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'eventActivityId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'eventId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'eventListMainItemPrefab', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'eventListMainSectionId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'eventListOfferItemPrefab', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'eventListOfferSectionId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'display', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'eventListMainItemImage', 'UTF8', None, ),  # 8
)
all_structs.append(EventPhase)
EventPhase.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'eventId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'eventPhaseId', None, None, ),  # 2
)
all_structs.append(Activity)
Activity.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'activityId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'eventPhases', (TType.STRUCT, [EventPhase, None], False), None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'display', 'UTF8', None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'showRank', None, None, ),  # 20
    (21, TType.I32, 'hideRank', None, None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.LIST, 'bundleIds', (TType.STRING, 'UTF8', False), None, ),  # 30
)
all_structs.append(Enchantment)
Enchantment.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'enchantmentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'enchantAudioPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'actionAudioPath', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.BOOL, 'isPositive', None, None, ),  # 5
    (6, TType.STRING, 'effectPrefab', 'UTF8', None, ),  # 6
    None,  # 7
    (8, TType.STRING, 'actionPrefab', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'groupId', 'UTF8', None, ),  # 9
    None,  # 10
    (11, TType.I32, 'triggerTypeId', None, None, ),  # 11
    (12, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 12
    (13, TType.DOUBLE, 'triggerParam', None, None, ),  # 13
    None,  # 14
    (15, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    (21, TType.STRING, 'badgeImage', 'UTF8', None, ),  # 21
)
all_structs.append(PassiveSkill)
PassiveSkill.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'skillId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isStat', None, None, ),  # 2
    (3, TType.BOOL, 'isPositive', None, None, ),  # 3
    (4, TType.BOOL, 'matchAffinity', None, None, ),  # 4
    (5, TType.BOOL, 'matchGender', None, None, ),  # 5
    (6, TType.BOOL, 'oppositeGender', None, None, ),  # 6
    (7, TType.I32, 'affinityMatchId', None, None, ),  # 7
    (8, TType.I32, 'genderMatchId', None, None, ),  # 8
    (9, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 9
)
all_structs.append(StatBumper)
StatBumper.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'skillId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'effectPrefabPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 3
)
all_structs.append(HeroStat)
HeroStat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'heroStatId', None, None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'icon', 'UTF8', None, ),  # 3
    (4, TType.I32, 'displayOrder', None, None, ),  # 4
    (5, TType.BOOL, 'showInHeroInfo', None, None, ),  # 5
)
all_structs.append(HeroStatistic)
HeroStatistic.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'heroStatisticId', None, None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'icon', 'UTF8', None, ),  # 3
    (4, TType.I32, 'displayOrder', None, None, ),  # 4
)
all_structs.append(GearItem)
GearItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'gearItemId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'rarityId', None, None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.I32, 'requiresLevel', None, None, ),  # 5
    (6, TType.I32, 'craftGoldCost', None, None, ),  # 6
    (7, TType.I32, 'dropTypeId', None, None, ),  # 7
    (8, TType.I32, 'orderDeprecated', None, None, ),  # 8
    (9, TType.I32, 'valueCents', None, None, ),  # 9
    (10, TType.LIST, 'craftItemIds', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.LIST, 'craftItemCounts', (TType.I32, None, False), None, ),  # 11
    None,  # 12
    (13, TType.I32, 'progressionId', None, None, ),  # 13
    (14, TType.LIST, 'order', (TType.I32, None, False), None, ),  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    (22, TType.STRING, 'sellCurrencyId', 'UTF8', None, ),  # 22
    (23, TType.I32, 'sellCurrencyAmount', None, None, ),  # 23
    (24, TType.LIST, 'heroStatIds', (TType.I32, None, False), None, ),  # 24
    (25, TType.LIST, 'heroStatAmounts', (TType.DOUBLE, None, False), None, ),  # 25
)
all_structs.append(EvolutionLevelProfile)
EvolutionLevelProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'evolutionLevelProfileId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'gearItemId0', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'gearItemId1', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'gearItemId2', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'gearItemId3', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'gearItemId4', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'gearItemId5', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'costCurrencyId', 'UTF8', None, ),  # 8
    (9, TType.I32, 'costCurrencyCount', None, None, ),  # 9
    (10, TType.LIST, 'gearItemIds', (TType.STRING, 'UTF8', False), None, ),  # 10
    None,  # 11
    (12, TType.I32, 'numGearSlots', None, None, ),  # 12
    (13, TType.I32, 'valueCents', None, None, ),  # 13
)
all_structs.append(EvolutionProfile)
EvolutionProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'evolutionProfileId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'evolutionLevelProfiles', (TType.STRUCT, [EvolutionLevelProfile, None], False), None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'baseEvolutionLevel', None, None, ),  # 10
)
all_structs.append(EvolutionProfileLevelLink)
EvolutionProfileLevelLink.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'evolutionProfileId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'evolutionLevelProfileId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'evolutionLevelNum', None, None, ),  # 3
)
all_structs.append(Menu)
Menu.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'menuId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'backgroundImage', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'openSoundId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'closeSoundId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'hudProfileId', 'UTF8', None, ),  # 6
)
all_structs.append(Prefab)
Prefab.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'prefabId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 2
)
all_structs.append(Rarity)
Rarity.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rarityId', None, None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'iconFramePath', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'heroMaxLevelByEvolutionLevel', (TType.I32, None, False), None, ),  # 4
    (5, TType.STRING, 'gearIconFramePath', 'UTF8', None, ),  # 5
    (6, TType.I32, 'heroFusionXpBase', None, None, ),  # 6
    (7, TType.I32, 'heroFusionXpEffectiveLevelMultiplier', None, None, ),  # 7
    (8, TType.I32, 'itemValue', None, None, ),  # 8
    (9, TType.LIST, 'heroUpgradeGoldCosts', (TType.I32, None, False), None, ),  # 9
    (10, TType.I32, 'heroMaxEvolutionLevel', None, None, ),  # 10
)
all_structs.append(Achievement)
Achievement.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'achievementId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.I32, 'eventCount', None, None, ),  # 3
    (4, TType.STRING, 'groupId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'unlockAchievementId', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'isDaily', None, None, ),  # 6
    (7, TType.I32, 'dailyChestNum', None, None, ),  # 7
    (8, TType.I32, 'rankMin', None, None, ),  # 8
    (9, TType.I32, 'rankMax', None, None, ),  # 9
    (10, TType.STRING, 'title', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'description', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'iconImage', 'UTF8', None, ),  # 12
    (13, TType.LIST, 'rewardCurrencies', (TType.STRING, 'UTF8', False), None, ),  # 13
    (14, TType.LIST, 'rewardCurrencyCounts', (TType.I32, None, False), None, ),  # 14
    (15, TType.LIST, 'achievementEventIds', (TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.I32, 'displayOrder', None, None, ),  # 16
    (17, TType.STRING, 'clientGroupId', 'UTF8', None, ),  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    (23, TType.STRING, 'goButtonTutorialId', 'UTF8', None, ),  # 23
)
all_structs.append(PurchaseBonus)
PurchaseBonus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'purchaseBonusNumPurchases', None, None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'inboxMessageId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'rewardCurrencyIds', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.LIST, 'rewardCurrencyCounts', (TType.I32, None, False), None, ),  # 5
)
all_structs.append(PushNotification)
PushNotification.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pushNotificationId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(AndroidNotificationChannel)
AndroidNotificationChannel.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'channelId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.I32, 'importance', None, None, ),  # 4
    (5, TType.BOOL, 'canBypassDnd', None, None, ),  # 5
    (6, TType.BOOL, 'canShowBadge', None, None, ),  # 6
    (7, TType.BOOL, 'enabled', None, None, ),  # 7
    (8, TType.BOOL, 'enableLights', None, None, ),  # 8
    (9, TType.BOOL, 'enableVibration', None, None, ),  # 9
    (10, TType.I32, 'lockScreenVisibility', None, None, ),  # 10
    (11, TType.LIST, 'vibrationPattern', (TType.I64, None, False), None, ),  # 11
)
all_structs.append(IosNotificationThread)
IosNotificationThread.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'threadId', 'UTF8', None, ),  # 1
)
all_structs.append(LocalNotification)
LocalNotification.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'localNotificationId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'androidChannelId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'iosThreadId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'title', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'text', 'UTF8', None, ),  # 5
    (6, TType.I32, 'cooldownSeconds', None, None, ),  # 6
    (7, TType.I32, 'iosPresentationOption', None, None, ),  # 7
    (8, TType.BOOL, 'iosShowInForeground', None, None, ),  # 8
    (9, TType.STRING, 'iosSubtitle', 'UTF8', None, ),  # 9
)
all_structs.append(TrainingCamp)
TrainingCamp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'trainingCampId', None, None, ),  # 1
    (2, TType.I32, 'unlockRankId', None, None, ),  # 2
    (3, TType.I32, 'unlockVipLevelId', None, None, ),  # 3
    (4, TType.STRING, 'evolutionProfileId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'unlockGenericDialogId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'upgradeCellPrefab', 'UTF8', None, ),  # 6
)
all_structs.append(TrainingMethod)
TrainingMethod.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'trainingMethodId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'icon', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'freeRushTokenCurrencyId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'cellPrefab', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'assetListId', 'UTF8', None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'trainingDurationMinutes', None, None, ),  # 10
    (11, TType.I32, 'costRecruits', None, None, ),  # 11
    (12, TType.STRING, 'costCurrencyId', 'UTF8', None, ),  # 12
    (13, TType.I32, 'costCurrencyCount', None, None, ),  # 13
    (14, TType.LIST, 'costResourceIds', (TType.STRING, 'UTF8', False), None, ),  # 14
    (15, TType.LIST, 'costResourceCounts', (TType.I32, None, False), None, ),  # 15
    (16, TType.I32, 'rushCostGems', None, None, ),  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.LIST, 'rarities', (TType.I32, None, False), None, ),  # 30
    (31, TType.LIST, 'rarityDistributions', (TType.I32, None, False), None, ),  # 31
    (32, TType.LIST, 'affinities', (TType.I32, None, False), None, ),  # 32
    (33, TType.STRING, 'heroDisplayId', 'UTF8', None, ),  # 33
)
all_structs.append(TrainingMethodLink)
TrainingMethodLink.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'trainingMethodId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'trainingCampId', None, None, ),  # 2
    (3, TType.I32, 'unlockTrainingCampLevel', None, None, ),  # 3
)
all_structs.append(MinigameMusicTheme)
MinigameMusicTheme.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'minigameMusicThemeId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'path', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'numLevels', None, None, ),  # 10
)
all_structs.append(Badge)
Badge.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'badgeId', 'UTF8', None, ),  # 1
)
all_structs.append(RaidLeague)
RaidLeague.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'raidLeagueId', None, None, ),  # 1
    (2, TType.STRING, 'display', 'UTF8', None, ),  # 2
    (3, TType.I32, 'numTrophiesPromote', None, None, ),  # 3
    (4, TType.I32, 'numTrophiesDemote', None, None, ),  # 4
    (5, TType.STRING, 'raidCostCurrencyId', 'UTF8', None, ),  # 5
    (6, TType.I32, 'raidCostCurrencyCount', None, None, ),  # 6
    (7, TType.STRING, 'rerollCostCurrencyId', 'UTF8', None, ),  # 7
    (8, TType.I32, 'rerollCostCurrencyCount', None, None, ),  # 8
    (9, TType.STRING, 'titleImagePath', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'backgroundImagePath', 'UTF8', None, ),  # 10
)
all_structs.append(DailyHintItem)
DailyHintItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'text', 'UTF8', None, ),  # 1
)
all_structs.append(BeamAttack)
BeamAttack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'attackId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'projectileId', 'UTF8', None, ),  # 2
)
all_structs.append(Attack)
Attack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'attackId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'attackLaunchTypeId', None, None, ),  # 2
    (3, TType.DOUBLE, 'durationSeconds', None, None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'launchEffectPrefab', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'launchSoundClipId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'description', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    (13, TType.BOOL, 'isPositive', None, None, ),  # 13
    (14, TType.I32, 'affinityMatchId', None, None, ),  # 14
    (15, TType.I32, 'genderMatchId', None, None, ),  # 15
    (16, TType.I32, 'attackParentId', None, None, ),  # 16
    (17, TType.I32, 'targetTypeId', None, None, ),  # 17
)
all_structs.append(Projectile)
Projectile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'projectileId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.DOUBLE, 'speed', None, None, ),  # 3
    None,  # 4
    (5, TType.DOUBLE, 'polarVelocityDps', None, None, ),  # 5
    (6, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 6
    None,  # 7
    (8, TType.I32, 'lifespanTypeId', None, None, ),  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'projectileTrailId', 'UTF8', None, ),  # 12
    (13, TType.I32, 'targetTypeId', None, None, ),  # 13
    (14, TType.I32, 'aimTypeId', None, None, ),  # 14
    (15, TType.I32, 'motionTypeId', None, None, ),  # 15
    (16, TType.DOUBLE, 'lifespan', None, None, ),  # 16
    (17, TType.DOUBLE, 'durationSeconds', None, None, ),  # 17
    (18, TType.I32, 'wallBehaviorId', None, None, ),  # 18
    (19, TType.STRING, 'wallEffectPrefabPath', 'UTF8', None, ),  # 19
    None,  # 20
    None,  # 21
    (22, TType.I32, 'orientationTypeId', None, None, ),  # 22
    (23, TType.I32, 'projectileParentId', None, None, ),  # 23
    (24, TType.STRING, 'targetFxListId', 'UTF8', None, ),  # 24
    (25, TType.I32, 'motionEaseId', None, None, ),  # 25
    (26, TType.STRING, 'damageSoundId', 'UTF8', None, ),  # 26
    (27, TType.STRING, 'collisionSoundId', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'collisionFxListId', 'UTF8', None, ),  # 28
    (29, TType.STRING, 'bodyFxListId', 'UTF8', None, ),  # 29
    (30, TType.STRING, 'launchSoundId', 'UTF8', None, ),  # 30
)
all_structs.append(BeamProjectile)
BeamProjectile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'projectileId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'prefabPath', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'durationSeconds', None, None, ),  # 4
    (5, TType.STRING, 'sourceEffectPath', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'beamEffectPath', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'targetEffectPath', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'audioPath_notused', 'UTF8', None, ),  # 8
    (9, TType.DOUBLE, 'beamEffectLength', None, None, ),  # 9
    (10, TType.STRING, 'enchantmentId', 'UTF8', None, ),  # 10
    (11, TType.I32, 'targetTypeId', None, None, ),  # 11
    (12, TType.STRING, 'targetFxListId', 'UTF8', None, ),  # 12
)
all_structs.append(RadialProjectileAttack)
RadialProjectileAttack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'attackId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'degreesIncrement', None, None, ),  # 2
    (3, TType.DOUBLE, 'delayIncrementSeconds', None, None, ),  # 3
    (4, TType.DOUBLE, 'delayRotationSeconds', None, None, ),  # 4
    (5, TType.I32, 'numRotationsOld', None, None, ),  # 5
    None,  # 6
    (7, TType.STRING, 'projectileId', 'UTF8', None, ),  # 7
    (8, TType.DOUBLE, 'startDegrees', None, None, ),  # 8
    (9, TType.DOUBLE, 'numRotations', None, None, ),  # 9
)
all_structs.append(LaserAttack)
LaserAttack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'attackId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'degreesStart', None, None, ),  # 2
    (3, TType.DOUBLE, 'degreesIncrement', None, None, ),  # 3
    (4, TType.DOUBLE, 'damageRepeatSeconds', None, None, ),  # 4
    (5, TType.DOUBLE, 'laserWidth', None, None, ),  # 5
    None,  # 6
    (7, TType.STRING, 'projectileId', 'UTF8', None, ),  # 7
    (8, TType.DOUBLE, 'degreesSweep', None, None, ),  # 8
)
all_structs.append(ShootAttack)
ShootAttack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'attackId', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'degreesStart', None, None, ),  # 2
    (3, TType.DOUBLE, 'degreesIncrement', None, None, ),  # 3
    (4, TType.DOUBLE, 'damageRepeatSeconds', None, None, ),  # 4
    None,  # 5
    None,  # 6
    (7, TType.STRING, 'projectileId', 'UTF8', None, ),  # 7
    (8, TType.DOUBLE, 'distanceRepeat', None, None, ),  # 8
    (9, TType.DOUBLE, 'timeRepeat', None, None, ),  # 9
    (10, TType.I32, 'maxProjectiles', None, None, ),  # 10
)
all_structs.append(ProjectileTrail)
ProjectileTrail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'projectileTrailId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'projectileId', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'spawnDistance', None, None, ),  # 3
)
all_structs.append(ParticlesAttack)
ParticlesAttack.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'attackId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'skillStatProfileId', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'damageRepeatSeconds', None, None, ),  # 4
    (5, TType.DOUBLE, 'radius', None, None, ),  # 5
    (6, TType.STRING, 'effectListId', 'UTF8', None, ),  # 6
)
all_structs.append(AutoPurchaseListEntry)
AutoPurchaseListEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currencyId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'purchaseOfferId', 'UTF8', None, ),  # 2
)
all_structs.append(AutoPurchaseList)
AutoPurchaseList.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'currencyId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'purchaseOfferIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(ConfigCleaner)
ConfigCleaner.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'configCleanerNum', None, None, ),  # 1
    (2, TType.I32, 'configCleanerTypeId', None, None, ),  # 2
    (3, TType.STRING, 'display', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
)
all_structs.append(AutoConfigCleaner)
AutoConfigCleaner.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'configCleanerNum', None, None, ),  # 1
    (2, TType.LIST, 'tableNames', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'tableKeys', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'errorTableNames', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(SkillLevelUpCostEntry)
SkillLevelUpCostEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'levelNum', None, None, ),  # 1
    (2, TType.I32, 'levelUpGoldCost', None, None, ),  # 2
)
all_structs.append(SkillSlotMinLevelEntry)
SkillSlotMinLevelEntry.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'slotNum', None, None, ),  # 1
    (2, TType.I32, 'minLevel', None, None, ),  # 2
)
all_structs.append(SimulationTestEntry)
SimulationTestEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'simulationTestId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'order', None, None, ),  # 2
    (3, TType.I32, 'numSamples', None, None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    (9, TType.I32, 'resultTeam1WinCount', None, None, ),  # 9
    (10, TType.I32, 'team1Hp', None, None, ),  # 10
    (11, TType.I32, 'team1Damage', None, None, ),  # 11
    (12, TType.I32, 'team1Strength', None, None, ),  # 12
    None,  # 13
    (14, TType.I32, 'team1PhysicalAttack', None, None, ),  # 14
    (15, TType.I32, 'team1PhysicalDefense', None, None, ),  # 15
    (16, TType.I32, 'team1Intelligence', None, None, ),  # 16
    (17, TType.I32, 'team1MagicAttack', None, None, ),  # 17
    (18, TType.I32, 'team1MagicDefense', None, None, ),  # 18
    None,  # 19
    (20, TType.I32, 'team2Hp', None, None, ),  # 20
    (21, TType.I32, 'team2Damage', None, None, ),  # 21
    (22, TType.I32, 'team2Strength', None, None, ),  # 22
    None,  # 23
    (24, TType.I32, 'team2PhysicalAttack', None, None, ),  # 24
    (25, TType.I32, 'team2PhysicalDefense', None, None, ),  # 25
    (26, TType.I32, 'team2Intelligence', None, None, ),  # 26
    (27, TType.I32, 'team2MagicAttack', None, None, ),  # 27
    (28, TType.I32, 'team3MagicDefense', None, None, ),  # 28
)
all_structs.append(SimulationTest)
SimulationTest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'simulationTestId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'simulationTestEntries', (TType.STRUCT, [SimulationTestEntry, None], False), None, ),  # 2
    (3, TType.BOOL, 'autoRun', None, None, ),  # 3
)
all_structs.append(RequestInfo)
RequestInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestUrl', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'safeUserFieldIds', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'dangerUserFieldIds', (TType.I32, None, False), None, ),  # 3
    (4, TType.BOOL, 'suppressUserObject', None, None, ),  # 4
    (5, TType.BOOL, 'userInBody', None, None, ),  # 5
    (6, TType.BOOL, 'responseInBody', None, None, ),  # 6
)
all_structs.append(RequestInfoFieldEntry)
RequestInfoFieldEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestUrl', 'UTF8', None, ),  # 1
    (2, TType.I32, 'userFieldId', None, None, ),  # 2
)
all_structs.append(AssetList)
AssetList.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'assetListId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'assetIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(AssetListEntry)
AssetListEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'assetListId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'assetId', 'UTF8', None, ),  # 2
)
all_structs.append(TipOfTheDay)
TipOfTheDay.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tipOfTheDayId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'eventId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'text', 'UTF8', None, ),  # 3
)
all_structs.append(Data)
Data.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'campaigns', (TType.STRING, 'UTF8', TType.STRUCT, [Campaign, None], False), None, ),  # 1
    (2, TType.MAP, 'levels', (TType.STRING, 'UTF8', TType.STRUCT, [Level, None], False), None, ),  # 2
    (3, TType.MAP, 'levelScenes', (TType.STRING, 'UTF8', TType.STRUCT, [LevelScene, None], False), None, ),  # 3
    (4, TType.LIST, 'enemySpawnPoints', (TType.STRUCT, [EnemySpawnPoint, None], False), None, ),  # 4
    (5, TType.MAP, 'purchaseBonuses', (TType.I32, None, TType.STRUCT, [PurchaseBonus, None], False), None, ),  # 5
    (6, TType.MAP, 'purchaseOffers', (TType.STRING, 'UTF8', TType.STRUCT, [PurchaseOffer, None], False), None, ),  # 6
    (7, TType.MAP, 'gemPasses', (TType.STRING, 'UTF8', TType.STRUCT, [GemPass, None], False), None, ),  # 7
    (8, TType.MAP, 'gemPacks', (TType.STRING, 'UTF8', TType.STRUCT, [GemPack, None], False), None, ),  # 8
    (9, TType.MAP, 'subscriptionPurchaseOffers', (TType.STRING, 'UTF8', TType.STRUCT, [SubscriptionPurchaseOffer, None], False), None, ),  # 9
    (10, TType.MAP, 'ranks', (TType.I32, None, TType.STRUCT, [Rank, None], False), None, ),  # 10
    (11, TType.LIST, 'campaignOrder', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.MAP, 'heroBodies', (TType.STRING, 'UTF8', TType.STRUCT, [HeroBody, None], False), None, ),  # 12
    (13, TType.MAP, 'rarities', (TType.I32, None, TType.STRUCT, [Rarity, None], False), None, ),  # 13
    (14, TType.MAP, 'heroStatistics', (TType.I32, None, TType.STRUCT, [HeroStatistic, None], False), None, ),  # 14
    (15, TType.MAP, 'pushNotifications', (TType.STRING, 'UTF8', TType.STRUCT, [PushNotification, None], False), None, ),  # 15
    (16, TType.LIST, 'scheduledGiftMessages', (TType.STRUCT, [ScheduledGiftMessage, None], False), None, ),  # 16
    (17, TType.LIST, 'heroLevelXp', (TType.STRUCT, [HeroLevelXp, None], False), None, ),  # 17
    (18, TType.MAP, 'strengthProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [StrengthProfile, None], False), None, ),  # 18
    (19, TType.MAP, 'heroSoundProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [HeroSoundProfile, None], False), None, ),  # 19
    (20, TType.MAP, 'colors', (TType.I32, None, TType.STRUCT, [Color, None], False), None, ),  # 20
    (21, TType.MAP, 'quests', (TType.STRING, 'UTF8', TType.STRUCT, [Achievement, None], False), None, ),  # 21
    (22, TType.MAP, 'achievementEventIdHints', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 22
    (23, TType.LIST, 'vipLevels', (TType.STRUCT, [VipLevel, None], False), None, ),  # 23
    (24, TType.MAP, 'genericDialogTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [GenericDialogTemplate, None], False), None, ),  # 24
    (25, TType.MAP, 'genericDialogs', (TType.STRING, 'UTF8', TType.STRUCT, [GenericDialog, None], False), None, ),  # 25
    (26, TType.MAP, 'badges', (TType.STRING, 'UTF8', TType.STRUCT, [Badge, None], False), None, ),  # 26
    (27, TType.MAP, 'raidLeagues', (TType.I32, None, TType.STRUCT, [RaidLeague, None], False), None, ),  # 27
    (28, TType.MAP, 'heroStats', (TType.I32, None, TType.STRUCT, [HeroStat, None], False), None, ),  # 28
    None,  # 29
    (30, TType.MAP, 'affinities', (TType.I32, None, TType.STRUCT, [Affinity, None], False), None, ),  # 30
    (31, TType.MAP, 'shopSections', (TType.STRING, 'UTF8', TType.STRUCT, [ShopSection, None], False), None, ),  # 31
    (32, TType.MAP, 'eventSections', (TType.STRING, 'UTF8', TType.STRUCT, [EventSection, None], False), None, ),  # 32
    None,  # 33
    (34, TType.MAP, 'trainingCamps', (TType.I32, None, TType.STRUCT, [TrainingCamp, None], False), None, ),  # 34
    (35, TType.MAP, 'trainingMethods', (TType.STRING, 'UTF8', TType.STRUCT, [TrainingMethod, None], False), None, ),  # 35
    (36, TType.LIST, 'trainingMethodLinks', (TType.STRUCT, [TrainingMethodLink, None], False), None, ),  # 36
    (37, TType.LIST, 'dailyHintItems', (TType.STRUCT, [DailyHintItem, None], False), None, ),  # 37
    (38, TType.MAP, 'physicsProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [PhysicsProfile, None], False), None, ),  # 38
    (39, TType.MAP, 'animationProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [AnimationProfile, None], False), None, ),  # 39
    (40, TType.MAP, 'soundClips', (TType.STRING, 'UTF8', TType.STRUCT, [SoundClip, None], False), None, ),  # 40
    (41, TType.MAP, 'soundClipLists', (TType.STRING, 'UTF8', TType.STRUCT, [SoundClipList, None], False), None, ),  # 41
    (42, TType.MAP, 'minigameMusicThemes', (TType.STRING, 'UTF8', TType.STRUCT, [MinigameMusicTheme, None], False), None, ),  # 42
    (43, TType.LIST, 'currencyRankMaxEntries', (TType.STRUCT, [CurrencyRankMaxEntry, None], False), None, ),  # 43
    (44, TType.MAP, 'heroSummons', (TType.STRING, 'UTF8', TType.STRUCT, [HeroSummon, None], False), None, ),  # 44
    (45, TType.I32, 'currentConfigCleanerNum', None, None, ),  # 45
    (46, TType.MAP, 'configCleaners', (TType.I32, None, TType.STRUCT, [ConfigCleaner, None], False), None, ),  # 46
    (47, TType.MAP, 'autoConfigCleaners', (TType.I32, None, TType.STRUCT, [AutoConfigCleaner, None], False), None, ),  # 47
    (48, TType.MAP, 'currencyTargets', (TType.I32, None, TType.STRUCT, [CurrencyTarget, None], False), None, ),  # 48
    (49, TType.MAP, 'cashPurchaseInfos', (TType.STRING, 'UTF8', TType.STRUCT, [CashPurchaseInfo, None], False), None, ),  # 49
    (50, TType.MAP, 'chests', (TType.STRING, 'UTF8', TType.STRUCT, [Chest, None], False), None, ),  # 50
    (51, TType.LIST, 'guaranteedHeroes', (TType.STRUCT, [GuaranteedHero, None], False), None, ),  # 51
    (52, TType.LIST, 'chestSequence', (TType.STRING, 'UTF8', False), None, ),  # 52
    (53, TType.MAP, 'genders', (TType.I32, None, TType.STRUCT, [Gender, None], False), None, ),  # 53
    (54, TType.LIST, 'guaranteedCurrencies', (TType.STRUCT, [GuaranteedCurrency, None], False), None, ),  # 54
    None,  # 55
    (56, TType.MAP, 'tutorials', (TType.STRING, 'UTF8', TType.STRUCT, [Tutorial, None], False), None, ),  # 56
    (57, TType.MAP, 'tutorialSteps', (TType.STRING, 'UTF8', TType.STRUCT, [TutorialStep, None], False), None, ),  # 57
    None,  # 58
    (59, TType.LIST, 'assetListEntries', (TType.STRUCT, [AssetListEntry, None], False), None, ),  # 59
    (60, TType.MAP, 'assetLists', (TType.STRING, 'UTF8', TType.STRUCT, [AssetList, None], False), None, ),  # 60
    None,  # 61
    (62, TType.MAP, 'currencies', (TType.STRING, 'UTF8', TType.STRUCT, [Currency, None], False), None, ),  # 62
    (63, TType.MAP, 'currencyRecharges', (TType.STRING, 'UTF8', TType.STRUCT, [CurrencyRecharge, None], False), None, ),  # 63
    (64, TType.MAP, 'attacks', (TType.STRING, 'UTF8', TType.STRUCT, [Attack, None], False), None, ),  # 64
    (65, TType.MAP, 'radialProjectileAttacks', (TType.STRING, 'UTF8', TType.STRUCT, [RadialProjectileAttack, None], False), None, ),  # 65
    (66, TType.MAP, 'laserAttacks', (TType.STRING, 'UTF8', TType.STRUCT, [LaserAttack, None], False), None, ),  # 66
    (67, TType.MAP, 'shootAttacks', (TType.STRING, 'UTF8', TType.STRUCT, [ShootAttack, None], False), None, ),  # 67
    (68, TType.MAP, 'particlesAttacks', (TType.STRING, 'UTF8', TType.STRUCT, [ParticlesAttack, None], False), None, ),  # 68
    (69, TType.MAP, 'beamAttacks', (TType.STRING, 'UTF8', TType.STRUCT, [BeamAttack, None], False), None, ),  # 69
    (70, TType.MAP, 'runtimePlatforms', (TType.STRING, 'UTF8', TType.STRUCT, [RuntimePlatform, None], False), None, ),  # 70
    (71, TType.LIST, 'autoPurchaseListEntries', (TType.STRUCT, [AutoPurchaseListEntry, None], False), None, ),  # 71
    (72, TType.MAP, 'autoPurchaseLists', (TType.STRING, 'UTF8', TType.STRUCT, [AutoPurchaseList, None], False), None, ),  # 72
    (73, TType.MAP, 'projectiles', (TType.STRING, 'UTF8', TType.STRUCT, [Projectile, None], False), None, ),  # 73
    (74, TType.LIST, 'skillLevelUpCostEntries', (TType.STRUCT, [SkillLevelUpCostEntry, None], False), None, ),  # 74
    (75, TType.LIST, 'skillLevelUpGoldCosts', (TType.I32, None, False), None, ),  # 75
    (76, TType.LIST, 'skillSlotMinLevelEntries', (TType.STRUCT, [SkillSlotMinLevelEntry, None], False), None, ),  # 76
    (77, TType.LIST, 'skillSlotMinimumLevels', (TType.I32, None, False), None, ),  # 77
    (78, TType.MAP, 'skillStatProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [SkillStatProfile, None], False), None, ),  # 78
    (79, TType.MAP, 'skills', (TType.STRING, 'UTF8', TType.STRUCT, [Skill, None], False), None, ),  # 79
    (80, TType.MAP, 'projectileTrails', (TType.STRING, 'UTF8', TType.STRUCT, [ProjectileTrail, None], False), None, ),  # 80
    (81, TType.MAP, 'beamProjectiles', (TType.STRING, 'UTF8', TType.STRUCT, [BeamProjectile, None], False), None, ),  # 81
    (82, TType.MAP, 'edgeElements', (TType.STRING, 'UTF8', TType.STRUCT, [EdgeElement, None], False), None, ),  # 82
    (83, TType.LIST, 'skillStatProfileEntries', (TType.STRUCT, [SkillStatProfileEntry, None], False), None, ),  # 83
    None,  # 84
    (85, TType.MAP, 'requestInfo', (TType.STRING, 'UTF8', TType.STRUCT, [RequestInfo, None], False), None, ),  # 85
    (86, TType.LIST, 'safeFieldEntries', (TType.STRUCT, [RequestInfoFieldEntry, None], False), None, ),  # 86
    (87, TType.LIST, 'dangerFieldEntries', (TType.STRUCT, [RequestInfoFieldEntry, None], False), None, ),  # 87
    (88, TType.LIST, 'edgeElementEntries', (TType.STRUCT, [EdgeElementEntry, None], False), None, ),  # 88
    (89, TType.MAP, 'edgeElementsProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [EdgeElementsProfile, None], False), None, ),  # 89
    (90, TType.MAP, 'simulationTests', (TType.STRING, 'UTF8', TType.STRUCT, [SimulationTest, None], False), None, ),  # 90
    (91, TType.LIST, 'simulationTestEntries', (TType.STRUCT, [SimulationTestEntry, None], False), None, ),  # 91
    None,  # 92
    (93, TType.MAP, 'offerPackShopItemTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [OfferPackShopItemTemplate, None], False), None, ),  # 93
    (94, TType.MAP, 'offerPackShopItems', (TType.STRING, 'UTF8', TType.STRUCT, [OfferPackShopItem, None], False), None, ),  # 94
    (95, TType.MAP, 'offerPackZoomItemTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [OfferPackZoomItemTemplate, None], False), None, ),  # 95
    (96, TType.MAP, 'offerPackZoomItems', (TType.STRING, 'UTF8', TType.STRUCT, [OfferPackZoomItem, None], False), None, ),  # 96
    None,  # 97
    (98, TType.MAP, 'visualEffectsProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [VisualEffectsProfile, None], False), None, ),  # 98
    None,  # 99
    (100, TType.MAP, 'heroSkillIcons', (TType.STRING, 'UTF8', TType.STRUCT, [HeroSkillIcon, None], False), None, ),  # 100
    (101, TType.MAP, 'prefabs', (TType.STRING, 'UTF8', TType.STRUCT, [Prefab, None], False), None, ),  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    (111, TType.STRUCT, 'settings', [Settings, None], None, ),  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    (120, TType.MAP, 'events', (TType.STRING, 'UTF8', TType.STRUCT, [Event, None], False), None, ),  # 120
    (121, TType.MAP, 'effectLists', (TType.STRING, 'UTF8', TType.STRUCT, [EffectList, None], False), None, ),  # 121
    (122, TType.LIST, 'effectListEntries', (TType.STRUCT, [EffectListEntry, None], False), None, ),  # 122
    (123, TType.MAP, 'hudProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [HudProfile, None], False), None, ),  # 123
    (124, TType.MAP, 'tipOfTheDays', (TType.STRING, 'UTF8', TType.STRUCT, [TipOfTheDay, None], False), None, ),  # 124
    (125, TType.MAP, 'androidNotificationChannels', (TType.STRING, 'UTF8', TType.STRUCT, [AndroidNotificationChannel, None], False), None, ),  # 125
    (126, TType.MAP, 'iosNotificationThreads', (TType.STRING, 'UTF8', TType.STRUCT, [IosNotificationThread, None], False), None, ),  # 126
    (127, TType.MAP, 'localNotifications', (TType.STRING, 'UTF8', TType.STRUCT, [LocalNotification, None], False), None, ),  # 127
    None,  # 128
    None,  # 129
    (130, TType.MAP, 'locations', (TType.STRING, 'UTF8', TType.STRUCT, [Location, None], False), None, ),  # 130
    (131, TType.MAP, 'eventActivities', (TType.STRING, 'UTF8', TType.STRUCT, [EventActivity, None], False), None, ),  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    (140, TType.MAP, 'sectionHeadingTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [SectionHeadingTemplate, None], False), None, ),  # 140
    (141, TType.MAP, 'sectionHeadings', (TType.STRING, 'UTF8', TType.STRUCT, [SectionHeading, None], False), None, ),  # 141
    (142, TType.MAP, 'sectionTopperTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [SectionTopperTemplate, None], False), None, ),  # 142
    (143, TType.MAP, 'sectionToppers', (TType.STRING, 'UTF8', TType.STRUCT, [SectionTopper, None], False), None, ),  # 143
    (144, TType.MAP, 'sectionBottomTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [SectionBottomTemplate, None], False), None, ),  # 144
    (145, TType.MAP, 'sectionBottoms', (TType.STRING, 'UTF8', TType.STRUCT, [SectionBottom, None], False), None, ),  # 145
    (146, TType.MAP, 'inboxSections', (TType.STRING, 'UTF8', TType.STRUCT, [InboxSection, None], False), None, ),  # 146
    (147, TType.MAP, 'guildListSections', (TType.STRING, 'UTF8', TType.STRUCT, [GuildListSection, None], False), None, ),  # 147
    (148, TType.MAP, 'guildListItemTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [GuildListItemTemplate, None], False), None, ),  # 148
    (149, TType.MAP, 'guildListItems', (TType.STRING, 'UTF8', TType.STRUCT, [GuildListItem, None], False), None, ),  # 149
    (150, TType.MAP, 'guildMemberListItemTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [GuildMemberListItemTemplate, None], False), None, ),  # 150
    (151, TType.MAP, 'guildMemberListItems', (TType.STRING, 'UTF8', TType.STRUCT, [GuildMemberListItem, None], False), None, ),  # 151
    (152, TType.MAP, 'guildMemberListSections', (TType.STRING, 'UTF8', TType.STRUCT, [GuildMemberListSection, None], False), None, ),  # 152
    (153, TType.MAP, 'guildSectionItemTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [GuildSectionItemTemplate, None], False), None, ),  # 153
    (154, TType.MAP, 'guildSectionItems', (TType.STRING, 'UTF8', TType.STRUCT, [GuildSectionItem, None], False), None, ),  # 154
    (155, TType.MAP, 'simplePopups', (TType.STRING, 'UTF8', TType.STRUCT, [SimplePopup, None], False), None, ),  # 155
    (156, TType.MAP, 'simplePopupTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [SimplePopupTemplate, None], False), None, ),  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    (160, TType.LIST, 'giftMessageCurrencyItems', (TType.STRUCT, [GiftMessageCurrencyItem, None], False), None, ),  # 160
    (161, TType.MAP, 'giftMessageTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [GiftMessageTemplate, None], False), None, ),  # 161
    (162, TType.MAP, 'giftMessages', (TType.STRING, 'UTF8', TType.STRUCT, [GiftMessage, None], False), None, ),  # 162
    (163, TType.MAP, 'giftMessagePopupTempates', (TType.STRING, 'UTF8', TType.STRUCT, [GiftMessagePopupTempate, None], False), None, ),  # 163
    (164, TType.MAP, 'giftMessagePopups', (TType.STRING, 'UTF8', TType.STRUCT, [GiftMessagePopup, None], False), None, ),  # 164
    (165, TType.LIST, 'GuildSettingssKeyValue', (TType.STRUCT, [SettingKeyValue, None], False), None, ),  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    (170, TType.MAP, 'enchantments', (TType.STRING, 'UTF8', TType.STRUCT, [Enchantment, None], False), None, ),  # 170
    (171, TType.MAP, 'gearItems', (TType.STRING, 'UTF8', TType.STRUCT, [GearItem, None], False), None, ),  # 171
    (172, TType.MAP, 'evolutionProfiles', (TType.STRING, 'UTF8', TType.STRUCT, [EvolutionProfile, None], False), None, ),  # 172
    (173, TType.MAP, 'evolutionLevelProfiles_', (TType.STRING, 'UTF8', TType.STRUCT, [EvolutionLevelProfile, None], False), None, ),  # 173
    (174, TType.LIST, 'evolutionProfileLevelLinks', (TType.STRUCT, [EvolutionProfileLevelLink, None], False), None, ),  # 174
    (175, TType.MAP, 'passiveSkills', (TType.STRING, 'UTF8', TType.STRUCT, [PassiveSkill, None], False), None, ),  # 175
    None,  # 176
    (177, TType.MAP, 'statBumpers', (TType.STRING, 'UTF8', TType.STRUCT, [StatBumper, None], False), None, ),  # 177
    None,  # 178
    None,  # 179
    (180, TType.MAP, 'userIcons', (TType.STRING, 'UTF8', TType.STRUCT, [UserIcon, None], False), None, ),  # 180
    (181, TType.MAP, 'userFrames', (TType.STRING, 'UTF8', TType.STRUCT, [UserFrame, None], False), None, ),  # 181
    (182, TType.MAP, 'stringTable', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 182
    (183, TType.MAP, 'boolTable', (TType.STRING, 'UTF8', TType.BOOL, None, False), None, ),  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    (190, TType.MAP, 'chatMessageTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [ChatMessageTemplate, None], False), None, ),  # 190
    (191, TType.MAP, 'chatMessages', (TType.STRING, 'UTF8', TType.STRUCT, [ChatMessage, None], False), None, ),  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    (200, TType.MAP, 'serverErrorDialogTemplates', (TType.STRING, 'UTF8', TType.STRUCT, [ServerErrorDialogTemplate, None], False), None, ),  # 200
    (201, TType.MAP, 'serverErrorMessages', (TType.I32, None, TType.STRUCT, [ServerErrorMessage, None], False), None, ),  # 201
    (202, TType.MAP, 'menus', (TType.STRING, 'UTF8', TType.STRUCT, [Menu, None], False), None, ),  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    None,  # 300
    None,  # 301
    None,  # 302
    None,  # 303
    None,  # 304
    None,  # 305
    None,  # 306
    None,  # 307
    None,  # 308
    None,  # 309
    None,  # 310
    None,  # 311
    None,  # 312
    None,  # 313
    None,  # 314
    None,  # 315
    None,  # 316
    None,  # 317
    None,  # 318
    None,  # 319
    None,  # 320
    None,  # 321
    None,  # 322
    None,  # 323
    None,  # 324
    None,  # 325
    None,  # 326
    None,  # 327
    None,  # 328
    None,  # 329
    None,  # 330
    None,  # 331
    None,  # 332
    None,  # 333
    None,  # 334
    None,  # 335
    None,  # 336
    None,  # 337
    None,  # 338
    None,  # 339
    None,  # 340
    None,  # 341
    None,  # 342
    None,  # 343
    None,  # 344
    None,  # 345
    None,  # 346
    None,  # 347
    None,  # 348
    None,  # 349
    None,  # 350
    None,  # 351
    None,  # 352
    None,  # 353
    None,  # 354
    None,  # 355
    None,  # 356
    None,  # 357
    None,  # 358
    None,  # 359
    None,  # 360
    None,  # 361
    None,  # 362
    None,  # 363
    None,  # 364
    None,  # 365
    None,  # 366
    None,  # 367
    None,  # 368
    None,  # 369
    None,  # 370
    None,  # 371
    None,  # 372
    None,  # 373
    None,  # 374
    None,  # 375
    None,  # 376
    None,  # 377
    None,  # 378
    None,  # 379
    None,  # 380
    None,  # 381
    None,  # 382
    None,  # 383
    None,  # 384
    None,  # 385
    None,  # 386
    None,  # 387
    None,  # 388
    None,  # 389
    None,  # 390
    None,  # 391
    None,  # 392
    None,  # 393
    None,  # 394
    None,  # 395
    None,  # 396
    None,  # 397
    None,  # 398
    None,  # 399
    None,  # 400
    None,  # 401
    None,  # 402
    None,  # 403
    None,  # 404
    None,  # 405
    None,  # 406
    None,  # 407
    None,  # 408
    None,  # 409
    None,  # 410
    None,  # 411
    None,  # 412
    None,  # 413
    None,  # 414
    None,  # 415
    None,  # 416
    None,  # 417
    None,  # 418
    None,  # 419
    None,  # 420
    None,  # 421
    None,  # 422
    None,  # 423
    None,  # 424
    None,  # 425
    None,  # 426
    None,  # 427
    None,  # 428
    None,  # 429
    None,  # 430
    None,  # 431
    None,  # 432
    None,  # 433
    None,  # 434
    None,  # 435
    None,  # 436
    None,  # 437
    None,  # 438
    None,  # 439
    None,  # 440
    None,  # 441
    None,  # 442
    None,  # 443
    None,  # 444
    None,  # 445
    None,  # 446
    None,  # 447
    None,  # 448
    None,  # 449
    None,  # 450
    None,  # 451
    None,  # 452
    None,  # 453
    None,  # 454
    None,  # 455
    None,  # 456
    None,  # 457
    None,  # 458
    None,  # 459
    None,  # 460
    None,  # 461
    None,  # 462
    None,  # 463
    None,  # 464
    None,  # 465
    None,  # 466
    None,  # 467
    None,  # 468
    None,  # 469
    None,  # 470
    None,  # 471
    None,  # 472
    None,  # 473
    None,  # 474
    None,  # 475
    None,  # 476
    None,  # 477
    None,  # 478
    None,  # 479
    None,  # 480
    None,  # 481
    None,  # 482
    None,  # 483
    None,  # 484
    None,  # 485
    None,  # 486
    None,  # 487
    None,  # 488
    None,  # 489
    None,  # 490
    None,  # 491
    None,  # 492
    None,  # 493
    None,  # 494
    None,  # 495
    None,  # 496
    None,  # 497
    None,  # 498
    None,  # 499
    None,  # 500
    None,  # 501
    None,  # 502
    None,  # 503
    None,  # 504
    None,  # 505
    None,  # 506
    None,  # 507
    None,  # 508
    None,  # 509
    None,  # 510
    None,  # 511
    None,  # 512
    None,  # 513
    None,  # 514
    None,  # 515
    None,  # 516
    None,  # 517
    None,  # 518
    None,  # 519
    None,  # 520
    None,  # 521
    None,  # 522
    None,  # 523
    None,  # 524
    None,  # 525
    None,  # 526
    None,  # 527
    None,  # 528
    None,  # 529
    None,  # 530
    None,  # 531
    None,  # 532
    None,  # 533
    None,  # 534
    None,  # 535
    None,  # 536
    None,  # 537
    None,  # 538
    None,  # 539
    None,  # 540
    None,  # 541
    None,  # 542
    None,  # 543
    None,  # 544
    None,  # 545
    None,  # 546
    None,  # 547
    None,  # 548
    None,  # 549
    None,  # 550
    None,  # 551
    None,  # 552
    None,  # 553
    None,  # 554
    None,  # 555
    None,  # 556
    None,  # 557
    None,  # 558
    None,  # 559
    None,  # 560
    None,  # 561
    None,  # 562
    None,  # 563
    None,  # 564
    None,  # 565
    None,  # 566
    None,  # 567
    None,  # 568
    None,  # 569
    None,  # 570
    None,  # 571
    None,  # 572
    None,  # 573
    None,  # 574
    None,  # 575
    None,  # 576
    None,  # 577
    None,  # 578
    None,  # 579
    None,  # 580
    None,  # 581
    None,  # 582
    None,  # 583
    None,  # 584
    None,  # 585
    None,  # 586
    None,  # 587
    None,  # 588
    None,  # 589
    None,  # 590
    None,  # 591
    None,  # 592
    None,  # 593
    None,  # 594
    None,  # 595
    None,  # 596
    None,  # 597
    None,  # 598
    None,  # 599
    None,  # 600
    None,  # 601
    None,  # 602
    None,  # 603
    None,  # 604
    None,  # 605
    None,  # 606
    None,  # 607
    None,  # 608
    None,  # 609
    None,  # 610
    None,  # 611
    None,  # 612
    None,  # 613
    None,  # 614
    None,  # 615
    None,  # 616
    None,  # 617
    None,  # 618
    None,  # 619
    None,  # 620
    None,  # 621
    None,  # 622
    None,  # 623
    None,  # 624
    None,  # 625
    None,  # 626
    None,  # 627
    None,  # 628
    None,  # 629
    None,  # 630
    None,  # 631
    None,  # 632
    None,  # 633
    None,  # 634
    None,  # 635
    None,  # 636
    None,  # 637
    None,  # 638
    None,  # 639
    None,  # 640
    None,  # 641
    None,  # 642
    None,  # 643
    None,  # 644
    None,  # 645
    None,  # 646
    None,  # 647
    None,  # 648
    None,  # 649
    None,  # 650
    None,  # 651
    None,  # 652
    None,  # 653
    None,  # 654
    None,  # 655
    None,  # 656
    None,  # 657
    None,  # 658
    None,  # 659
    None,  # 660
    None,  # 661
    None,  # 662
    None,  # 663
    None,  # 664
    None,  # 665
    None,  # 666
    None,  # 667
    None,  # 668
    None,  # 669
    None,  # 670
    None,  # 671
    None,  # 672
    None,  # 673
    None,  # 674
    None,  # 675
    None,  # 676
    None,  # 677
    None,  # 678
    None,  # 679
    None,  # 680
    None,  # 681
    None,  # 682
    None,  # 683
    None,  # 684
    None,  # 685
    None,  # 686
    None,  # 687
    None,  # 688
    None,  # 689
    None,  # 690
    None,  # 691
    None,  # 692
    None,  # 693
    None,  # 694
    None,  # 695
    None,  # 696
    None,  # 697
    None,  # 698
    None,  # 699
    None,  # 700
    None,  # 701
    None,  # 702
    None,  # 703
    None,  # 704
    None,  # 705
    None,  # 706
    None,  # 707
    None,  # 708
    None,  # 709
    None,  # 710
    None,  # 711
    None,  # 712
    None,  # 713
    None,  # 714
    None,  # 715
    None,  # 716
    None,  # 717
    None,  # 718
    None,  # 719
    None,  # 720
    None,  # 721
    None,  # 722
    None,  # 723
    None,  # 724
    None,  # 725
    None,  # 726
    None,  # 727
    None,  # 728
    None,  # 729
    None,  # 730
    None,  # 731
    None,  # 732
    None,  # 733
    None,  # 734
    None,  # 735
    None,  # 736
    None,  # 737
    None,  # 738
    None,  # 739
    None,  # 740
    None,  # 741
    None,  # 742
    None,  # 743
    None,  # 744
    None,  # 745
    None,  # 746
    None,  # 747
    None,  # 748
    None,  # 749
    None,  # 750
    None,  # 751
    None,  # 752
    None,  # 753
    None,  # 754
    None,  # 755
    None,  # 756
    None,  # 757
    None,  # 758
    None,  # 759
    None,  # 760
    None,  # 761
    None,  # 762
    None,  # 763
    None,  # 764
    None,  # 765
    None,  # 766
    None,  # 767
    None,  # 768
    None,  # 769
    None,  # 770
    None,  # 771
    None,  # 772
    None,  # 773
    None,  # 774
    None,  # 775
    None,  # 776
    None,  # 777
    None,  # 778
    None,  # 779
    None,  # 780
    None,  # 781
    None,  # 782
    None,  # 783
    None,  # 784
    None,  # 785
    None,  # 786
    None,  # 787
    None,  # 788
    None,  # 789
    None,  # 790
    None,  # 791
    None,  # 792
    None,  # 793
    None,  # 794
    None,  # 795
    None,  # 796
    None,  # 797
    None,  # 798
    None,  # 799
    None,  # 800
    None,  # 801
    None,  # 802
    None,  # 803
    None,  # 804
    None,  # 805
    None,  # 806
    None,  # 807
    None,  # 808
    None,  # 809
    None,  # 810
    None,  # 811
    None,  # 812
    None,  # 813
    None,  # 814
    None,  # 815
    None,  # 816
    None,  # 817
    None,  # 818
    None,  # 819
    None,  # 820
    None,  # 821
    None,  # 822
    None,  # 823
    None,  # 824
    None,  # 825
    None,  # 826
    None,  # 827
    None,  # 828
    None,  # 829
    None,  # 830
    None,  # 831
    None,  # 832
    None,  # 833
    None,  # 834
    None,  # 835
    None,  # 836
    None,  # 837
    None,  # 838
    None,  # 839
    None,  # 840
    None,  # 841
    None,  # 842
    None,  # 843
    None,  # 844
    None,  # 845
    None,  # 846
    None,  # 847
    None,  # 848
    None,  # 849
    None,  # 850
    None,  # 851
    None,  # 852
    None,  # 853
    None,  # 854
    None,  # 855
    None,  # 856
    None,  # 857
    None,  # 858
    None,  # 859
    None,  # 860
    None,  # 861
    None,  # 862
    None,  # 863
    None,  # 864
    None,  # 865
    None,  # 866
    None,  # 867
    None,  # 868
    None,  # 869
    None,  # 870
    None,  # 871
    None,  # 872
    None,  # 873
    None,  # 874
    None,  # 875
    None,  # 876
    None,  # 877
    None,  # 878
    None,  # 879
    None,  # 880
    None,  # 881
    None,  # 882
    None,  # 883
    None,  # 884
    None,  # 885
    None,  # 886
    None,  # 887
    None,  # 888
    None,  # 889
    None,  # 890
    None,  # 891
    None,  # 892
    None,  # 893
    None,  # 894
    None,  # 895
    None,  # 896
    None,  # 897
    None,  # 898
    None,  # 899
    None,  # 900
    None,  # 901
    None,  # 902
    None,  # 903
    None,  # 904
    None,  # 905
    None,  # 906
    None,  # 907
    None,  # 908
    None,  # 909
    None,  # 910
    None,  # 911
    None,  # 912
    None,  # 913
    None,  # 914
    None,  # 915
    None,  # 916
    None,  # 917
    None,  # 918
    None,  # 919
    None,  # 920
    None,  # 921
    None,  # 922
    None,  # 923
    None,  # 924
    None,  # 925
    None,  # 926
    None,  # 927
    None,  # 928
    None,  # 929
    None,  # 930
    None,  # 931
    None,  # 932
    None,  # 933
    None,  # 934
    None,  # 935
    None,  # 936
    None,  # 937
    None,  # 938
    None,  # 939
    None,  # 940
    None,  # 941
    None,  # 942
    None,  # 943
    None,  # 944
    None,  # 945
    None,  # 946
    None,  # 947
    None,  # 948
    None,  # 949
    None,  # 950
    None,  # 951
    None,  # 952
    None,  # 953
    None,  # 954
    None,  # 955
    None,  # 956
    None,  # 957
    None,  # 958
    None,  # 959
    None,  # 960
    None,  # 961
    None,  # 962
    None,  # 963
    None,  # 964
    None,  # 965
    None,  # 966
    None,  # 967
    None,  # 968
    None,  # 969
    None,  # 970
    None,  # 971
    None,  # 972
    None,  # 973
    None,  # 974
    None,  # 975
    None,  # 976
    None,  # 977
    None,  # 978
    None,  # 979
    None,  # 980
    None,  # 981
    None,  # 982
    None,  # 983
    None,  # 984
    None,  # 985
    None,  # 986
    None,  # 987
    None,  # 988
    None,  # 989
    None,  # 990
    None,  # 991
    None,  # 992
    None,  # 993
    None,  # 994
    None,  # 995
    None,  # 996
    None,  # 997
    None,  # 998
    None,  # 999
    (1000, TType.STRUCT, 'guildSettings', [GuildSettings, None], None, ),  # 1000
    None,  # 1001
    None,  # 1002
    None,  # 1003
    None,  # 1004
    None,  # 1005
    None,  # 1006
    None,  # 1007
    None,  # 1008
    None,  # 1009
    (1010, TType.MAP, 'guildMemberTypes', (TType.I32, None, TType.STRUCT, [GuildMemberType, None], False), None, ),  # 1010
    None,  # 1011
    (1012, TType.MAP, 'guildJoinTypes', (TType.I32, None, TType.STRUCT, [GuildJoinType, None], False), None, ),  # 1012
    None,  # 1013
    None,  # 1014
    None,  # 1015
    None,  # 1016
    None,  # 1017
    None,  # 1018
    None,  # 1019
    (1020, TType.MAP, 'guildEmblems', (TType.STRING, 'UTF8', TType.STRUCT, [GuildEmblem, None], False), None, ),  # 1020
    (1021, TType.MAP, 'guildFrames', (TType.STRING, 'UTF8', TType.STRUCT, [GuildFrame, None], False), None, ),  # 1021
    (1022, TType.LIST, 'guildNameSuggestFirst', (TType.STRING, 'UTF8', False), None, ),  # 1022
    (1023, TType.LIST, 'guildNameSuggestSecond', (TType.STRING, 'UTF8', False), None, ),  # 1023
    (1024, TType.MAP, 'leagues', (TType.I32, None, TType.STRUCT, [League, None], False), None, ),  # 1024
    None,  # 1025
    None,  # 1026
    None,  # 1027
    None,  # 1028
    None,  # 1029
    (1030, TType.LIST, 'userNameSuggestFirst', (TType.STRING, 'UTF8', False), None, ),  # 1030
    (1031, TType.LIST, 'userNameSuggestSecond', (TType.STRING, 'UTF8', False), None, ),  # 1031
    (1032, TType.STRUCT, 'text', [Text, None], None, ),  # 1032
)
fix_spec(all_structs)
del all_structs
